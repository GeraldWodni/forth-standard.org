{
    "block": {
        "name": "block",
        "words": {
            "BLK": {
                "id": "block:BLK",
                "number": "7.6.1.0790",
                "name": "BLK",
                "english": "b-l-k",
                "list": "BLOCK",
                "basename": "BLK",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>a-addr</em> )"
                    },
                    "plain": {
                        " ": "( -- a-addr )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>a-addr</em> )\n      <p>\n      <em>a-addr</em> is the address of a cell containing zero or the\n      number of the mass-storage block being interpreted. If\n      <strong>BLK</strong> contains zero, the input source is not a block and\n      can be identified by <a href=\"../core/SOURCE-ID.html\">SOURCE-ID</a>, if\n      <a href=\"../core/SOURCE-ID.html\">SOURCE-ID</a> is available. An ambiguous condition\n      exists if a program directly alters the contents of <strong>BLK</strong>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../block.html#block:buffers\">7.3.2 Block buffer regions</a></strong>.\n      \n      "
                    }
                }
            },
            "BLOCK": {
                "id": "block:BLOCK",
                "number": "7.6.1.0800",
                "name": "BLOCK",
                "english": " ",
                "list": "BLOCK",
                "basename": "BLOCK",
                "stackEffect": {
                    "html": {
                        " ": "( <em>u</em> -- <em>a-addr</em> )"
                    },
                    "plain": {
                        " ": "( u -- a-addr )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>u</em> -- <em>a-addr</em> )\n      <p>\n      <em>a-addr</em> is the address of the first character of the\n      block buffer assigned to mass-storage block <em>u</em>. An\n      ambiguous condition exists if <em>u</em> is not an available\n      block number.\n      </p><p>\n      If block <em>u</em> is already in a block buffer, <em>a-addr</em>\n      is the address of that block buffer.\n      </p><p>\n      If block <em>u</em> is not already in memory and there is an\n      unassigned block buffer, transfer block <em>u</em> from mass\n      storage to an unassigned block buffer. <em>a-addr</em> is the\n      address of that block buffer.\n      </p><p>\n      If block <em>u</em> is not already in memory and there are no\n      unassigned block buffers, unassign a block buffer. If the block\n      in that buffer has been <a href=\"../block/UPDATE.html\">UPDATE</a>d, transfer the block to\n      mass storage and transfer block <em>u</em> from mass storage into\n      that buffer. <em>a-addr</em> is the address of that block buffer.\n      </p><p>\n      At the conclusion of the operation, the block buffer pointed to\n      by <em>a-addr</em> is the current block buffer and is assigned to\n      <em>u</em>.\n      \n      </p>"
                    }
                }
            },
            "BUFFER": {
                "id": "block:BUFFER",
                "number": "7.6.1.0820",
                "name": "BUFFER",
                "english": " ",
                "list": "BLOCK",
                "basename": "BUFFER",
                "stackEffect": {
                    "html": {
                        " ": "( <em>u</em> -- <em>a-addr</em> )"
                    },
                    "plain": {
                        " ": "( u -- a-addr )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>u</em> -- <em>a-addr</em> )\n      <p>\n      <em>a-addr</em> is the address of the first character of the\n      block buffer assigned to block <em>u</em>. The contents of the\n      block are unspecified. An ambiguous condition exists if <em>u</em>\n      is not an available block number.\n      </p><p>\n      If block <em>u</em> is already in a block buffer, <em>a-addr</em>\n      is the address of that block buffer.\n      </p><p>\n      If block <em>u</em> is not already in memory and there is an\n      unassigned \tbuffer, <em>a-addr</em> is the address of that block\n      buffer.\n      </p><p>\n      If block <em>u</em> is not already in memory and there are no\n      unassigned block buffers, unassign a block buffer. If the block\n      in that buffer has been <a href=\"../block/UPDATE.html\">UPDATE</a>d, transfer the block to\n      mass storage. <em>a-addr</em> is the address of that block buffer.\n      </p><p>\n      At the conclusion of the operation, the block buffer pointed to\n      by <em>a-addr</em> is the current block buffer and is assigned to\n      <em>u</em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../block/BLOCK.html\">7.6.1.0800 BLOCK</a>.\n      \n      "
                    }
                }
            },
            "EMPTY-BUFFERS": {
                "id": "block:EMPTY-BUFFERS",
                "number": "7.6.2.1330",
                "name": "EMPTY-BUFFERS",
                "english": " ",
                "list": "BLOCK EXT",
                "basename": "EMPTY-BUFFERS",
                "stackEffect": {
                    "html": {
                        " ": "( -- )"
                    },
                    "plain": {
                        " ": "( -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- )\n      <p>\n      Unassign all block buffers. Do not transfer the contents of\n      any <a href=\"../block/UPDATE.html\">UPDATE</a>d block buffer to mass storage.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../block/BLOCK.html\">7.6.1.0800 BLOCK</a>.\n      \n      "
                    }
                }
            },
            "EVALUATE": {
                "id": "block:EVALUATE",
                "number": "7.6.1.1360",
                "name": "EVALUATE",
                "english": " ",
                "list": "BLOCK",
                "basename": "EVALUATE",
                "stackEffect": {
                    "html": {},
                    "plain": {}
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n Extend the semantics of <a href=\"../core/EVALUATE.html\">6.1.1360 EVALUATE</a> to\n      include: Store zero in <a href=\"../block/BLK.html\">BLK</a>.\n      \n      "
                    }
                }
            },
            "FLUSH": {
                "id": "block:FLUSH",
                "number": "7.6.1.1559",
                "name": "FLUSH",
                "english": " ",
                "list": "BLOCK",
                "basename": "FLUSH",
                "stackEffect": {
                    "html": {
                        " ": "( -- )"
                    },
                    "plain": {
                        " ": "( -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- )\n      <p>\n      Perform the function of <a href=\"../block/SAVE-BUFFERS.html\">SAVE-BUFFERS</a>, then unassign all\n      block buffers.\n      \n      </p>"
                    }
                }
            },
            "LIST": {
                "id": "block:LIST",
                "number": "7.6.2.1770",
                "name": "LIST",
                "english": " ",
                "list": "BLOCK EXT",
                "basename": "LIST",
                "stackEffect": {
                    "html": {
                        " ": "( <em>u</em> -- )"
                    },
                    "plain": {
                        " ": "( u -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>u</em> -- )\n      <p>\n      Display block <em>u</em> in an implementation-defined format.\n      Store <em>u</em> in <a href=\"../block/SCR.html\">SCR</a>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../block/BLOCK.html\">7.6.1.0800 BLOCK</a>.\n      \n      "
                    }
                }
            },
            "LOAD": {
                "id": "block:LOAD",
                "number": "7.6.1.1790",
                "name": "LOAD",
                "english": " ",
                "list": "BLOCK",
                "basename": "LOAD",
                "stackEffect": {
                    "html": {
                        " ": "( <em>i * x u</em> -- <em>j * x</em> )"
                    },
                    "plain": {
                        " ": "( i * x u -- j * x )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>i * x u</em> -- <em>j * x</em> )\n      <p>\n      Save the current input-source specification. Store <em>u</em> in\n      <a href=\"../block/BLK.html\">BLK</a> (thus making block <em>u</em> the input source and\n      setting the input buffer to encompass its contents), set\n      <a href=\"../core/toIN.html\">&gt;IN</a> to zero, and interpret. When the parse area is\n      exhausted, restore the prior input source specification. Other\n      stack effects are due to the words <strong>LOAD</strong>ed.\n      </p><p>\n      An ambiguous condition exists if <em>u</em> is zero or is not a\n      valid block number.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:command\">3.4 The Forth text interpreter</a></strong>.\n      \n      "
                    }
                }
            },
            "REFILL": {
                "id": "block:REFILL",
                "number": "7.6.2.2125",
                "name": "REFILL",
                "english": " ",
                "list": "BLOCK EXT",
                "basename": "REFILL",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>flag</em> )"
                    },
                    "plain": {
                        " ": "( -- flag )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>flag</em> )\n      <p>\n      Extend the execution semantics of <a href=\"../core/REFILL.html\">6.2.2125 REFILL</a>\n      with the following:\n      </p><p>\n      When the input source is a block, make the next block the input\n      source and current input buffer by adding one to the value of\n      <a href=\"../block/BLK.html\">BLK</a> and setting <a href=\"../core/toIN.html\">&gt;IN</a> to zero. Return\n      <em>true</em> if the new value of BLK is a valid block number,\n      otherwise <em>false</em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/REFILL.html\">6.2.2125 REFILL</a>,\n      <a href=\"../file/REFILL.html\">11.6.2.2125 REFILL</a>.\n      \n      "
                    }
                }
            },
            "SAVE-BUFFERS": {
                "id": "block:SAVE-BUFFERS",
                "number": "7.6.1.2180",
                "name": "SAVE-BUFFERS",
                "english": " ",
                "list": "BLOCK",
                "basename": "SAVE-BUFFERS",
                "stackEffect": {
                    "html": {
                        " ": "( -- )"
                    },
                    "plain": {
                        " ": "( -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- )\n      <p>\n      Transfer the contents of each <a href=\"../block/UPDATE.html\">UPDATE</a>d block buffer to\n      mass storage. Mark all buffers as unmodified.\n      \n      </p>"
                    }
                }
            },
            "SCR": {
                "id": "block:SCR",
                "number": "7.6.2.2190",
                "name": "SCR",
                "english": "s-c-r",
                "list": "BLOCK EXT",
                "basename": "SCR",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>a-addr</em> )"
                    },
                    "plain": {
                        " ": "( -- a-addr )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>a-addr</em> )\n      <p>\n      <em>a-addr</em> is the address of a cell containing the block\n      number of the block most recently <a href=\"../block/LIST.html\">LIST</a>ed.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../rationale.html#rat:block:SCR\">A.7.6.2.2190 SCR</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.7.6.2.2190 SCR -->\n      <strong>SCR</strong> is short for screen.\n      \n      \n      "
                    }
                }
            },
            "THRU": {
                "id": "block:THRU",
                "number": "7.6.2.2280",
                "name": "THRU",
                "english": " ",
                "list": "BLOCK EXT",
                "basename": "THRU",
                "stackEffect": {
                    "html": {
                        " ": "( <em>i * x u<sub>1</sub> u<sub>2</sub></em> -- <em>j * x</em> )"
                    },
                    "plain": {
                        " ": "( i * x u1 u2 -- j * x )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>i * x u<sub>1</sub> u<sub>2</sub></em> -- <em>j * x</em> )\n      <p>\n      <a href=\"../block/LOAD.html\">LOAD</a> the mass storage blocks numbered <em>u<sub>1</sub></em> through\n      <em>u<sub>2</sub></em> in sequence. Other stack effects are due to the words\n      <a href=\"../block/LOAD.html\">LOAD</a>ed.\n      \n      </p>"
                    }
                }
            },
            "UPDATE": {
                "id": "block:UPDATE",
                "number": "7.6.1.2400",
                "name": "UPDATE",
                "english": " ",
                "list": "BLOCK",
                "basename": "UPDATE",
                "stackEffect": {
                    "html": {
                        " ": "( -- )"
                    },
                    "plain": {
                        " ": "( -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- )\n      <p>\n      Mark the current block buffer as modified. An ambiguous\n      condition exists if there is no current block buffer.\n      </p><p>\n      <strong>UPDATE</strong> does not immediately cause I/O.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../block/BLOCK.html\">7.6.1.0800 BLOCK</a>,\n      <a href=\"../block/BUFFER.html\">7.6.1.0820 BUFFER</a>,\n      <a href=\"../block/FLUSH.html\">7.6.1.1559 FLUSH</a>,<br>\n      <a href=\"../block/SAVE-BUFFERS.html\">7.6.1.2180 SAVE-BUFFERS</a>.\n      \n      "
                    }
                }
            },
            "bs": {
                "id": "block:bs",
                "number": "7.6.2.2535",
                "name": "\\",
                "english": "backslash",
                "list": "BLOCK EXT",
                "basename": "bs",
                "stackEffect": {
                    "html": {
                        "Execution:": "( <em>\"ccc&lt;eol&gt;\"</em> -- )"
                    },
                    "plain": {
                        "Execution:": "( \"ccc<eol>\" -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n Extend the semantics of <a href=\"../core/bs.html\">6.2.2535 \\</a> to be:\n        \n      "
                    },
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      Perform the execution semantics given below.\n      <p>\n        \n      </p>"
                    },
                    "Execution:": {
                        "name": "Execution:",
                        "html": "\n\n\n      ( <em>\"ccc&lt;eol&gt;\"</em> -- )\n      <p>\n      If <a href=\"../block/BLK.html\">BLK</a> contains zero, parse and discard the remainder\n      of the parse area; otherwise parse and discard the portion\n      of the parse area corresponding to the remainder of the current\n      line. <strong>\\</strong> is an immediate word.\n      \n      </p>"
                    }
                }
            }
        }
    },
    "core": {
        "name": "core",
        "words": {
            "ABORT": {
                "id": "core:ABORT",
                "number": "6.1.0670",
                "name": "ABORT",
                "english": " ",
                "list": "CORE",
                "basename": "ABORT",
                "stackEffect": {
                    "html": {
                        " ": "( <em>i * x</em> -- )\n      ( R: <em>j * x</em> -- )"
                    },
                    "plain": {
                        " ": "( i * x -- )\n( R: j * x -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>i * x</em> -- )\n      ( R: <em>j * x</em> -- )\n      <p>\n      Empty the data stack and perform the function of <a href=\"../core/QUIT.html\">QUIT</a>,\n      which includes emptying the return stack, without displaying\n      a message.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../exception/ABORT.html\">9.6.2.0670 ABORT</a>.\n      \n      "
                    }
                }
            },
            "ABORTq": {
                "id": "core:ABORTq",
                "number": "6.1.0680",
                "name": "ABORT\"",
                "english": "abort-quote",
                "list": "CORE",
                "basename": "ABORTq",
                "stackEffect": {
                    "html": {
                        "Compilation:": "( <em>\"ccc&lt;quote&gt;\"</em> -- )",
                        "Run-time:": "( <em>i * x x<sub>1</sub></em> -- <em> |  i * x</em> )\n      ( R: <em>j * x</em> -- <em> |  j * x</em> )"
                    },
                    "plain": {
                        "Compilation:": "( \"ccc<quote>\" -- )",
                        "Run-time:": "( i * x x1 --  |  i * x )\n( R: j * x --  |  j * x )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      ( <em>\"ccc&lt;quote&gt;\"</em> -- )\n      <p>\n      Parse <em>ccc</em> delimited by a <code>\"</code> (double-quote).\n      Append the run-time semantics given below to the current\n      definition.\n      </p><p>\n        \n      </p>"
                    },
                    "Run-time:": {
                        "name": "Run-time:",
                        "html": "\n\n\n      ( <em>i * x x<sub>1</sub></em> -- <em> |  i * x</em> )\n      ( R: <em>j * x</em> -- <em> |  j * x</em> )\n      <p>\n      Remove <em>x<sub>1</sub></em> from the stack. If any bit of <em>x<sub>1</sub></em> is not\n      zero, display <em>ccc</em> and perform an implementation-defined\n      abort sequence that includes the function of <a href=\"../core/ABORT.html\">ABORT</a>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:parsing\">3.4.1 Parsing</a></strong>,\n      <a href=\"../exception/ABORTq.html\">9.6.2.0680 ABORT\"</a>,\n      <a href=\"../rationale.html#rat:core:ABORTq\">A.6.1.0680 ABORT\"</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.1.0680 ABORT\" -->\n      Typical use:\n      <a href=\"../core/Colon.html\">:</a> <code>X</code> ...\n      <em>test</em> <strong>ABORT\"</strong> <em>ccc</em><code>\"</code>\n      ... <a href=\"../core/Semi.html\">;</a>\n      \n      \n      "
                    }
                }
            },
            "ABS": {
                "id": "core:ABS",
                "number": "6.1.0690",
                "name": "ABS",
                "english": "abs",
                "list": "CORE",
                "basename": "ABS",
                "stackEffect": {
                    "html": {
                        " ": "( <em>n</em> -- <em>u</em> )"
                    },
                    "plain": {
                        " ": "( n -- u )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>n</em> -- <em>u</em> )\n      <p>\n      <em>u</em> is the absolute value of <em>n</em>.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0690 ABS -->\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;<strong>ABS</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>ABS</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>ABS</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 }T</span> <br>\n      <span class=\"tt\">T{ MIN-INT&nbsp;<strong>ABS</strong> -&gt; MID-UINT+1 }T</span>\n      \n      \n      "
                    }
                }
            },
            "ACCEPT": {
                "id": "core:ACCEPT",
                "number": "6.1.0695",
                "name": "ACCEPT",
                "english": " ",
                "list": "CORE",
                "basename": "ACCEPT",
                "stackEffect": {
                    "html": {
                        " ": "( <em>c-addr +n<sub>1</sub></em> -- <em>+n<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( c-addr +n1 -- +n2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>c-addr +n<sub>1</sub></em> -- <em>+n<sub>2</sub></em> )\n      <p>\n      Receive a string of at most <em>+n<sub>1</sub></em> characters. An ambiguous\n      condition exists if <em>+n<sub>1</sub></em> is zero or greater than 32,767.\n      Display graphic characters as they are received. A program that\n      depends on the presence or absence of non-graphic characters in the\n      string has an environmental dependency. The editing functions, if\n      any, that the system performs in order to construct the string are\n      implementation-defined.\n      </p><p>\n      Input terminates when an implementation-defined line terminator is\n      received. When input terminates, nothing is appended to the string,\n      and the display is maintained in an implementation-defined way.\n      </p><p>\n      <em>+n<sub>2</sub></em> is the length of the string stored at <em>c-addr</em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../rationale.html#rat:core:ACCEPT\">A.6.1.0695 ACCEPT</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.1.0695 ACCEPT -->\n      Specification of a non-zero, positive integer count (<em>+n<sub>1</sub></em>)\n      for <strong>ACCEPT</strong> allows some implementors to continue their\n      practice of using a zero or negative value as a flag to trigger\n      special behavior. Insofar as such behavior is outside the\n      standard, Standard Programs cannot depend upon it, but the\n      committee doesn't wish to preclude it unnecessarily.\n      Because actual values are almost always small integers, no\n      functionality is impaired by this restriction.\n      <p>\n      It is recommended that all non-graphic characters be reserved\n      for editing or control functions and not be stored in the input\n      string.\n      </p><p>\n      Because external system hardware and software may perform the\n      <strong>ACCEPT</strong> function, when a line terminator is received the\n      action of the cursor, and therefore the display, is\n      implementation-defined. It is recommended that the cursor remain\n      immediately following the entered text after a line terminator\n      is received.\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0695 ACCEPT -->\n            <div class=\"tt\">\n<a href=\"../core/CREATE.html\">CREATE</a> ABUF 80 <a href=\"../core/CHARS.html\">CHARS</a> <a href=\"../core/ALLOT.html\">ALLOT</a>\n        <p>\n        <a href=\"../core/Colon.html\">:</a> ACCEPT-TEST <br>\n        &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/CR.html\">CR</a> <a href=\"../core/Dotq.html\">.\"</a> PLEASE TYPE UP TO 80 CHARACTERS:\" <a href=\"../core/CR.html\">CR</a> <br>\n        &nbsp;&nbsp;&nbsp;&nbsp; ABUF 80 <strong>ACCEPT</strong> <br>\n        &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/CR.html\">CR</a> <a href=\"../core/Dotq.html\">.\"</a> RECEIVED: \" <a href=\"../core/BracketCHAR.html\">[CHAR]</a> \" <a href=\"../core/EMIT.html\">EMIT</a> <br>\n        &nbsp;&nbsp;&nbsp;&nbsp; ABUF <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../core/TYPE.html\">TYPE</a> <a href=\"../core/BracketCHAR.html\">[CHAR]</a> \" <a href=\"../core/EMIT.html\">EMIT</a> <a href=\"../core/CR.html\">CR</a> <br>\n        <a href=\"../core/Semi.html\">;</a>\n        </p><p>\n        <span class=\"tt\">T{ ACCEPT-TEST -&gt;  }T</span>\n        \n        \n        </p></div>\n      "
                    }
                }
            },
            "ACTION-OF": {
                "id": "core:ACTION-OF",
                "number": "6.2.0698",
                "name": "ACTION-OF",
                "english": " ",
                "list": "CORE EXT",
                "basename": "ACTION-OF",
                "stackEffect": {
                    "html": {
                        "Interpretation:": "( <em>\"&lt;spaces&gt;name\"</em> -- <em>xt</em> )",
                        "Compilation:": "( <em>\"&lt;spaces&gt;name\"</em> -- )",
                        "Run-time:": "( -- <em>xt</em> )"
                    },
                    "plain": {
                        "Interpretation:": "( \"<spaces>name\" -- xt )",
                        "Compilation:": "( \"<spaces>name\" -- )",
                        "Run-time:": "( -- xt )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      ( <em>\"&lt;spaces&gt;name\"</em> -- <em>xt</em> )\n      <p>\n      Skip leading spaces and parse <em>name</em> delimited by a space.\n      <em>xt</em> is the execution token that <em>name</em> is set to execute.\n      An ambiguous condition exists if <em>name</em> was not defined by\n      <a href=\"../core/DEFER.html\">DEFER</a>, or if the <em>name</em> has not been set to execute an\n      <em>xt</em>.\n      </p><p>\n        \n      </p>"
                    },
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      ( <em>\"&lt;spaces&gt;name\"</em> -- )\n      <p>\n      Skip leading spaces and parse <em>name</em> delimited by a space.\n      Append the run-time semantics given below to the current\n      definition.  An ambiguous condition exists if <em>name</em>\n      was not defined by <a href=\"../core/DEFER.html\">DEFER</a>.\n      </p><p>\n        \n      </p>"
                    },
                    "Run-time:": {
                        "name": "Run-time:",
                        "html": "\n\n\n      ( -- <em>xt</em> )\n      <p>\n      <em>xt</em> is the execution token that <em>name</em> is set to execute.\n      An ambiguous condition exists if <em>name</em> has not been\n      set to execute an <em>xt</em>.\n      </p><p>\n      An ambiguous condition exists if <a href=\"../core/POSTPONE.html\">POSTPONE</a>, <a href=\"../core/BracketCOMPILE.html\">[COMPILE]</a>,\n      <a href=\"../core/BracketTick.html\">[']</a> or <a href=\"../core/Tick.html\">'</a> is applied to <strong>ACTION-OF</strong>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/DEFER.html\">6.2.1173 DEFER</a>,\n      <a href=\"../core/DEFERStore.html\">6.2.1175 DEFER!</a>,\n      <a href=\"../core/DEFERFetch.html\">6.2.1177 DEFER@</a>,\n      <a href=\"../core/IS.html\">6.2.1725 IS</a>.\n      <p>\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n <!-- I.6.2.---- ACTION-OF -->\n      <a href=\"../core/Colon.html\">:</a> <strong>ACTION-OF</strong> <br>\n      &nbsp;&nbsp; <a href=\"../core/STATE.html\">STATE</a> <a href=\"../core/Fetch.html\">@</a> <a href=\"../core/IF.html\">IF</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/POSTPONE.html\">POSTPONE</a> <a href=\"../core/BracketTick.html\">[']</a> <a href=\"../core/POSTPONE.html\">POSTPONE</a> <a href=\"../core/DEFERFetch.html\">DEFER@</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/ELSE.html\">ELSE</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/Tick.html\">'</a> <a href=\"../core/DEFERFetch.html\">DEFER@</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/THEN.html\">THEN</a> <a href=\"../core/Semi.html\">;</a> <a href=\"../core/IMMEDIATE.html\">IMMEDIATE</a>\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.2.---- ACTION-OF -->\n      <span class=\"tt\">T{ <a href=\"../core/DEFER.html\">DEFER</a>&nbsp;defer1 -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;action-defer1&nbsp;<strong>ACTION-OF</strong>&nbsp;defer1&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span>\n      <p>\n      <span class=\"tt\">T{ <a href=\"../core/Tick.html\">'</a>&nbsp;<a href=\"../core/Times.html\">*</a>&nbsp;<a href=\"../core/Tick.html\">'</a>&nbsp;defer1&nbsp;<a href=\"../core/DEFERStore.html\">DEFER!</a> -&gt; &nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;3&nbsp;defer1 -&gt; 6 }T</span> <br>\n      <span class=\"tt\">T{ <strong>ACTION-OF</strong>&nbsp;defer1 -&gt; <a href=\"../core/Tick.html\">'</a>&nbsp;<a href=\"../core/Times.html\">*</a> }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;action-defer1 -&gt; <a href=\"../core/Tick.html\">'</a>&nbsp;<a href=\"../core/Times.html\">*</a> }T</span>\n      </p><p>\n      <span class=\"tt\">T{ <a href=\"../core/Tick.html\">'</a>&nbsp;<a href=\"../core/Plus.html\">+</a>&nbsp;<a href=\"../core/IS.html\">IS</a>&nbsp;defer1 -&gt; &nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;1&nbsp;2&nbsp;defer1 -&gt; 3 }T</span> <br>\n      <span class=\"tt\">T{ <strong>ACTION-OF</strong>&nbsp;defer1 -&gt; <a href=\"../core/Tick.html\">'</a>&nbsp;<a href=\"../core/Plus.html\">+</a> }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;action-defer1 -&gt; <a href=\"../core/Tick.html\">'</a>&nbsp;<a href=\"../core/Plus.html\">+</a> }T</span>\n      \n      \n      </p>"
                    }
                }
            },
            "AGAIN": {
                "id": "core:AGAIN",
                "number": "6.2.0700",
                "name": "AGAIN",
                "english": " ",
                "list": "CORE EXT",
                "basename": "AGAIN",
                "stackEffect": {
                    "html": {
                        "Compilation:": "( C: <em>dest</em> -- )",
                        "Run-time:": "( -- )"
                    },
                    "plain": {
                        "Compilation:": "( C: dest -- )",
                        "Run-time:": "( -- )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      ( C: <em>dest</em> -- )\n      <p>\n      Append the run-time semantics given below to the current\n      definition, resolving the backward reference <em>dest</em>.\n      </p><p>\n        \n      </p>"
                    },
                    "Run-time:": {
                        "name": "Run-time:",
                        "html": "\n\n\n      ( -- )\n      <p>\n      Continue execution at the location specified by <em>dest</em>.\n      If no other control flow words are used, any program code\n      after <strong>AGAIN</strong> will not be executed.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/BEGIN.html\">6.1.0760 BEGIN</a>,\n      <a href=\"../rationale.html#rat:core:AGAIN\">A.6.2.0700 AGAIN</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.2.0700 AGAIN -->\n      Typical use:\n      <a href=\"../core/Colon.html\">:</a> <code>X</code>\n      ... <a href=\"../core/BEGIN.html\">BEGIN</a> ... <strong>AGAIN</strong>\n      ... <a href=\"../core/Semi.html\">;</a>\n      <p>\n      Unless word-sequence has a way to terminate, this is an\n      endless loop.\n      \n      \n      </p>"
                    }
                }
            },
            "ALIGN": {
                "id": "core:ALIGN",
                "number": "6.1.0705",
                "name": "ALIGN",
                "english": " ",
                "list": "CORE",
                "basename": "ALIGN",
                "stackEffect": {
                    "html": {
                        " ": "( -- )"
                    },
                    "plain": {
                        " ": "( -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- )\n      <p>\n      If the data-space pointer is not aligned, reserve enough space\n      to align it.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:dataspace\">3.3.3 Data space</a></strong>,\n      <strong><a href=\"../usage.html#usage:aaddr\">3.3.3.1 Address alignment</a></strong>,\n      <a href=\"../rationale.html#rat:core:ALIGN\">A.6.1.0705 ALIGN</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.1.0705 ALIGN -->\n      In this standard we have attempted to provide transportability\n      across various CPU architectures. One of the frequent causes\n      of transportability problems is the requirement of cell-aligned\n      addresses on some CPUs. On these systems, <strong>ALIGN</strong> and\n      <a href=\"../core/ALIGNED.html\">ALIGNED</a> may be required to build and traverse data\n      structures built with <a href=\"../core/CComma.html\">C,</a>. Implementors may define these\n      words as no-ops on systems for which they aren't functional.\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0705 ALIGN -->\n            <div class=\"tt\">\n<strong>ALIGN</strong>  1 <a href=\"../core/ALLOT.html\">ALLOT</a> <a href=\"../core/HERE.html\">HERE</a>  <strong>ALIGN</strong> <a href=\"../core/HERE.html\">HERE</a> 3 <a href=\"../core/CELLS.html\">CELLS</a> <a href=\"../core/ALLOT.html\">ALLOT</a> <br>\n        <a href=\"../core/CONSTANT.html\">CONSTANT</a> A-ADDR  <a href=\"../core/CONSTANT.html\">CONSTANT</a> UA-ADDR <br>\n        <span class=\"tt\">T{ UA-ADDR&nbsp;<a href=\"../core/ALIGNED.html\">ALIGNED</a> -&gt; A-ADDR }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;A-ADDR&nbsp;<a href=\"../core/CStore.html\">C!</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A-ADDR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/CFetch.html\">C@</a> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;1234&nbsp;A-ADDR&nbsp;<a href=\"../core/Store.html\">!</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A-ADDR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp; -&gt; &nbsp;&nbsp;&nbsp;1234 }T</span> <br>\n        <span class=\"tt\">T{ 123&nbsp;456&nbsp;A-ADDR&nbsp;<a href=\"../core/TwoStore.html\">2!</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A-ADDR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/TwoFetch.html\">2@</a> -&gt; 123&nbsp;456 }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;A-ADDR&nbsp;<a href=\"../core/CHARPlus.html\">CHAR+</a>&nbsp;<a href=\"../core/CStore.html\">C!</a>&nbsp;&nbsp;&nbsp;A-ADDR&nbsp;<a href=\"../core/CHARPlus.html\">CHAR+</a>&nbsp;<a href=\"../core/CFetch.html\">C@</a> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2 }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;A-ADDR&nbsp;<a href=\"../core/CELLPlus.html\">CELL+</a>&nbsp;<a href=\"../core/CStore.html\">C!</a>&nbsp;&nbsp;&nbsp;A-ADDR&nbsp;<a href=\"../core/CELLPlus.html\">CELL+</a>&nbsp;<a href=\"../core/CFetch.html\">C@</a> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3 }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;1234&nbsp;A-ADDR&nbsp;<a href=\"../core/CELLPlus.html\">CELL+</a>&nbsp;<a href=\"../core/Store.html\">!</a>&nbsp;&nbsp;&nbsp;&nbsp;A-ADDR&nbsp;<a href=\"../core/CELLPlus.html\">CELL+</a>&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp; -&gt; &nbsp;&nbsp;&nbsp;1234 }T</span> <br>\n        <span class=\"tt\">T{ 123&nbsp;456&nbsp;A-ADDR&nbsp;<a href=\"../core/CELLPlus.html\">CELL+</a>&nbsp;<a href=\"../core/TwoStore.html\">2!</a>&nbsp;&nbsp;&nbsp;A-ADDR&nbsp;<a href=\"../core/CELLPlus.html\">CELL+</a>&nbsp;<a href=\"../core/TwoFetch.html\">2@</a> -&gt; 123&nbsp;456 }T</span>\n        \n        \n        </div>\n      "
                    }
                }
            },
            "ALIGNED": {
                "id": "core:ALIGNED",
                "number": "6.1.0706",
                "name": "ALIGNED",
                "english": " ",
                "list": "CORE",
                "basename": "ALIGNED",
                "stackEffect": {
                    "html": {
                        " ": "( <em>addr</em> -- <em>a-addr</em> )"
                    },
                    "plain": {
                        " ": "( addr -- a-addr )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>addr</em> -- <em>a-addr</em> )\n      <p>\n      <em>a-addr</em> is the first aligned address greater than or equal\n      to <em>addr</em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:aaddr\">3.3.3.1 Address alignment</a></strong>,\n      <a href=\"../core/ALIGN.html\">6.1.0705 ALIGN</a>.\n      \n      "
                    }
                }
            },
            "ALLOT": {
                "id": "core:ALLOT",
                "number": "6.1.0710",
                "name": "ALLOT",
                "english": " ",
                "list": "CORE",
                "basename": "ALLOT",
                "stackEffect": {
                    "html": {
                        " ": "( <em>n</em> -- )"
                    },
                    "plain": {
                        " ": "( n -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>n</em> -- )\n      <p>\n      If <em>n</em> is greater than zero, reserve <em>n</em> address units\n      of data space. If <em>n</em> is less than zero, release <em> | n | </em>\n      address units of data space. If <em>n</em> is zero, leave the\n      data-space pointer unchanged.\n      </p><p>\n      If the data-space pointer is aligned and <em>n</em> is a multiple\n      of the size of a cell when <strong>ALLOT</strong> begins execution, it will\n      remain aligned when <strong>ALLOT</strong> finishes execution.\n      </p><p>\n      If the data-space pointer is character aligned and <em>n</em> is a\n      multiple of the size of a character when <strong>ALLOT</strong> begins\n      execution, it will remain character aligned when <strong>ALLOT</strong>\n      finishes execution.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:dataspace\">3.3.3 Data space</a></strong>.\n      <p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0710 ALLOT -->\n            <div class=\"tt\">\n<a href=\"../core/HERE.html\">HERE</a> 1 <strong>ALLOT</strong> <br>\n        <a href=\"../core/HERE.html\">HERE</a> <br>\n        <a href=\"../core/CONSTANT.html\">CONSTANT</a> 2NDA <br>\n        <a href=\"../core/CONSTANT.html\">CONSTANT</a> 1STA <br>\n        <span class=\"tt\">T{ 1STA&nbsp;2NDA&nbsp;<a href=\"../core/Uless.html\">U&lt;</a> -&gt; &lt;TRUE&gt; }T</span> &nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> HERE MUST GROW WITH ALLOT <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1STA&nbsp;<a href=\"../core/OnePlus.html\">1+</a> -&gt; &nbsp;&nbsp;2NDA }T</span> &nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> ... BY ONE ADDRESS UNIT <br>\n        ( MISSING TEST: NEGATIVE ALLOT )\n        \n        \n        </div>\n      "
                    }
                }
            },
            "AND": {
                "id": "core:AND",
                "number": "6.1.0720",
                "name": "AND",
                "english": " ",
                "list": "CORE",
                "basename": "AND",
                "stackEffect": {
                    "html": {
                        " ": "( <em>x<sub>1</sub> x<sub>2</sub></em> -- <em>x<sub>3</sub></em> )"
                    },
                    "plain": {
                        " ": "( x1 x2 -- x3 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>x<sub>1</sub> x<sub>2</sub></em> -- <em>x<sub>3</sub></em> )\n      <p>\n      <em>x<sub>3</sub></em> is the bit-by-bit logical \"and\" of <em>x<sub>1</sub></em>\n      with <em>x<sub>2</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0720 AND -->\n      <span class=\"tt\">T{ 0&nbsp;0&nbsp;<strong>AND</strong> -&gt; 0 }T</span> <br>\n      <span class=\"tt\">T{ 0&nbsp;1&nbsp;<strong>AND</strong> -&gt; 0 }T</span> <br>\n      <span class=\"tt\">T{ 1&nbsp;0&nbsp;<strong>AND</strong> -&gt; 0 }T</span> <br>\n      <span class=\"tt\">T{ 1&nbsp;1&nbsp;<strong>AND</strong> -&gt; 1 }T</span>\n      <p>\n      <span class=\"tt\">T{ 0&nbsp;<a href=\"../core/INVERT.html\">INVERT</a>&nbsp;1&nbsp;<strong>AND</strong> -&gt; 1 }T</span> <br>\n      <span class=\"tt\">T{ 1&nbsp;<a href=\"../core/INVERT.html\">INVERT</a>&nbsp;1&nbsp;<strong>AND</strong> -&gt; 0 }T</span>\n      </p><p>\n      <span class=\"tt\">T{ 0S&nbsp;0S&nbsp;<strong>AND</strong> -&gt; 0S }T</span> <br>\n      <span class=\"tt\">T{ 0S&nbsp;1S&nbsp;<strong>AND</strong> -&gt; 0S }T</span> <br>\n      <span class=\"tt\">T{ 1S&nbsp;0S&nbsp;<strong>AND</strong> -&gt; 0S }T</span> <br>\n      <span class=\"tt\">T{ 1S&nbsp;1S&nbsp;<strong>AND</strong> -&gt; 1S }T</span>\n      \n      \n      </p>"
                    }
                }
            },
            "BASE": {
                "id": "core:BASE",
                "number": "6.1.0750",
                "name": "BASE",
                "english": " ",
                "list": "CORE",
                "basename": "BASE",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>a-addr</em> )"
                    },
                    "plain": {
                        " ": "( -- a-addr )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>a-addr</em> )\n      <p>\n      <em>a-addr</em> is the address of a cell containing the current\n      number-conversion radix {{2...36}}.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0750 BASE -->\n            <div class=\"tt\">\n<a href=\"../core/Colon.html\">:</a> GN2\t<a href=\"../core/bs.html\">\\</a> ( -- 16 10 ) <br>\n        &nbsp;&nbsp; <strong>BASE</strong> <a href=\"../core/Fetch.html\">@</a> <a href=\"../core/toR.html\">&gt;R</a>\n        <a href=\"../core/HEX.html\">HEX</a> <strong>BASE</strong> <a href=\"../core/Fetch.html\">@</a>\n        <a href=\"../core/DECIMAL.html\">DECIMAL</a> <strong>BASE</strong> <a href=\"../core/Fetch.html\">@</a>\n        <a href=\"../core/Rfrom.html\">R&gt;</a> <strong>BASE</strong> <a href=\"../core/Store.html\">!</a> <a href=\"../core/Semi.html\">;</a> <br>\n        <span class=\"tt\">T{ GN2 -&gt; 10&nbsp;A }T</span>\n        \n        \n        </div>\n      "
                    }
                }
            },
            "BEGIN": {
                "id": "core:BEGIN",
                "number": "6.1.0760",
                "name": "BEGIN",
                "english": " ",
                "list": "CORE",
                "basename": "BEGIN",
                "stackEffect": {
                    "html": {
                        "Compilation:": "( C: -- <em>dest</em> )",
                        "Run-time:": "( -- )"
                    },
                    "plain": {
                        "Compilation:": "( C: -- dest )",
                        "Run-time:": "( -- )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      ( C: -- <em>dest</em> )\n      <p>\n      Put the next location for a transfer of control, <em>dest</em>, onto\n      the control flow stack. Append the run-time semantics given below\n      to the current definition.\n      </p><p>\n        \n      </p>"
                    },
                    "Run-time:": {
                        "name": "Run-time:",
                        "html": "\n\n\n      ( -- )\n      <p>\n      Continue execution.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:controlstack\">3.2.3.2 Control-flow stack</a></strong>,\n      <a href=\"../core/REPEAT.html\">6.1.2140 REPEAT</a>,\n      <a href=\"../core/UNTIL.html\">6.1.2390 UNTIL</a>,\n      <a href=\"../core/WHILE.html\">6.1.2430 WHILE</a>, <br>\n      <a href=\"../rationale.html#rat:core:BEGIN\">A.6.1.0760 BEGIN</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.1.0760 BEGIN -->\n      Typical use:\n      <p>\n      &nbsp;&nbsp; <a href=\"../core/Colon.html\">:</a> <code>X</code> ...\n      <strong>BEGIN</strong> ... <em>test</em> <a href=\"../core/UNTIL.html\">UNTIL</a>\n      <a href=\"../core/Semi.html\">;</a>\n      </p><p>\n      or\n      </p><p>\n      &nbsp;&nbsp; <a href=\"../core/Colon.html\">:</a> <code>X</code> ...\n      <strong>BEGIN</strong> ...\n      <em>test</em> <a href=\"../core/WHILE.html\">WHILE</a> ...\n      <a href=\"../core/REPEAT.html\">REPEAT</a>\n      <a href=\"../core/Semi.html\">;</a>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.2.0760 BEGIN -->\n      See <a href=\"../testsuite.html#test:core:WHILE\">F.6.1.2430 WHILE</a>,\n      <a href=\"../testsuite.html#test:core:UNTIL\">F.6.1.2390 UNTIL</a>.\n      \n      \n      "
                    }
                }
            },
            "BL": {
                "id": "core:BL",
                "number": "6.1.0770",
                "name": "BL",
                "english": "b-l",
                "list": "CORE",
                "basename": "BL",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>char</em> )"
                    },
                    "plain": {
                        " ": "( -- char )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>char</em> )\n      <p>\n      <em>char</em> is the character value for a space.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../rationale.html#rat:core:BL\">A.6.1.0770 BL</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.1.0770 BL -->\n      Because space is used throughout Forth as the standard\n      delimiter, this word is the only way a program has to find and\n      use the system value of \"space\". The value of a space\n      character can not be obtained with <a href=\"../core/CHAR.html\">CHAR</a>, for instance.\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0770 BL -->\n      <span class=\"tt\">T{ <strong>BL</strong> -&gt; 20 }T</span>\n      \n      \n      "
                    }
                }
            },
            "BUFFERColon": {
                "id": "core:BUFFER:",
                "number": "6.2.0825",
                "name": "BUFFER:",
                "english": "buffer-colon",
                "list": "CORE EXT",
                "basename": "BUFFERColon",
                "stackEffect": {
                    "html": {
                        " ": "( <em>u \"&lt;spaces&gt;name\"</em> -- )",
                        "name Execution:": "( -- <em>a-addr</em> )"
                    },
                    "plain": {
                        " ": "( u \"<spaces>name\" -- )",
                        "name Execution:": "( -- a-addr )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>u \"&lt;spaces&gt;name\"</em> -- )\n      <p>\n      Skip leading space delimiters. Parse <em>name</em> delimited by a space.\n      Create a definition for <em>name</em>, with the execution semantics defined\n      below.  Reserve <em>u</em> address units at an aligned address.\n      Contiguity of this region with any other region is undefined.\n      </p><p>\n        \n      </p>"
                    },
                    "name Execution:": {
                        "name": "name Execution:",
                        "html": "\n\n\n      ( -- <em>a-addr</em> )\n      <p>\n      <em>a-addr</em> is the address of the space reserved by <strong>BUFFER:</strong> when\n      it defined <em>name</em>.  The program is responsible for initializing the\n      contents.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../rationale.html#rat:core:BUFFER:\">A.6.2.0825 BUFFER:</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n\n      <strong>BUFFER:</strong> provides a means of defining an uninitialized buffer.\n      In systems that use a single memory space, this can effectively\n      be defined as:\n      <p>\n            </p><div class=\"quote\">\n        <div class=\"tt\">\n<a href=\"../core/Colon.html\">:</a> <strong>BUFFER:</strong> <a href=\"../core/p.html\">(</a> u \"&lt;name&gt;\" -- ; -- addr ) <br>\n          &nbsp;&nbsp;&nbsp;<a href=\"../core/CREATE.html\">CREATE</a> <a href=\"../core/ALLOT.html\">ALLOT</a> <br>\n          <a href=\"../core/Semi.html\">;</a>\n          \n          </div>\n        </div> \n      <p>\n      However, many systems profit from a separation of uninitialized and\n      initialized data areas.  Such systems can implement <strong>BUFFER:</strong> so\n      that it allocates memory from a separate uninitialized memory area.\n      Embedded systems can take advantage of the lack of initialization of the\n      memory area while hosted systems are permitted to <a href=\"../memory/ALLOCATE.html\">ALLOCATE</a>\n      a buffer.\n      A system may select a region of memory for performance reasons.\n      A detailed knowledge of the memory allocation within the system\n      is required to provide a version of <strong>BUFFER:</strong> that can take\n      advantage of the system.\n      </p><p>\n      It should be noted that the memory buffer provided by <strong>BUFFER:</strong>\n      is not initialized by the system and that if the application requires\n      it to be initialized, it is the responsibility of the application to\n      initialize it.\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n\n            <div class=\"rm\">\nThis implementation depends on children of <a href=\"../core/CREATE.html\">CREATE</a>\n        returning an aligned address.  Other memory location techniques\n        require implementation-specific knowledge of the underlying Forth\n        system.\n        <p>\n                </p><div class=\"tt\">\n<a href=\"../core/Colon.html\">:</a> <strong>BUFFER:</strong> <a href=\"../core/bs.html\">\\</a> u \"&lt;name&gt;\" -- ; -- addr <br>\n          <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Create a buffer of u address units whose address is returned at run time.</span> <br>\n          &nbsp;&nbsp; <a href=\"../core/CREATE.html\">CREATE</a> <a href=\"../core/ALLOT.html\">ALLOT</a> <br>\n          <a href=\"../core/Semi.html\">;</a>\n            \n          </div>\n        </div>\n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n            <div class=\"tt\">\n<a href=\"../core/DECIMAL.html\">DECIMAL</a> <br>\n        <span class=\"tt\">T{ 127&nbsp;<a href=\"../core/CHARS.html\">CHARS</a>&nbsp;<strong>BUFFER:</strong>&nbsp;TBUF1 -&gt;  }T</span> <br>\n        <span class=\"tt\">T{ 127&nbsp;<a href=\"../core/CHARS.html\">CHARS</a>&nbsp;<strong>BUFFER:</strong>&nbsp;TBUF2 -&gt;  }T</span>\n        <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Buffer is aligned</span> <br>\n        <span class=\"tt\">T{ TBUF1&nbsp;<a href=\"../core/ALIGNED.html\">ALIGNED</a> -&gt; TBUF1 }T</span>\n        <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Buffers do not overlap</span> <br>\n        <span class=\"tt\">T{ TBUF2&nbsp;TBUF1&nbsp;<a href=\"../core/Minus.html\">-</a>&nbsp;<a href=\"../core/ABS.html\">ABS</a>&nbsp;127&nbsp;<a href=\"../core/CHARS.html\">CHARS</a>&nbsp;<a href=\"../core/less.html\">&lt;</a> -&gt; &lt;FALSE&gt; }T</span>\n        <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Buffer can be written to</span> <br>\n        1 <a href=\"../core/CHARS.html\">CHARS</a> <a href=\"../core/CONSTANT.html\">CONSTANT</a> /CHAR <br>\n        <a href=\"../core/Colon.html\">:</a> TFULL? <a href=\"../core/p.html\">(</a> c-addr n char -- flag )<br>\n        &nbsp;&nbsp;&nbsp;<a href=\"../core/TRUE.html\">TRUE</a> <a href=\"../core/TwoSWAP.html\">2SWAP</a> <a href=\"../core/CHARS.html\">CHARS</a> <a href=\"../core/OVER.html\">OVER</a> <a href=\"../core/Plus.html\">+</a> <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../core/qDO.html\">?DO</a> <br>\n        &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/OVER.html\">OVER</a> <a href=\"../core/I.html\">I</a> <a href=\"../core/CFetch.html\">C@</a> <a href=\"../core/Equal.html\">=</a> <a href=\"../core/AND.html\">AND</a> <br>\n        &nbsp;&nbsp;&nbsp;/CHAR <a href=\"../core/PlusLOOP.html\">+LOOP</a> <a href=\"../core/NIP.html\">NIP</a> <br>\n        <a href=\"../core/Semi.html\">;</a>\n        <p>\n        <span class=\"tt\">T{ TBUF1&nbsp;127&nbsp;<a href=\"../core/CHAR.html\">CHAR</a>&nbsp;*&nbsp;<a href=\"../core/FILL.html\">FILL</a>&nbsp;&nbsp; -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ TBUF1&nbsp;127&nbsp;<a href=\"../core/CHAR.html\">CHAR</a>&nbsp;*&nbsp;TFULL? -&gt; &lt;TRUE&gt; }T</span>\n        </p><p>\n        <span class=\"tt\">T{ TBUF1&nbsp;127&nbsp;0&nbsp;<a href=\"../core/FILL.html\">FILL</a>&nbsp;&nbsp; -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ TBUF1&nbsp;127&nbsp;0&nbsp;TFULL? -&gt; &lt;TRUE&gt; }T</span>\n        \n        \n        </p></div>\n      "
                    }
                }
            },
            "Bracket": {
                "id": "core:[",
                "number": "6.1.2500",
                "name": "[",
                "english": "left-bracket",
                "list": "CORE",
                "basename": "Bracket",
                "stackEffect": {
                    "html": {
                        "Execution:": "( -- )"
                    },
                    "plain": {
                        "Execution:": "( -- )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      Perform the execution semantics given below.\n      <p>\n        \n      </p>"
                    },
                    "Execution:": {
                        "name": "Execution:",
                        "html": "\n\n\n      ( -- )\n      <p>\n      Enter interpretation state. <strong>[</strong> is an immediate word.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:command\">3.4 The Forth text interpreter</a></strong>,\n      <strong><a href=\"../usage.html#usage:compilation\">3.4.5 Compilation</a></strong>,\n      <a href=\"../right-bracket.html\">6.1.2540 ]</a>,\n      <a href=\"../rationale.html#rat:core:[\">A.6.1.2500 [</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.1.2500 [ -->\n      Typical use:\n      <a href=\"../core/Colon.html\">:</a> <code>X</code> ...\n      <strong>[</strong> <code>4321</code> <a href=\"../right-bracket.html\">]</a> <a href=\"../core/LITERAL.html\">LITERAL</a>\n      ... <a href=\"../core/Semi.html\">;</a>\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.2500 [ -->\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;GC3&nbsp;<strong>[</strong>&nbsp;GC1&nbsp;<a href=\"../right-bracket.html\">]</a>&nbsp;<a href=\"../core/LITERAL.html\">LITERAL</a>&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ GC3 -&gt; 58 }T</span>\n      \n      \n      "
                    }
                }
            },
            "BracketCHAR": {
                "id": "core:[CHAR]",
                "number": "6.1.2520",
                "name": "[CHAR]",
                "english": "bracket-char",
                "list": "CORE",
                "basename": "BracketCHAR",
                "stackEffect": {
                    "html": {
                        "Compilation:": "( <em>\"&lt;spaces&gt;name\"</em> -- )",
                        "Run-time:": "( -- <em>char</em> )"
                    },
                    "plain": {
                        "Compilation:": "( \"<spaces>name\" -- )",
                        "Run-time:": "( -- char )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      ( <em>\"&lt;spaces&gt;name\"</em> -- )\n      <p>\n      Skip leading space delimiters. Parse <em>name</em> delimited\n      by a space. Append the run-time semantics given below to the\n      current definition.\n      </p><p>\n        \n      </p>"
                    },
                    "Run-time:": {
                        "name": "Run-time:",
                        "html": "\n\n\n      ( -- <em>char</em> )\n      <p>\n      Place <em>char</em>, the value of the first character of\n      <em>name</em>, on the stack.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:parsing\">3.4.1 Parsing</a></strong>,\n      <a href=\"../core/CHAR.html\">6.1.0895 CHAR</a>,\n      <a href=\"../rationale.html#rat:core:[CHAR]\">A.6.1.2520 [CHAR]</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.1.2520 [CHAR] -->\n      Typical use:\n      <a href=\"../core/Colon.html\">:</a> <code>X</code> ...\n      <strong>[CHAR]</strong> <em>c</em>\n      ... <a href=\"../core/Semi.html\">;</a>\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.2520 [CHAR] -->\n      <span class=\"tt\">T{ :&nbsp;GC1&nbsp;<strong>[CHAR]</strong>&nbsp;X&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;; -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ :&nbsp;GC2&nbsp;<strong>[CHAR]</strong>&nbsp;HELLO&nbsp;; -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ GC1 -&gt; 58 }T</span> <br>\n      <span class=\"tt\">T{ GC2 -&gt; 48 }T</span>\n      \n      \n      "
                    }
                }
            },
            "BracketCOMPILE": {
                "id": "core:[COMPILE]",
                "number": "6.2.2530",
                "name": "[COMPILE]",
                "english": "bracket-compile",
                "list": "CORE EXT",
                "basename": "BracketCOMPILE",
                "stackEffect": {
                    "html": {
                        "Compilation:": "( <em>\"&lt;spaces&gt;name\"</em> -- )"
                    },
                    "plain": {
                        "Compilation:": "( \"<spaces>name\" -- )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      ( <em>\"&lt;spaces&gt;name\"</em> -- )\n      <p>\n      Skip leading space delimiters. Parse <em>name</em> delimited by\n      a space. Find <em>name</em>. If <em>name</em> has other than default\n      compilation semantics, append them to the current definition;\n      otherwise append the execution semantics of <em>name</em>. An\n      ambiguous condition exists if <em>name</em> is not found.\n      </p><p>\n        \n      </p>"
                    },
                    "Note:": {
                        "name": "Note:",
                        "html": "\n\n This word is obsolescent and is included as a concession to\n      existing implementations.\n      <p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:parsing\">3.4.1 Parsing</a></strong>,\n      <a href=\"../rationale.html#rat:core:[COMPILE]\">A.6.2.2530 [COMPILE]</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.2.2530 [COMPILE] -->\n      Typical use:\n      <a href=\"../core/Colon.html\">:</a> <code>name2</code> ...\n      <strong>[COMPILE]</strong> <code>name1</code>\n      ... <a href=\"../core/Semi.html\">;</a>   <a href=\"../core/IMMEDIATE.html\">IMMEDIATE</a>\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      <span class=\"rm\">With default compilation semantics</span> <br>\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;[c1]&nbsp;<strong>[COMPILE]</strong>&nbsp;<a href=\"../core/DUP.html\">DUP</a>&nbsp;<a href=\"../core/Semi.html\">;</a>&nbsp;<a href=\"../core/IMMEDIATE.html\">IMMEDIATE</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ 123&nbsp;[c1] -&gt; 123&nbsp;123 }T</span>\n      <p>\n      <span class=\"rm\">With an immediate word</span> <br>\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;[c2]&nbsp;<strong>[COMPILE]</strong>&nbsp;[c1]&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ 234&nbsp;[c2] -&gt; 234&nbsp;234 }T</span>\n      </p><p>\n      <span class=\"rm\">With special compilation semantics</span> <br>\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;[cif]&nbsp;<strong>[COMPILE]</strong>&nbsp;<a href=\"../core/IF.html\">IF</a>&nbsp;<a href=\"../core/Semi.html\">;</a>&nbsp;<a href=\"../core/IMMEDIATE.html\">IMMEDIATE</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;[c3]&nbsp;&nbsp;[cif]&nbsp;111&nbsp;<a href=\"../core/ELSE.html\">ELSE</a>&nbsp;222&nbsp;<a href=\"../core/THEN.html\">THEN</a>&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ -1&nbsp;[c3] -&gt; 111 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;0&nbsp;[c3] -&gt; 222 }T</span>\n      \n      \n      </p>"
                    }
                }
            },
            "BracketTick": {
                "id": "core:[']",
                "number": "6.1.2510",
                "name": "[']",
                "english": "bracket-tick",
                "list": "CORE",
                "basename": "BracketTick",
                "stackEffect": {
                    "html": {
                        "Compilation:": "( <em>\"&lt;spaces&gt;name\"</em> -- )",
                        "Run-time:": "( -- <em>xt</em> )"
                    },
                    "plain": {
                        "Compilation:": "( \"<spaces>name\" -- )",
                        "Run-time:": "( -- xt )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      ( <em>\"&lt;spaces&gt;name\"</em> -- )\n      <p>\n      Skip leading space delimiters. Parse <em>name</em> delimited by\n      a space. Find <em>name</em>. Append the run-time semantics given\n      below to the current definition.\n      </p><p>\n      An ambiguous condition exists if <em>name</em> is not found.\n      </p><p>\n        \n      </p>"
                    },
                    "Run-time:": {
                        "name": "Run-time:",
                        "html": "\n\n\n      ( -- <em>xt</em> )\n      <p>\n      Place <em>name</em>'s execution token <em>xt</em> on the stack.\n      The execution token returned by the compiled phrase\n      \"<strong>[']</strong> <code>X</code>\" is the same value returned by\n      \"<a href=\"../core/Tick.html\">'</a> <code>X</code>\" outside of compilation state.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:parsing\">3.4.1 Parsing</a></strong>,\n      <a href=\"../core/FIND.html\">6.1.1550 FIND</a>,\n      <a href=\"../rationale.html#rat:core:'\">A.6.1.0070 '</a>\n      <a href=\"../rationale.html#rat:core:POSTPONE\">A.6.1.2033 POSTPONE</a>,\n      <a href=\"../rationale.html#rat:core:[']\">A.6.1.2510 [']</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.1.2510 ['] -->\n      Typical use:\n      <a href=\"../core/Colon.html\">:</a> <code>X</code> ...\n      <strong>[']</strong> <em>name</em>\n      ... <a href=\"../core/Semi.html\">;</a>\n      <p>\n      See:\n      <a href=\"../rationale.html#rat:core:FIND\">A.6.1.1550 FIND</a>.\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.2510 ['] -->\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;GT2&nbsp;<strong>[']</strong>&nbsp;GT1&nbsp;<a href=\"../core/Semi.html\">;</a>&nbsp;<a href=\"../core/IMMEDIATE.html\">IMMEDIATE</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ GT2&nbsp;<a href=\"../core/EXECUTE.html\">EXECUTE</a> -&gt; 123 }T</span>\n      \n      \n      "
                    }
                }
            },
            "CASE": {
                "id": "core:CASE",
                "number": "6.2.0873",
                "name": "CASE",
                "english": " ",
                "list": "CORE EXT",
                "basename": "CASE",
                "stackEffect": {
                    "html": {
                        "Compilation:": "( C: -- <em>case-sys</em> )",
                        "Run-time:": "( -- )"
                    },
                    "plain": {
                        "Compilation:": "( C: -- case-sys )",
                        "Run-time:": "( -- )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      ( C: -- <em>case-sys</em> )\n      <p>\n      Mark the start of the\n      <strong>CASE</strong>...<a href=\"../core/OF.html\">OF</a>...<a href=\"../core/ENDOF.html\">ENDOF</a>...<a href=\"../core/ENDCASE.html\">ENDCASE</a>\n      structure. Append the run-time semantics given below to the\n      current definition.\n      </p><p>\n        \n      </p>"
                    },
                    "Run-time:": {
                        "name": "Run-time:",
                        "html": "\n\n\n      ( -- )\n      <p>\n      Continue execution.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/ENDCASE.html\">6.2.1342 ENDCASE</a>,\n      <a href=\"../core/ENDOF.html\">6.2.1343 ENDOF</a>,\n      <a href=\"../core/OF.html\">6.2.1950 OF</a>,\n      <a href=\"../rationale.html#rat:core:CASE\">A.6.2.0873 CASE</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.2.0873 CASE -->\n      Typical use:\n            <div class=\"quote\">\n\n        <a href=\"../core/Colon.html\">:</a> <code>X</code> ... <br>\n        &nbsp;&nbsp; <strong>CASE</strong> <br>\n        &nbsp;&nbsp;   <em>test1</em> <a href=\"../core/OF.html\">OF</a> ... <a href=\"../core/ENDOF.html\">ENDOF</a> <br>\n        &nbsp;&nbsp;   <em>testn</em> <a href=\"../core/OF.html\">OF</a> ... <a href=\"../core/ENDOF.html\">ENDOF</a> <br>\n        &nbsp;&nbsp;   ... <a href=\"../core/p.html\">(</a> default ) <br>\n        &nbsp;&nbsp; <a href=\"../core/ENDCASE.html\">ENDCASE</a> ... <br>\n        <a href=\"../core/Semi.html\">;</a>\n        \n        </div>\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n      <div class=\"tt\">\n<a href=\"../core/Colon.html\">:</a> cs1 <strong>CASE</strong> 1 <a href=\"../core/OF.html\">OF</a> 111 <a href=\"../core/ENDOF.html\">ENDOF</a> <br>\n        &nbsp;&nbsp; 2 <a href=\"../core/OF.html\">OF</a> 222 <a href=\"../core/ENDOF.html\">ENDOF</a> <br>\n        &nbsp;&nbsp; 3 <a href=\"../core/OF.html\">OF</a> 333 <a href=\"../core/ENDOF.html\">ENDOF</a> <br>\n        &nbsp;&nbsp; <a href=\"../core/toR.html\">&gt;R</a> 999 <a href=\"../core/Rfrom.html\">R&gt;</a> <br>\n        &nbsp;&nbsp; <a href=\"../core/ENDCASE.html\">ENDCASE</a> <br>\n        <a href=\"../core/Semi.html\">;</a>\n        <p>\n        <span class=\"tt\">T{ 1&nbsp;cs1 -&gt; 111 }T</span> <br>\n        <span class=\"tt\">T{ 2&nbsp;cs1 -&gt; 222 }T</span> <br>\n        <span class=\"tt\">T{ 3&nbsp;cs1 -&gt; 333 }T</span> <br>\n        <span class=\"tt\">T{ 4&nbsp;cs1 -&gt; 999 }T</span> <br>\n        <a href=\"../core/Colon.html\">:</a> cs2 <a href=\"../core/toR.html\">&gt;R</a> <strong>CASE</strong> <br>\n        &nbsp;&nbsp; -1 <a href=\"../core/OF.html\">OF</a> <strong>CASE</strong> <a href=\"../core/RFetch.html\">R@</a> 1 <a href=\"../core/OF.html\">OF</a> 100 <a href=\"../core/ENDOF.html\">ENDOF</a> <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2 <a href=\"../core/OF.html\">OF</a> 200 <a href=\"../core/ENDOF.html\">ENDOF</a> <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/toR.html\">&gt;R</a> -300 <a href=\"../core/Rfrom.html\">R&gt;</a> <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/ENDCASE.html\">ENDCASE</a> <br>\n        &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/ENDOF.html\">ENDOF</a> <br>\n        &nbsp;&nbsp; -2 <a href=\"../core/OF.html\">OF</a> <strong>CASE</strong> <a href=\"../core/RFetch.html\">R@</a> 1 <a href=\"../core/OF.html\">OF</a> -99  <a href=\"../core/ENDOF.html\">ENDOF</a> <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/toR.html\">&gt;R</a> -199 <a href=\"../core/Rfrom.html\">R&gt;</a> <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/ENDCASE.html\">ENDCASE</a> <br>\n        &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/ENDOF.html\">ENDOF</a> <br>\n        &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/toR.html\">&gt;R</a> 299 <a href=\"../core/Rfrom.html\">R&gt;</a> <br>\n        &nbsp;&nbsp; <a href=\"../core/ENDCASE.html\">ENDCASE</a> <a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/DROP.html\">DROP</a>\n        <a href=\"../core/Semi.html\">;</a>\n        </p><p>\n        <span class=\"tt\">T{ -1&nbsp;1&nbsp;cs2 -&gt; &nbsp;100 }T</span> <br>\n        <span class=\"tt\">T{ -1&nbsp;2&nbsp;cs2 -&gt; &nbsp;200 }T</span> <br>\n        <span class=\"tt\">T{ -1&nbsp;3&nbsp;cs2 -&gt; -300 }T</span> <br>\n        <span class=\"tt\">T{ -2&nbsp;1&nbsp;cs2 -&gt; &nbsp;-99 }T</span> <br>\n        <span class=\"tt\">T{ -2&nbsp;2&nbsp;cs2 -&gt; -199 }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;0&nbsp;2&nbsp;cs2 -&gt; &nbsp;299 }T</span>\n        \n        \n        </p></div>\n      "
                    }
                }
            },
            "CComma": {
                "id": "core:C,",
                "number": "6.1.0860",
                "name": "C,",
                "english": "c-comma",
                "list": "CORE",
                "basename": "CComma",
                "stackEffect": {
                    "html": {
                        " ": "( <em>char</em> -- )"
                    },
                    "plain": {
                        " ": "( char -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>char</em> -- )\n      <p>\n      Reserve space for one character in the data space and store\n      <em>char</em> in the space. If the data-space pointer is character\n      aligned when <strong>C,</strong> begins execution, it will remain character\n      aligned when <strong>C,</strong> finishes execution.\n      An ambiguous condition exists if the data-space pointer is not\n      character-aligned prior to execution of <strong>C,</strong>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:dataspace\">3.3.3 Data space</a></strong>,\n      <strong><a href=\"../usage.html#usage:aaddr\">3.3.3.1 Address alignment</a></strong>.\n      <p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0860 C, -->\n            <div class=\"tt\">\n<a href=\"../core/HERE.html\">HERE</a> 1 <strong>C,</strong> <br>\n        <a href=\"../core/HERE.html\">HERE</a> 2 <strong>C,</strong> <br>\n        <a href=\"../core/CONSTANT.html\">CONSTANT</a> 2NDC <br>\n        <a href=\"../core/CONSTANT.html\">CONSTANT</a> 1STC\n        <p>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;1STC&nbsp;2NDC&nbsp;<a href=\"../core/Uless.html\">U&lt;</a> -&gt; &lt;TRUE&gt; }T</span>\t<a href=\"../core/bs.html\">\\</a> HERE MUST GROW WITH ALLOT <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1STC&nbsp;<a href=\"../core/CHARPlus.html\">CHAR+</a> -&gt; &nbsp;2NDC&nbsp; }T</span>\t\t<a href=\"../core/bs.html\">\\</a> ... BY ONE CHAR <br>\n        <span class=\"tt\">T{ &nbsp;1STC&nbsp;1&nbsp;<a href=\"../core/CHARS.html\">CHARS</a>&nbsp;<a href=\"../core/Plus.html\">+</a> -&gt; &nbsp;2NDC&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ 1STC&nbsp;<a href=\"../core/CFetch.html\">C@</a>&nbsp;2NDC&nbsp;<a href=\"../core/CFetch.html\">C@</a> -&gt; &nbsp;&nbsp;1&nbsp;2&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;1STC&nbsp;<a href=\"../core/CStore.html\">C!</a> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ 1STC&nbsp;<a href=\"../core/CFetch.html\">C@</a>&nbsp;2NDC&nbsp;<a href=\"../core/CFetch.html\">C@</a> -&gt; &nbsp;&nbsp;3&nbsp;2&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;2NDC&nbsp;<a href=\"../core/CStore.html\">C!</a> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ 1STC&nbsp;<a href=\"../core/CFetch.html\">C@</a>&nbsp;2NDC&nbsp;<a href=\"../core/CFetch.html\">C@</a> -&gt; &nbsp;&nbsp;3&nbsp;4&nbsp; }T</span>\n        \n        \n        </p></div>\n      "
                    }
                }
            },
            "CELLPlus": {
                "id": "core:CELL+",
                "number": "6.1.0880",
                "name": "CELL+",
                "english": "cell-plus",
                "list": "CORE",
                "basename": "CELLPlus",
                "stackEffect": {
                    "html": {
                        " ": "( <em>a-addr<sub>1</sub></em> -- <em>a-addr<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( a-addr1 -- a-addr2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>a-addr<sub>1</sub></em> -- <em>a-addr<sub>2</sub></em> )\n      <p>\n      Add the size in address units of a cell to <em>a-addr<sub>1</sub></em>, giving\n      <em>a-addr<sub>2</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:aaddr\">3.3.3.1 Address alignment</a></strong>,\n      <a href=\"../rationale.html#rat:core:CELL+\">A.6.1.0880 CELL+</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.1.0880 CELL+ -->\n      As with <a href=\"../core/ALIGN.html\">ALIGN</a> and <a href=\"../core/ALIGNED.html\">ALIGNED</a>, the words <a href=\"../core/CELLS.html\">CELLS</a>\n      and <strong>CELL+</strong> were added to aid in transportability across\n      systems with different cell sizes. They are intended to be used\n      in manipulating indexes and addresses in integral numbers of\n      cell-widths. Example:\n            <div class=\"quote\">\n        <div class=\"tt\">\n<a href=\"../double/TwoVARIABLE.html\">2VARIABLE</a> DATA\n          <p>\n          0 100 DATA <a href=\"../core/TwoStore.html\">2!</a>\n          </p><p>\n          DATA <a href=\"../core/Fetch.html\">@</a> <a href=\"../core/d.html\">.</a> 100\n          </p><p>\n          DATA <strong>CELL+</strong> <a href=\"../core/Fetch.html\">@</a> <a href=\"../core/d.html\">.</a> 0\n          \n          </p></div>\n        </div>\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0880 CELL+ -->\n      See <a href=\"../testsuite.html#test:core:,\">F.6.1.0150 ,</a>.\n      \n      \n      "
                    }
                }
            },
            "CELLS": {
                "id": "core:CELLS",
                "number": "6.1.0890",
                "name": "CELLS",
                "english": " ",
                "list": "CORE",
                "basename": "CELLS",
                "stackEffect": {
                    "html": {
                        " ": "( <em>n<sub>1</sub></em> -- <em>n<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( n1 -- n2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>n<sub>1</sub></em> -- <em>n<sub>2</sub></em> )\n      <p>\n      <em>n<sub>2</sub></em> is the size in address units of <em>n<sub>1</sub></em> cells.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../rationale.html#rat:core:CELL+\">A.6.1.0880 CELL+</a>, <a href=\"../rationale.html#rat:core:CELLS\">A.6.1.0890 CELLS</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.1.0890 CELLS -->\n      Example:\n            <div class=\"quote\">\n\n        <a href=\"../core/CREATE.html\">CREATE</a> <code>NUMBERS</code>  \n        <code>100</code> <strong>CELLS</strong> <a href=\"../core/ALLOT.html\">ALLOT</a>\n        \n        </div>\n      Allots space in the array <code>NUMBERS</code> for 100 cells\n      of data.\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0890 CELLS -->\n            <div class=\"tt\">\n<a href=\"../core/Colon.html\">:</a> BITS <a href=\"../core/p.html\">(</a> X -- U ) <br>\n        &nbsp;&nbsp; 0 <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../core/BEGIN.html\">BEGIN</a> <a href=\"../core/DUP.html\">DUP</a> <a href=\"../core/WHILE.html\">WHILE</a> <br>\n        &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/DUP.html\">DUP</a> MSB <a href=\"../core/AND.html\">AND</a> <a href=\"../core/IF.html\">IF</a> <a href=\"../core/toR.html\">&gt;R</a> <a href=\"../core/OnePlus.html\">1+</a> <a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/THEN.html\">THEN</a> <a href=\"../core/TwoTimes.html\">2*</a> <br>\n        &nbsp;&nbsp; <a href=\"../core/REPEAT.html\">REPEAT</a> <a href=\"../core/DROP.html\">DROP</a>\n        <a href=\"../core/Semi.html\">;</a>\n        <p>\n        <a href=\"../core/p.html\">(</a> CELLS &gt;= 1 AU, INTEGRAL MULTIPLE OF CHAR SIZE, &gt;= 16 BITS ) <br>\n        <span class=\"tt\">T{ 1&nbsp;<strong>CELLS</strong>&nbsp;1&nbsp;<a href=\"../core/less.html\">&lt;</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -&gt; &lt;FALSE&gt; }T</span> <br>\n        <span class=\"tt\">T{ 1&nbsp;<strong>CELLS</strong>&nbsp;1&nbsp;<a href=\"../core/CHARS.html\">CHARS</a>&nbsp;<a href=\"../core/MOD.html\">MOD</a> -&gt; &nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ 1S&nbsp;BITS&nbsp;10&nbsp;<a href=\"../core/less.html\">&lt;</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -&gt; &lt;FALSE&gt; }T</span>\n        \n        \n        </p></div>\n      "
                    }
                }
            },
            "CFetch": {
                "id": "core:C@",
                "number": "6.1.0870",
                "name": "C@",
                "english": "c-fetch",
                "list": "CORE",
                "basename": "CFetch",
                "stackEffect": {
                    "html": {
                        " ": "( <em>c-addr</em> -- <em>char</em> )"
                    },
                    "plain": {
                        " ": "( c-addr -- char )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>c-addr</em> -- <em>char</em> )\n      <p>\n      Fetch the character stored at <em>c-addr</em>. When the cell size is\n      greater than character size, the unused high-order bits are all\n      zeroes.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:aaddr\">3.3.3.1 Address alignment</a></strong>.\n      <p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.2.0870 C@ -->\n      See <a href=\"../testsuite.html#test:core:C,\">F.6.1.0860 C,</a>.\n      \n      \n      "
                    }
                }
            },
            "CHAR": {
                "id": "core:CHAR",
                "number": "6.1.0895",
                "name": "CHAR",
                "english": "char",
                "list": "CORE",
                "basename": "CHAR",
                "stackEffect": {
                    "html": {
                        " ": "( <em>\"&lt;spaces&gt;name\"</em> -- <em>char</em> )"
                    },
                    "plain": {
                        " ": "( \"<spaces>name\" -- char )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>\"&lt;spaces&gt;name\"</em> -- <em>char</em> )\n      <p>\n      Skip leading space delimiters. Parse <em>name</em> delimited by\n      a space. Put the value of its first character onto the stack.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:parsing\">3.4.1 Parsing</a></strong>,\n      <a href=\"../core/BracketCHAR.html\">6.1.2520 [CHAR]</a>,\n      <a href=\"../rationale.html#rat:core:CHAR\">A.6.1.0895 CHAR</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.1.0895 CHAR -->\n      Typical use: ...\n      <strong>CHAR</strong> <code>A</code> <a href=\"../core/CONSTANT.html\">CONSTANT</a> <code>\"A\"</code> ...\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0895 CHAR -->\n      <span class=\"tt\">T{ <strong>CHAR</strong>&nbsp;X&nbsp;&nbsp;&nbsp;&nbsp; -&gt; 58 }T</span> <br>\n      <span class=\"tt\">T{ <strong>CHAR</strong>&nbsp;HELLO -&gt; 48 }T</span>\n      \n      \n      "
                    }
                }
            },
            "CHARPlus": {
                "id": "core:CHAR+",
                "number": "6.1.0897",
                "name": "CHAR+",
                "english": "char-plus",
                "list": "CORE",
                "basename": "CHARPlus",
                "stackEffect": {
                    "html": {
                        " ": "( <em>c-addr<sub>1</sub></em> -- <em>c-addr<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( c-addr1 -- c-addr2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>c-addr<sub>1</sub></em> -- <em>c-addr<sub>2</sub></em> )\n      <p>\n      Add the size in address units of a character to\n      <em>c-addr<sub>1</sub></em>, giving <em>c-addr<sub>2</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:aaddr\">3.3.3.1 Address alignment</a></strong>.\n      <p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0897 CHAR+ -->\n      See <a href=\"../testsuite.html#test:core:C,\">F.6.1.0860 C,</a>.\n      \n      \n      "
                    }
                }
            },
            "CHARS": {
                "id": "core:CHARS",
                "number": "6.1.0898",
                "name": "CHARS",
                "english": "chars",
                "list": "CORE",
                "basename": "CHARS",
                "stackEffect": {
                    "html": {
                        " ": "( <em>n<sub>1</sub></em> -- <em>n<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( n1 -- n2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>n<sub>1</sub></em> -- <em>n<sub>2</sub></em> )\n      <p>\n      <em>n<sub>2</sub></em> is the size in address units of <em>n<sub>1</sub></em>\n      characters.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0898 CHARS -->\n            <div class=\"tt\">\n<a href=\"../core/p.html\">(</a> CHARACTERS &gt;= 1 AU, &lt;= SIZE OF CELL, &gt;= 8 BITS ) <br>\n        <span class=\"tt\">T{ 1&nbsp;<strong>CHARS</strong>&nbsp;1&nbsp;<a href=\"../core/less.html\">&lt;</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -&gt; &lt;FALSE&gt; }T</span> <br>\n        <span class=\"tt\">T{ 1&nbsp;<strong>CHARS</strong>&nbsp;1&nbsp;<a href=\"../core/CELLS.html\">CELLS</a>&nbsp;<a href=\"../core/more.html\">&gt;</a> -&gt; &lt;FALSE&gt; }T</span> <br>\n        <a href=\"../core/p.html\">(</a> TBD: HOW TO FIND NUMBER OF BITS? )\n        \n        \n        </div>\n      "
                    }
                }
            },
            "COMPILEComma": {
                "id": "core:COMPILE,",
                "number": "6.2.0945",
                "name": "COMPILE,",
                "english": "compile-comma",
                "list": "CORE EXT",
                "basename": "COMPILEComma",
                "stackEffect": {
                    "html": {
                        "Execution:": "( <em>xt</em> -- )"
                    },
                    "plain": {
                        "Execution:": "( xt -- )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Execution:": {
                        "name": "Execution:",
                        "html": "\n\n\n      ( <em>xt</em> -- )\n      <p>\n      Append the execution semantics of the definition represented\n      by <em>xt</em> to the execution semantics of the current\n      definition.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../rationale.html#rat:core:COMPILE,\">A.6.2.0945 COMPILE,</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.2.0945 COMPILE, -->\n      <strong>COMPILE,</strong> is the compilation equivalent of <a href=\"../core/EXECUTE.html\">EXECUTE</a>.\n      <p>\n      In traditional threaded-code implementations, compilation is\n      performed by <a href=\"../core/Comma.html\">,</a> (comma). This usage is not portable; it\n      doesn't work for subroutine-threaded, native code, or\n      relocatable implementations. Use of <strong>COMPILE,</strong> is portable.\n      </p><p>\n      In most systems it is possible to implement <strong>COMPILE,</strong> so\n      it will generate code that is optimized to the same extent as\n      code that is generated by the normal compilation process.\n      However, in some implementations there are two different\n      \"tokens\" corresponding to a particular definition name:\n      the normal \"execution token\" that is used while interpreting\n      or with <a href=\"../core/EXECUTE.html\">EXECUTE</a>, and another \"compilation token\" that\n      is used while compiling. It is not always possible to obtain\n      the compilation token from the execution token. In these\n      implementations, <strong>COMPILE,</strong> might not generate code that\n      is as efficient as normally compiled code.\n      </p><p>\n      The intention is that <strong>COMPILE,</strong> can be used as follows to write\n      the classic interpreter/compiler loop:\n      </p><p>\n            </p><div class=\"quote\">\n        <div class=\"tt\">\n... \t\t\t\t\t\t\t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/p.html\">(</a> c-addr ) <br>\n          <a href=\"../core/FIND.html\">FIND</a> <a href=\"../core/qDUP.html\">?DUP</a> <a href=\"../core/IF.html\">IF</a>\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t<a href=\"../core/p.html\">(</a> xt +-1 ) <br>\n          &nbsp;&nbsp; <a href=\"../core/STATE.html\">STATE</a> <a href=\"../core/Fetch.html\">@</a> <a href=\"../core/IF.html\">IF</a>\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t<a href=\"../core/p.html\">(</a> xt +-1 ) <br>\n          &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/Zeromore.html\">0&gt;</a> <a href=\"../core/IF.html\">IF</a>  \n          <a href=\"../core/EXECUTE.html\">EXECUTE</a>  \n          <a href=\"../core/ELSE.html\">ELSE</a>  \n          <strong>COMPILE,</strong>  \n          <a href=\"../core/THEN.html\">THEN</a>\t\t\t\t\t\t\t\t&nbsp;\t<a href=\"../core/p.html\">(</a> ??? ) <br>\n          &nbsp;&nbsp; <a href=\"../core/ELSE.html\">ELSE</a>\t\t\t\t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t<a href=\"../core/p.html\">(</a> xt +-1 ) <br>\n          &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/DROP.html\">DROP</a> <a href=\"../core/EXECUTE.html\">EXECUTE</a> \t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t<a href=\"../core/p.html\">(</a> ??? ) <br>\n          &nbsp;&nbsp; <a href=\"../core/THEN.html\">THEN</a> <br>\n          <a href=\"../core/ELSE.html\">ELSE</a> \t\t\t\t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t<a href=\"../core/p.html\">(</a> c-addr ) <br>\n          &nbsp;&nbsp; <a href=\"../core/p.html\">(</a> <span class=\"rm\">whatever you do for an undefined word</span> ) <br>\n          <a href=\"../core/THEN.html\">THEN</a> <br>\n          ...\n          \n          </div>\n        </div>\n      <p>\n      Thus the interpretation semantics are left undefined, as <strong>COMPILE,</strong>\n      will not be executed during interpretation.\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n      <div class=\"tt\">\n<a href=\"../core/ColonNONAME.html\">:NONAME</a> <a href=\"../core/DUP.html\">DUP</a> <a href=\"../core/Plus.html\">+</a> <a href=\"../core/Semi.html\">;</a> <a href=\"../core/CONSTANT.html\">CONSTANT</a> dup+ <br>\n        <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;q&nbsp;dup+&nbsp;<strong>COMPILE,</strong>&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span> <br>\n        <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;as&nbsp;<a href=\"../core/Bracket.html\">[</a>&nbsp;q&nbsp;<a href=\"../right-bracket.html\">]</a>&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span> <br>\n        <span class=\"tt\">T{ 123&nbsp;as -&gt; 246 }T</span>\n        \n        \n        </div>\n      "
                    }
                }
            },
            "CONSTANT": {
                "id": "core:CONSTANT",
                "number": "6.1.0950",
                "name": "CONSTANT",
                "english": " ",
                "list": "CORE",
                "basename": "CONSTANT",
                "stackEffect": {
                    "html": {
                        " ": "( <em>x \"&lt;spaces&gt;name\"</em> -- )",
                        "name Execution:": "( -- <em>x</em> )"
                    },
                    "plain": {
                        " ": "( x \"<spaces>name\" -- )",
                        "name Execution:": "( -- x )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>x \"&lt;spaces&gt;name\"</em> -- )\n      <p>\n      Skip leading space delimiters. Parse <em>name</em> delimited by\n      a space. Create a definition for <em>name</em> with the execution\n      semantics defined below.\n      </p><p>\n      <em>name</em> is referred to as a \"constant\".\n      </p><p>\n        \n      </p>"
                    },
                    "name Execution:": {
                        "name": "name Execution:",
                        "html": "\n\n\n      ( -- <em>x</em> )\n      <p>\n      Place <em>x</em> on the stack.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:parsing\">3.4.1 Parsing</a></strong>,\n      <a href=\"../rationale.html#rat:core:CONSTANT\">A.6.1.0950 CONSTANT</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.1.0950 CONSTANT -->\n      Typical use: ...\n      <a href=\"../core/DECIMAL.html\">DECIMAL</a> <code>10</code> <strong>CONSTANT</strong> <code>TEN</code>\n      ...\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0950 CONSTANT -->\n      <span class=\"tt\">T{ 123&nbsp;<strong>CONSTANT</strong>&nbsp;X123 -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ X123 -&gt; 123 }T</span>\n      <p>\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;EQU&nbsp;<strong>CONSTANT</strong>&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ X123&nbsp;EQU&nbsp;Y123 -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ Y123 -&gt; 123 }T</span>\n      \n      \n      </p>"
                    }
                }
            },
            "COUNT": {
                "id": "core:COUNT",
                "number": "6.1.0980",
                "name": "COUNT",
                "english": " ",
                "list": "CORE",
                "basename": "COUNT",
                "stackEffect": {
                    "html": {
                        " ": "( <em>c-addr<sub>1</sub></em> -- <em>c-addr<sub>2</sub> u</em> )"
                    },
                    "plain": {
                        " ": "( c-addr1 -- c-addr2 u )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>c-addr<sub>1</sub></em> -- <em>c-addr<sub>2</sub> u</em> )\n      <p>\n      Return the character string specification for the counted\n      string stored at <em>c-addr<sub>1</sub></em>. <em>c-addr<sub>2</sub></em> is the\n      address of the first character after <em>c-addr<sub>1</sub></em>. <em>u</em>\n      is the contents of the character at <em>c-addr<sub>1</sub></em>, which is\n      the length in characters of the string at <em>c-addr<sub>2</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0980 COUNT -->\n      <span class=\"tt\">T{ GT1STRING&nbsp;<strong>COUNT</strong> -&gt; GT1STRING&nbsp;<a href=\"../core/CHARPlus.html\">CHAR+</a>&nbsp;3 }T</span>\n      \n      \n      "
                    }
                }
            },
            "CR": {
                "id": "core:CR",
                "number": "6.1.0990",
                "name": "CR",
                "english": "c-r",
                "list": "CORE",
                "basename": "CR",
                "stackEffect": {
                    "html": {
                        " ": "( -- )"
                    },
                    "plain": {
                        " ": "( -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- )\n      <p>\n      Cause subsequent output to appear at the beginning of the next\n      line.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0990 CR -->\n      See <a href=\"../testsuite.html#test:core:EMIT\">F.6.1.1320 EMIT</a>.\n      \n      \n      "
                    }
                }
            },
            "CREATE": {
                "id": "core:CREATE",
                "number": "6.1.1000",
                "name": "CREATE",
                "english": " ",
                "list": "CORE",
                "basename": "CREATE",
                "stackEffect": {
                    "html": {
                        " ": "( <em>\"&lt;spaces&gt;name\"</em> -- )",
                        "name Execution:": "( -- <em>a-addr</em> )"
                    },
                    "plain": {
                        " ": "( \"<spaces>name\" -- )",
                        "name Execution:": "( -- a-addr )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>\"&lt;spaces&gt;name\"</em> -- )\n      <p>\n      Skip leading space delimiters. Parse <em>name</em> delimited by a\n      space. Create a definition for <em>name</em> with the execution\n      semantics defined below. If the data-space pointer is not\n      aligned, reserve enough data space to align it. The new\n      data-space pointer defines <em>name</em>'s data field.\n      <strong>CREATE</strong> does not allocate data space in <em>name</em>'s\n      data field.\n      </p><p>\n        \n      </p>"
                    },
                    "name Execution:": {
                        "name": "name Execution:",
                        "html": "\n\n\n      ( -- <em>a-addr</em> )\n      <p>\n      <em>a-addr</em> is the address of <em>name</em>'s data field.\n      The execution semantics of <em>name</em> may be extended by\n      using <a href=\"../core/DOES.html\">DOES&gt;</a>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:dataspace\">3.3.3 Data space</a></strong>,\n      <a href=\"../core/DOES.html\">6.1.1250 DOES&gt;</a>,\n      <a href=\"../rationale.html#rat:core:CREATE\">A.6.1.1000 CREATE</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.1.1000 CREATE -->\n      The data-field address of a word defined by <strong>CREATE</strong> is\n      given by the data-space pointer immediately following the\n      execution of <strong>CREATE</strong>.\n      <p>\n      Reservation of data field space is typically done with\n      <a href=\"../core/ALLOT.html\">ALLOT</a>.\n      </p><p>\n      Typical use: ...\n      <strong>CREATE</strong> <code>SOMETHING</code> ...\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.1000 CREATE -->\n      See <a href=\"../testsuite.html#test:core:toBODY\">F.6.1.0550 &gt;BODY</a> and\n      <a href=\"../testsuite.html#test:core:DOES\">F.6.1.1250 DOES&gt;</a>.\n      \n      \n      "
                    }
                }
            },
            "CStore": {
                "id": "core:C!",
                "number": "6.1.0850",
                "name": "C!",
                "english": "c-store",
                "list": "CORE",
                "basename": "CStore",
                "stackEffect": {
                    "html": {
                        " ": "( <em>char c-addr</em> -- )"
                    },
                    "plain": {
                        " ": "( char c-addr -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>char c-addr</em> -- )\n      <p>\n      Store <em>char</em> at <em>c-addr</em>. When character size is smaller\n      than cell size, only the number of low-order bits corresponding to\n      character size are transferred.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:aaddr\">3.3.3.1 Address alignment</a></strong>.\n      <p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0850 C! -->\n      See <a href=\"../testsuite.html#test:core:C,\">F.6.1.0860 C,</a>.\n      \n      \n      "
                    }
                }
            },
            "Colon": {
                "id": "core::",
                "number": "6.1.0450",
                "name": ":",
                "english": "colon",
                "list": "CORE",
                "basename": "Colon",
                "stackEffect": {
                    "html": {
                        " ": "( C: <em>\"&lt;spaces&gt;name\"</em> -- <em>colon-sys</em> )",
                        "name Execution:": "( <em>i * x</em> -- <em>j * x</em> )"
                    },
                    "plain": {
                        " ": "( C: \"<spaces>name\" -- colon-sys )",
                        "name Execution:": "( i * x -- j * x )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( C: <em>\"&lt;spaces&gt;name\"</em> -- <em>colon-sys</em> )\n      <p>\n      Skip leading space delimiters. Parse <em>name</em> delimited by a\n      space. Create a definition for <em>name</em>, called a \"colon\n      definition\". Enter compilation state and start the current\n      definition, producing <em>colon-sys</em>. Append the initiation\n      semantics given below to the current definition.\n      </p><p>\n      The execution semantics of <em>name</em> will be determined by the\n      words compiled into the body of the definition. The current\n      definition shall not be findable in the dictionary until it is\n      ended (or until the execution of <a href=\"../core/DOES.html\">DOES&gt;</a> in some systems).\n      </p><p>\n        \n      </p>"
                    },
                    "Initiation:": {
                        "name": "Initiation:",
                        "html": "\n\n ( <em>i * x</em> -- <em>i * x</em> )\n      ( R: -- <em>nest-sys</em> )\n      <p>\n      Save implementation-dependent information <em>nest-sys</em>\n      about the calling definition. The stack effects <em>i * x</em>\n      represent arguments to <em>name</em>.\n      </p><p>\n        \n      </p>"
                    },
                    "name Execution:": {
                        "name": "name Execution:",
                        "html": "\n\n\n      ( <em>i * x</em> -- <em>j * x</em> )\n      <p>\n      Execute the definition <em>name</em>. The stack effects\n      <em>i * x</em> and <em>j * x</em> represent arguments to and\n      results from <em>name</em>, respectively.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:interpret\">3.4.3.2 Interpretation semantics</a></strong>,\n      <strong><a href=\"../usage.html#usage:parsing\">3.4.1 Parsing</a></strong>,\n      <strong><a href=\"../usage.html#usage:compilation\">3.4.5 Compilation</a></strong>,\n      <a href=\"../core/DOES.html\">6.1.1250 DOES&gt;</a>,\n      <a href=\"../core/Bracket.html\">6.1.2500 [</a>,\n      <a href=\"../right-bracket.html\">6.1.2540 ]</a>,\n      <a href=\"../tools/SemiCODE.html\">15.6.2.0470 ;CODE</a>,\n      <a href=\"../rationale.html#rat:core::\">A.6.1.0450 :</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.1.0450 : -->\n      Typical use:\n      <strong>:</strong> <em>name</em> ... <a href=\"../core/Semi.html\">;</a>\n      <p>\n      In Forth 83, this word was specified to alter the search order.\n      This specification is explicitly removed in this standard. We\n      believe that in most cases this has no effect; however, systems\n      that allow many search orders found the Forth-83 behavior of\n      colon very undesirable.\n      </p><p>\n      Note that colon does not itself invoke the compiler. Colon sets\n      compilation state so that later words in the parse area are\n      compiled.\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0450 : -->\n      <span class=\"tt\">T{ <strong>:</strong>&nbsp;NOP&nbsp;<strong>:</strong>&nbsp;<a href=\"../core/POSTPONE.html\">POSTPONE</a>&nbsp;<a href=\"../core/Semi.html\">;</a>&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ NOP&nbsp;NOP1&nbsp;NOP&nbsp;NOP2 -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ NOP1 -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ NOP2 -&gt;  }T</span>\n      <p>\n      The following tests the dictionary search order:\n      </p><p>\n      <span class=\"tt\">T{ <strong>:</strong>&nbsp;GDX&nbsp;&nbsp;&nbsp;123&nbsp;<a href=\"../core/Semi.html\">;</a>&nbsp;&nbsp;&nbsp;&nbsp;<strong>:</strong>&nbsp;GDX&nbsp;&nbsp;&nbsp;GDX&nbsp;234&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ GDX -&gt; 123&nbsp;234 }T</span>\n      \n      \n      </p>"
                    }
                }
            },
            "ColonNONAME": {
                "id": "core::NONAME",
                "number": "6.2.0455",
                "name": ":NONAME",
                "english": "colon-no-name",
                "list": "CORE EXT",
                "basename": "ColonNONAME",
                "stackEffect": {
                    "html": {
                        " ": "( C: -- <em>colon-sys</em> )\n      ( S: -- <em>xt</em> )",
                        "xt Execution:": "( <em>i * x</em> -- <em>j * x</em> )"
                    },
                    "plain": {
                        " ": "( C: -- colon-sys )\n( S: -- xt )",
                        "xt Execution:": "( i * x -- j * x )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( C: -- <em>colon-sys</em> )\n      ( S: -- <em>xt</em> )\n      <p>\n      Create an execution token <em>xt</em>, enter compilation state\n      and start the current definition, producing <em>colon-sys</em>.\n      Append the initiation semantics given below to the current\n      definition.\n      </p><p>\n      The execution semantics of <em>xt</em> will be determined by the\n      words compiled into the body of the definition. This definition\n      can be executed later by using <em>xt</em> <a href=\"../core/EXECUTE.html\">EXECUTE</a>.\n      </p><p>\n      If the control-flow stack is implemented using the data stack,\n      <em>colon-sys</em> shall be the topmost item on the data stack.\n      See <strong><a href=\"../usage.html#usage:controlstack\">3.2.3.2 Control-flow stack</a></strong>.\n      </p><p>\n        \n      </p>"
                    },
                    "Initiation:": {
                        "name": "Initiation:",
                        "html": "\n\n\n      ( <em>i * x</em> -- <em>i * x</em> )\n      ( R: -- <em>nest-sys</em> )\n      <p>\n      Save implementation-dependent information <em>nest-sys</em>\n      about the calling definition. The stack effects <em>i * x</em>\n      represent arguments to <em>xt</em>.\n      </p><p>\n        \n      </p>"
                    },
                    "xt Execution:": {
                        "name": "xt Execution:",
                        "html": "\n\n\n      ( <em>i * x</em> -- <em>j * x</em> )\n      <p>\n      Execute the definition specified by <em>xt</em>. The stack\n      effects <em>i * x</em> and <em>j * x</em> represent arguments to\n      and results from <em>xt</em>, respectively.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../rationale.html#rat:core::NONAME\">A.6.2.0455 :NONAME</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.2.0455 :NONAME -->\n      Typical use:\n      <p>\n      &nbsp;&nbsp; <a href=\"../core/DEFER.html\">DEFER</a> <code>print</code> <br>\n      \n      &nbsp;&nbsp; <strong>:NONAME</strong> <a href=\"../core/p.html\">(</a> n -- ) <a href=\"../core/d.html\">.</a> <a href=\"../core/Semi.html\">;</a> <a href=\"../core/IS.html\">IS</a> <code>print</code>\n      </p><p>\n        \n      </p>"
                    },
                    "Note:": {
                        "name": "Note:",
                        "html": "\n\n <a href=\"../core/RECURSE.html\">RECURSE</a> and <a href=\"../core/DOES.html\">DOES&gt;</a> are allowed within a <strong>:NONAME</strong> definition.\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      <a href=\"../core/VARIABLE.html\">VARIABLE</a> nn1 <br>\n      <a href=\"../core/VARIABLE.html\">VARIABLE</a> nn2 <br>\n      <span class=\"tt\">T{ <strong>:NONAME</strong>&nbsp;1234&nbsp;<a href=\"../core/Semi.html\">;</a>&nbsp;nn1&nbsp;<a href=\"../core/Store.html\">!</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ <strong>:NONAME</strong>&nbsp;9876&nbsp;<a href=\"../core/Semi.html\">;</a>&nbsp;nn2&nbsp;<a href=\"../core/Store.html\">!</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ nn1&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<a href=\"../core/EXECUTE.html\">EXECUTE</a> -&gt; 1234 }T</span> <br>\n      <span class=\"tt\">T{ nn2&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<a href=\"../core/EXECUTE.html\">EXECUTE</a> -&gt; 9876 }T</span>\n      \n      \n      "
                    }
                }
            },
            "Comma": {
                "id": "core:,",
                "number": "6.1.0150",
                "name": ",",
                "english": "comma",
                "list": "CORE",
                "basename": "Comma",
                "stackEffect": {
                    "html": {
                        " ": "( <em>x</em> -- )"
                    },
                    "plain": {
                        " ": "( x -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>x</em> -- )\n      <p>\n      Reserve one cell of data space and store <em>x</em> in the cell.\n      If the data-space pointer is aligned when <strong>,</strong> begins\n      execution, it will remain aligned when <strong>,</strong> finishes\n      execution. An ambiguous condition exists if the data-space\n      pointer is not aligned prior to execution of <strong>,</strong>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:dataspace\">3.3.3 Data space</a></strong>,\n      <strong><a href=\"../usage.html#usage:aaddr\">3.3.3.1 Address alignment</a></strong>,\n      <a href=\"../rationale.html#rat:core:,\">A.6.1.0150 ,</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.1.0150 , -->\n      The use of <strong>,</strong> (comma) for compiling execution tokens is\n      not portable.\n      <p>\n      See: <a href=\"../core/COMPILEComma.html\">6.2.0945 COMPILE,</a>.\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0150 , -->\n            <div class=\"tt\">\n<a href=\"../core/HERE.html\">HERE</a> 1 <strong>,</strong> <br>\n        <a href=\"../core/HERE.html\">HERE</a> 2 <strong>,</strong> <br>\n        <a href=\"../core/CONSTANT.html\">CONSTANT</a> 2ND <br>\n        <a href=\"../core/CONSTANT.html\">CONSTANT</a> 1ST\n        <p>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1ST&nbsp;2ND&nbsp;<a href=\"../core/Uless.html\">U&lt;</a> -&gt; &lt;TRUE&gt; }T</span> <a href=\"../core/bs.html\">\\</a> HERE MUST GROW WITH ALLOT <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1ST&nbsp;<a href=\"../core/CELLPlus.html\">CELL+</a>&nbsp; -&gt; 2ND }T</span>    <a href=\"../core/bs.html\">\\</a> ... BY ONE CELL <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;1ST&nbsp;1&nbsp;<a href=\"../core/CELLS.html\">CELLS</a>&nbsp;<a href=\"../core/Plus.html\">+</a>&nbsp; -&gt; 2ND }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;1ST&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;2ND&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp; -&gt; 1&nbsp;2 }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;1ST&nbsp;<a href=\"../core/Store.html\">!</a>&nbsp; -&gt; &nbsp;&nbsp;&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;1ST&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;2ND&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp; -&gt; 5&nbsp;2 }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6&nbsp;2ND&nbsp;<a href=\"../core/Store.html\">!</a>&nbsp; -&gt; &nbsp;&nbsp;&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;1ST&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;2ND&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp; -&gt; 5&nbsp;6 }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1ST&nbsp;<a href=\"../core/TwoFetch.html\">2@</a> -&gt; 6&nbsp;5 }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;1&nbsp;1ST&nbsp;<a href=\"../core/TwoStore.html\">2!</a> -&gt; &nbsp;&nbsp;&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1ST&nbsp;<a href=\"../core/TwoFetch.html\">2@</a> -&gt; 2&nbsp;1 }T</span> <br>\n        <span class=\"tt\">T{ 1S&nbsp;1ST&nbsp;<a href=\"../core/Store.html\">!</a>&nbsp;&nbsp;1ST&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp; -&gt; 1S&nbsp; }T</span> &nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> CAN STORE CELL-WIDE VALUE\n        \n        \n        </p></div>\n      "
                    }
                }
            },
            "Cq": {
                "id": "core:Cq",
                "number": "6.2.0855",
                "name": "C\"",
                "english": "c-quote",
                "list": "CORE EXT",
                "basename": "Cq",
                "stackEffect": {
                    "html": {
                        "Compilation:": "( <em>\"ccc&lt;quote&gt;\"</em> -- )",
                        "Run-time:": "( -- <em>c-addr</em> )"
                    },
                    "plain": {
                        "Compilation:": "( \"ccc<quote>\" -- )",
                        "Run-time:": "( -- c-addr )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      ( <em>\"ccc&lt;quote&gt;\"</em> -- )\n      <p>\n      Parse <em>ccc</em> delimited by <code>\"</code> (double-quote) and\n      append the run-time semantics given below to the current\n      definition.\n      </p><p>\n        \n      </p>"
                    },
                    "Run-time:": {
                        "name": "Run-time:",
                        "html": "\n\n\n      ( -- <em>c-addr</em> )\n      <p>\n      Return <em>c-addr</em>, a counted string consisting of the\n      characters <em>ccc</em>. A program shall not alter the returned\n      string.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:parsing\">3.4.1 Parsing</a></strong>,\n      <a href=\"../core/Sq.html\">6.1.2165 S\"</a>,\n      <a href=\"../file/Sq.html\">11.6.1.2165 S\"</a>,\n      <a href=\"../rationale.html#rat:core:Cq\">A.6.2.0855 C\"</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.2.0855 C\" -->\n      Typical use:\n      <a href=\"../core/Colon.html\">:</a> <code>X</code> ...\n      <strong>C\"</strong> <em>ccc</em><code>\"</code>\n      ... <a href=\"../core/Semi.html\">;</a>\n      <p>\n      See: <strong><a href=\"../rationale.html#rat:cstring\">A.3.1.3.4 Counted strings</a></strong>.\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;cq1&nbsp;<strong>C\"</strong>&nbsp;123<code>\"</code>&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;cq2&nbsp;<strong>C\"</strong>&nbsp;<code>\"</code>&nbsp;<a href=\"../core/Semi.html\">;</a>&nbsp;&nbsp;&nbsp; -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ cq1&nbsp;<a href=\"../core/COUNT.html\">COUNT</a>&nbsp;<a href=\"../core/EVALUATE.html\">EVALUATE</a> -&gt; 123 }T</span> <br>\n      <span class=\"tt\">T{ cq2&nbsp;<a href=\"../core/COUNT.html\">COUNT</a>&nbsp;<a href=\"../core/EVALUATE.html\">EVALUATE</a> -&gt; &nbsp;&nbsp;&nbsp; }T</span>\n      \n      \n      "
                    }
                }
            },
            "DECIMAL": {
                "id": "core:DECIMAL",
                "number": "6.1.1170",
                "name": "DECIMAL",
                "english": " ",
                "list": "CORE",
                "basename": "DECIMAL",
                "stackEffect": {
                    "html": {
                        " ": "( -- )"
                    },
                    "plain": {
                        " ": "( -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- )\n      <p>\n      Set the numeric conversion radix to ten (decimal).\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.1170 DECIMAL -->\n      See <a href=\"../testsuite.html#test:core:BASE\">F.6.1.0750 BASE</a>.\n      \n      \n      "
                    }
                }
            },
            "DEFER": {
                "id": "core:DEFER",
                "number": "6.2.1173",
                "name": "DEFER",
                "english": " ",
                "list": "CORE EXT",
                "basename": "DEFER",
                "stackEffect": {
                    "html": {
                        " ": "( <em>\"&lt;spaces&gt;name\"</em> -- )",
                        "name Execution:": "( <em>i * x</em> -- <em>j * x</em> )"
                    },
                    "plain": {
                        " ": "( \"<spaces>name\" -- )",
                        "name Execution:": "( i * x -- j * x )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>\"&lt;spaces&gt;name\"</em> -- )\n      <p>\n      Skip leading space delimiters.  Parse <em>name</em> delimited by a\n      space.  Create a definition for <em>name</em> with the execution\n      semantics defined below.\n      </p><p>\n        \n      </p>"
                    },
                    "name Execution:": {
                        "name": "name Execution:",
                        "html": "\n\n\n      ( <em>i * x</em> -- <em>j * x</em> )\n      <p>\n      Execute the <em>xt</em> that <em>name</em> is set to execute.\n      An ambiguous condition exists if <em>name</em> has not been\n      set to execute an <em>xt</em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/ACTION-OF.html\">6.2.0698 ACTION-OF</a>,\n      <a href=\"../core/DEFERStore.html\">6.2.1175 DEFER!</a>,\n      <a href=\"../core/DEFERFetch.html\">6.2.1177 DEFER@</a>,\n      <a href=\"../core/IS.html\">6.2.1725 IS</a>.\n      <p>\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n <!-- I.6.2.---- DEFER -->\n      <a href=\"../core/Colon.html\">:</a> <strong>DEFER</strong> <a href=\"../core/p.html\">(</a> \"name\" -- ) <br>\n      &nbsp;&nbsp; <a href=\"../core/CREATE.html\">CREATE</a> <a href=\"../core/BracketTick.html\">[']</a> <a href=\"../core/ABORT.html\">ABORT</a> <a href=\"../core/Comma.html\">,</a> <br>\n      <a href=\"../core/DOES.html\">DOES&gt;</a> <a href=\"../core/p.html\">(</a> ... -- ... ) <br>\n      &nbsp;&nbsp; <a href=\"../core/Fetch.html\">@</a> <a href=\"../core/EXECUTE.html\">EXECUTE</a> <a href=\"../core/Semi.html\">;</a>\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T 6.2.---- DEFER -->\n      <span class=\"tt\">T{ <strong>DEFER</strong>&nbsp;defer2 -&gt; &nbsp; }T</span> <br>\n      <span class=\"tt\">T{ <a href=\"../core/Tick.html\">'</a>&nbsp;<a href=\"../core/Times.html\">*</a>&nbsp;<a href=\"../core/Tick.html\">'</a>&nbsp;defer2&nbsp;<a href=\"../core/DEFERStore.html\">DEFER!</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;2&nbsp;3&nbsp;defer2 -&gt; 6 }T</span>\n      <p>\n      <span class=\"tt\">T{ <a href=\"../core/Tick.html\">'</a>&nbsp;<a href=\"../core/Plus.html\">+</a>&nbsp;<a href=\"../core/IS.html\">IS</a>&nbsp;defer2 -&gt; &nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;1&nbsp;2&nbsp;defer2 -&gt; 3 }T</span>\n      \n      \n      </p>"
                    }
                }
            },
            "DEFERFetch": {
                "id": "core:DEFER@",
                "number": "6.2.1177",
                "name": "DEFER@",
                "english": "defer-fetch",
                "list": "CORE EXT",
                "basename": "DEFERFetch",
                "stackEffect": {
                    "html": {
                        " ": "( <em>xt<sub>1</sub></em> -- <em>xt<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( xt1 -- xt2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>xt<sub>1</sub></em> -- <em>xt<sub>2</sub></em> )\n      <p>\n      <em>xt<sub>2</sub></em> is the execution token <em>xt<sub>1</sub></em> is set to execute.\n      An ambiguous condition exists if <em>xt<sub>1</sub></em> is not\n      the execution token of a word defined by <a href=\"../core/DEFER.html\">DEFER</a>,\n      or if <em>xt<sub>1</sub></em> has not been set to execute an xt. \n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/ACTION-OF.html\">6.2.0698 ACTION-OF</a>,\n      <a href=\"../core/DEFER.html\">6.2.1173 DEFER</a>,\n      <a href=\"../core/DEFERStore.html\">6.2.1175 DEFER!</a>,\n      <a href=\"../core/IS.html\">6.2.1725 IS</a>.\n      <p>\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n <!-- I.6.2.---- DEFER@ -->\n      <a href=\"../core/Colon.html\">:</a> <strong>DEFER@</strong> <a href=\"../core/p.html\">(</a> xt1 -- xt2 ) <br>\n      &nbsp;&nbsp; <a href=\"../core/toBODY.html\">&gt;BODY</a> <a href=\"../core/Fetch.html\">@</a> <a href=\"../core/Semi.html\">;</a>\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.2.---- DEFER@ -->\n      <span class=\"tt\">T{ <a href=\"../core/DEFER.html\">DEFER</a>&nbsp;defer4 -&gt;  }T</span>\n      <p>\n      <span class=\"tt\">T{ <a href=\"../core/Tick.html\">'</a>&nbsp;<a href=\"../core/Times.html\">*</a>&nbsp;<a href=\"../core/Tick.html\">'</a>&nbsp;defer4&nbsp;<a href=\"../core/DEFERStore.html\">DEFER!</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ 2&nbsp;3&nbsp;defer4 -&gt; 6 }T</span> <br>\n      <span class=\"tt\">T{ <a href=\"../core/Tick.html\">'</a>&nbsp;defer4&nbsp;<strong>DEFER@</strong> -&gt; <a href=\"../core/Tick.html\">'</a>&nbsp;<a href=\"../core/Times.html\">*</a> }T</span>\n      </p><p>\n      <span class=\"tt\">T{ <a href=\"../core/Tick.html\">'</a>&nbsp;<a href=\"../core/Plus.html\">+</a>&nbsp;<a href=\"../core/IS.html\">IS</a>&nbsp;defer4 -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ 1&nbsp;2&nbsp;defer4 -&gt; 3 }T</span> <br>\n      <span class=\"tt\">T{ <a href=\"../core/Tick.html\">'</a>&nbsp;defer4&nbsp;<strong>DEFER@</strong> -&gt; <a href=\"../core/Tick.html\">'</a>&nbsp;<a href=\"../core/Plus.html\">+</a> }T</span>\n      \n      \n      </p>"
                    }
                }
            },
            "DEFERStore": {
                "id": "core:DEFER!",
                "number": "6.2.1175",
                "name": "DEFER!",
                "english": "defer-store",
                "list": "CORE EXT",
                "basename": "DEFERStore",
                "stackEffect": {
                    "html": {
                        " ": "( <em>xt<sub>2</sub> xt<sub>1</sub></em> -- )"
                    },
                    "plain": {
                        " ": "( xt2 xt1 -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>xt<sub>2</sub> xt<sub>1</sub></em> -- )\n      <p>\n      Set the word <em>xt<sub>1</sub></em> to execute <em>xt<sub>2</sub></em>.  An ambiguous\n      condition exists if <em>xt<sub>1</sub></em> is not for a word defined by\n      <a href=\"../core/DEFER.html\">DEFER</a>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/ACTION-OF.html\">6.2.0698 ACTION-OF</a>,\n      <a href=\"../core/DEFER.html\">6.2.1173 DEFER</a>,\n      <a href=\"../core/DEFERFetch.html\">6.2.1177 DEFER@</a>,\n      <a href=\"../core/IS.html\">6.2.1725 IS</a>.\n      <p>\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n <!-- I.6.2.---- DEFER! -->\n      <a href=\"../core/Colon.html\">:</a> <strong>DEFER!</strong> <a href=\"../core/p.html\">(</a> xt2 xt1 -- ) <br>\n      &nbsp;&nbsp; <a href=\"../core/toBODY.html\">&gt;BODY</a> <a href=\"../core/Store.html\">!</a> <a href=\"../core/Semi.html\">;</a>\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.2.---- DEFER! -->\n      <span class=\"tt\">T{ <a href=\"../core/DEFER.html\">DEFER</a>&nbsp;defer3 -&gt;  }T</span>\n      <p>\n      <span class=\"tt\">T{ <a href=\"../core/Tick.html\">'</a>&nbsp;<a href=\"../core/Times.html\">*</a>&nbsp;<a href=\"../core/Tick.html\">'</a>&nbsp;defer3&nbsp;<strong>DEFER!</strong> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ 2&nbsp;3&nbsp;defer3 -&gt; 6 }T</span>\n      </p><p>\n      <span class=\"tt\">T{ <a href=\"../core/Tick.html\">'</a>&nbsp;<a href=\"../core/Plus.html\">+</a>&nbsp;<a href=\"../core/Tick.html\">'</a>&nbsp;defer3&nbsp;<strong>DEFER!</strong> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ 1&nbsp;2&nbsp;defer3 -&gt; 3 }T</span>\n      \n      \n      </p>"
                    }
                }
            },
            "DEPTH": {
                "id": "core:DEPTH",
                "number": "6.1.1200",
                "name": "DEPTH",
                "english": " ",
                "list": "CORE",
                "basename": "DEPTH",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>+n</em> )"
                    },
                    "plain": {
                        " ": "( -- +n )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>+n</em> )\n      <p>\n      <em>+n</em> is the number of single-cell values contained in the\n      data stack before <em>+n</em> was placed on the stack.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.1200 DEPTH -->\n      <span class=\"tt\">T{ 0&nbsp;1&nbsp;<strong>DEPTH</strong> -&gt; 0&nbsp;1&nbsp;2 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;0&nbsp;<strong>DEPTH</strong> -&gt; 0&nbsp;1&nbsp;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;<strong>DEPTH</strong> -&gt; 0&nbsp;&nbsp;&nbsp;&nbsp; }T</span>\n      \n      \n      "
                    }
                }
            },
            "DO": {
                "id": "core:DO",
                "number": "6.1.1240",
                "name": "DO",
                "english": " ",
                "list": "CORE",
                "basename": "DO",
                "stackEffect": {
                    "html": {
                        "Compilation:": "( C: -- <em>do-sys</em> )",
                        "Run-time:": "( <em>n<sub>1</sub> | u<sub>1</sub> n<sub>2</sub> | u<sub>2</sub></em> -- )\n      ( R: -- <em>loop-sys</em> )"
                    },
                    "plain": {
                        "Compilation:": "( C: -- do-sys )",
                        "Run-time:": "( n1 | u1 n2 | u2 -- )\n( R: -- loop-sys )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      ( C: -- <em>do-sys</em> )\n      <p>\n      Place <em>do-sys</em> onto the control-flow stack. Append the\n      run-time semantics given below to the current definition. The\n      semantics are incomplete until resolved by a consumer of\n      <em>do-sys</em> such as <a href=\"../core/LOOP.html\">LOOP</a>.\n      </p><p>\n        \n      </p>"
                    },
                    "Run-time:": {
                        "name": "Run-time:",
                        "html": "\n\n\n      ( <em>n<sub>1</sub> | u<sub>1</sub> n<sub>2</sub> | u<sub>2</sub></em> -- )\n      ( R: -- <em>loop-sys</em> )\n      <p>\n      Set up loop control parameters with index <em>n<sub>2</sub> | u<sub>2</sub></em> and\n      limit <em>n<sub>1</sub> | u<sub>1</sub></em>. An ambiguous condition exists if\n      <em>n<sub>1</sub> | u<sub>1</sub></em> and <em>n<sub>2</sub> | u<sub>2</sub></em> are not both the same\n      type. Anything already on the return stack becomes unavailable\n      until the loop-control parameters are discarded.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:controlstack\">3.2.3.2 Control-flow stack</a></strong>,\n      <a href=\"../core/PlusLOOP.html\">6.1.0140 +LOOP</a>,\n      <a href=\"../core/LOOP.html\">6.1.1800 LOOP</a>,\n      <a href=\"../rationale.html#rat:core:DO\">A.6.1.1240 DO</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.1.1240 DO -->\n      Typical use:\n      <p>\n      &nbsp;&nbsp; <a href=\"../core/Colon.html\">:</a> <code>X</code> ...\n      <em>limit</em> <em>first</em> <strong>DO</strong>\n      ...\n      <a href=\"../core/LOOP.html\">LOOP</a>\n      <a href=\"../core/Semi.html\">;</a>\n      </p><p>\n      or\n      </p><p>\n      &nbsp;&nbsp; <a href=\"../core/Colon.html\">:</a> <code>X</code> ...\n      <em>limit</em> <em>first</em> <strong>DO</strong>\n      ...\n      <em>step</em> <a href=\"../core/PlusLOOP.html\">+LOOP</a>\n      <a href=\"../core/Semi.html\">;</a>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.1240 DO -->\n      See <a href=\"../testsuite.html#test:core:LOOP\">F.6.1.1800 LOOP</a>,\n      <a href=\"../testsuite.html#test:core:+LOOP\">F.6.1.0140 +LOOP</a>,\n      <a href=\"../testsuite.html#test:core:J\">F.6.1.1730 J</a>,\n      <a href=\"../testsuite.html#test:core:LEAVE\">F.6.1.1760 LEAVE</a>,\n      <a href=\"../testsuite.html#test:core:UNLOOP\">F.6.1.2380 UNLOOP</a>.\n      \n      \n      "
                    }
                }
            },
            "DOES": {
                "id": "core:DOES",
                "number": "6.1.1250",
                "name": "DOES>",
                "english": "does",
                "list": "CORE",
                "basename": "DOES",
                "stackEffect": {
                    "html": {
                        "Compilation:": "( C: <em>colon-sys<sub>1</sub></em> -- <em>colon-sys<sub>2</sub></em> )",
                        "Run-time:": "( -- )\n      ( R: <em>nest-sys<sub>1</sub></em> -- )",
                        "name Execution:": "( <em>i * x</em> -- <em>j * x</em> )"
                    },
                    "plain": {
                        "Compilation:": "( C: colon-sys1 -- colon-sys2 )",
                        "Run-time:": "( -- )\n( R: nest-sys1 -- )",
                        "name Execution:": "( i * x -- j * x )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      ( C: <em>colon-sys<sub>1</sub></em> -- <em>colon-sys<sub>2</sub></em> )\n      <p>\n      Append the run-time semantics below to the current definition.\n      Whether or not the current definition is rendered findable in\n      the dictionary by the compilation of <strong>DOES&gt;</strong> is\n      implementation defined. Consume <em>colon-sys<sub>1</sub></em> and\n      produce <em>colon-sys<sub>2</sub></em>. Append the initiation semantics\n      given below to the current definition.\n      </p><p>\n        \n      </p>"
                    },
                    "Run-time:": {
                        "name": "Run-time:",
                        "html": "\n\n\n      ( -- )\n      ( R: <em>nest-sys<sub>1</sub></em> -- )\n      <p>\n      Replace the execution semantics of the most recent definition,\n      referred to as <em>name</em>, with the <em>name</em> execution\n      semantics given below. Return control to the calling definition\n      specified by <em>nest-sys<sub>1</sub></em>. An ambiguous condition exists\n      if <em>name</em> was not defined with <a href=\"../core/CREATE.html\">CREATE</a> or a\n      user-defined word that calls <a href=\"../core/CREATE.html\">CREATE</a>.\n      </p><p>\n        \n      </p>"
                    },
                    "Initiation:": {
                        "name": "Initiation:",
                        "html": "\n\n\n      ( <em>i * x</em> -- <em>i * x a-addr</em> )\n      ( R: -- <em>nest-sys<sub>2</sub></em> )\n      <p>\n      Save implementation-dependent information <em>nest-sys<sub>2</sub></em>\n      about the calling definition. Place <em>name</em>'s data field\n      address on the stack. The stack effects <em>i * x</em> represent\n      arguments to <em>name</em>.\n      </p><p>\n        \n      </p>"
                    },
                    "name Execution:": {
                        "name": "name Execution:",
                        "html": "\n\n\n      ( <em>i * x</em> -- <em>j * x</em> )\n      <p>\n      Execute the portion of the definition that begins with the\n      initiation semantics appended by the <strong>DOES&gt;</strong> which modified\n      <em>name</em>. The stack effects <em>i * x</em> and <em>j * x</em>\n      represent arguments to and results from <em>name</em>,\n      respectively.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/CREATE.html\">6.1.1000 CREATE</a>,\n      <a href=\"../rationale.html#rat:core:DOES\">A.6.1.1250 DOES&gt;</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.1.1250 DOES> -->\n      Typical use:\n      <a href=\"../core/Colon.html\">:</a> <code>X</code> ... <strong>DOES&gt;</strong> ... <a href=\"../core/Semi.html\">;</a>\n      <p>\n      Following <strong>DOES&gt;</strong>, a Standard Program may not make any\n      assumptions regarding the ability to find either the name of\n      the definition containing the <strong>DOES&gt;</strong> or any previous\n      definition whose name may be concealed by it. <strong>DOES&gt;</strong>\n      effectively ends one definition and begins another as far as\n      local variables and control-flow structures are concerned.\n      The compilation behavior makes it clear that the user is not\n      entitled to place <strong>DOES&gt;</strong> inside any control-flow\n      structures.\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.1250 DOES> -->\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;DOES1&nbsp;<strong>DOES&gt;</strong>&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;1&nbsp;<a href=\"../core/Plus.html\">+</a>&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;DOES2&nbsp;<strong>DOES&gt;</strong>&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;2&nbsp;<a href=\"../core/Plus.html\">+</a>&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ <a href=\"../core/CREATE.html\">CREATE</a>&nbsp;CR1 -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ CR1&nbsp;&nbsp; -&gt; <a href=\"../core/HERE.html\">HERE</a> }T</span> <br>\n      <span class=\"tt\">T{ 1&nbsp;<a href=\"../core/Comma.html\">,</a>&nbsp;&nbsp; -&gt; &nbsp; }T</span> <br>\n      <span class=\"tt\">T{ CR1&nbsp;<a href=\"../core/Fetch.html\">@</a> -&gt; 1 }T</span> <br>\n      <span class=\"tt\">T{ DOES1 -&gt; &nbsp; }T</span> <br>\n      <span class=\"tt\">T{ CR1&nbsp;&nbsp; -&gt; 2 }T</span> <br>\n      <span class=\"tt\">T{ DOES2 -&gt; &nbsp; }T</span> <br>\n      <span class=\"tt\">T{ CR1&nbsp;&nbsp; -&gt; 3 }T</span>\n      <p>\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;WEIRD:&nbsp;<a href=\"../core/CREATE.html\">CREATE</a>&nbsp;<strong>DOES&gt;</strong>&nbsp;1&nbsp;<a href=\"../core/Plus.html\">+</a>&nbsp;<strong>DOES&gt;</strong>&nbsp;2&nbsp;<a href=\"../core/Plus.html\">+</a>&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ WEIRD:&nbsp;W1 -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ <a href=\"../core/Tick.html\">'</a>&nbsp;W1&nbsp;<a href=\"../core/toBODY.html\">&gt;BODY</a> -&gt; <a href=\"../core/HERE.html\">HERE</a> }T</span> <br>\n      <span class=\"tt\">T{ W1 -&gt; <a href=\"../core/HERE.html\">HERE</a>&nbsp;1&nbsp;<a href=\"../core/Plus.html\">+</a> }T</span> <br>\n      <span class=\"tt\">T{ W1 -&gt; <a href=\"../core/HERE.html\">HERE</a>&nbsp;2&nbsp;<a href=\"../core/Plus.html\">+</a> }T</span>\n      \n      \n      </p>"
                    }
                }
            },
            "DROP": {
                "id": "core:DROP",
                "number": "6.1.1260",
                "name": "DROP",
                "english": " ",
                "list": "CORE",
                "basename": "DROP",
                "stackEffect": {
                    "html": {
                        " ": "( <em>x</em> -- )"
                    },
                    "plain": {
                        " ": "( x -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>x</em> -- )\n      <p>\n      Remove <em>x</em> from the stack.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.1260 DROP -->\n      <span class=\"tt\">T{ 1&nbsp;2&nbsp;<strong>DROP</strong> -&gt; 1 }T</span> <br>\n      <span class=\"tt\">T{ 0&nbsp;&nbsp;&nbsp;<strong>DROP</strong> -&gt; &nbsp; }T</span>\n      \n      \n      "
                    }
                }
            },
            "DUP": {
                "id": "core:DUP",
                "number": "6.1.1290",
                "name": "DUP",
                "english": "dupe",
                "list": "CORE",
                "basename": "DUP",
                "stackEffect": {
                    "html": {
                        " ": "( <em>x</em> -- <em>x x</em> )"
                    },
                    "plain": {
                        " ": "( x -- x x )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>x</em> -- <em>x x</em> )\n      <p>\n      Duplicate <em>x</em>.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.1290 DUP -->\n      <span class=\"tt\">T{ 1&nbsp;<strong>DUP</strong> -&gt; 1&nbsp;1 }T</span>\n      \n      \n      "
                    }
                }
            },
            "Div": {
                "id": "core:/",
                "number": "6.1.0230",
                "name": "/",
                "english": "slash",
                "list": "CORE",
                "basename": "Div",
                "stackEffect": {
                    "html": {
                        " ": "( <em>n<sub>1</sub> n<sub>2</sub></em> -- <em>n<sub>3</sub></em> )"
                    },
                    "plain": {
                        " ": "( n1 n2 -- n3 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>n<sub>1</sub> n<sub>2</sub></em> -- <em>n<sub>3</sub></em> )\n      <p>\n      Divide <em>n<sub>1</sub></em> by <em>n<sub>2</sub></em>, giving the single-cell quotient\n      <em>n<sub>3</sub></em>. An ambiguous condition exists if <em>n<sub>2</sub></em> is zero.\n      If <em>n<sub>1</sub></em> and <em>n<sub>2</sub></em> differ in sign, the\n      implementation-defined result returned will be the same as that\n      returned by either the phrase\n      <a href=\"../core/toR.html\">&gt;R</a> <a href=\"../core/StoD.html\">S&gt;D</a> <a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/FMDivMOD.html\">FM/MOD</a> <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../core/DROP.html\">DROP</a>\n      or the phrase\n      <a href=\"../core/toR.html\">&gt;R</a> <a href=\"../core/StoD.html\">S&gt;D</a> <a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/SMDivREM.html\">SM/REM</a> <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../core/DROP.html\">DROP</a>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:div\">3.2.2.1 Integer division</a></strong>.\n      <p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0230 / -->\n            <div class=\"tt\">\nIFFLOORED &nbsp;&nbsp;\t<a href=\"../core/Colon.html\">:</a> T/ T/MOD <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../core/DROP.html\">DROP</a> <a href=\"../core/Semi.html\">;</a> <br>\n        IFSYM &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/Colon.html\">:</a> T/ T/MOD <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../core/DROP.html\">DROP</a> <a href=\"../core/Semi.html\">;</a>\n        <p>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>/</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;T/ }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>/</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;T/ }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>/</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;T/ }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>/</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;T/ }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>/</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;T/ }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>/</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;T/ }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>/</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;T/ }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>/</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;T/ }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>/</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;T/ }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>/</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;T/ }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;<strong>/</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;T/ }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>/</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;T/ }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2&nbsp;<strong>/</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2&nbsp;T/ }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;<strong>/</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;T/ }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-3&nbsp;<strong>/</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-3&nbsp;T/ }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;<strong>/</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;T/ }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-3&nbsp;<strong>/</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-3&nbsp;T/ }T</span> <br>\n        <span class=\"tt\">T{ MAX-INT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>/</strong> -&gt; MAX-INT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;T/ }T</span> <br>\n        <span class=\"tt\">T{ MIN-INT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>/</strong> -&gt; MIN-INT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;T/ }T</span> <br>\n        <span class=\"tt\">T{ MAX-INT&nbsp;MAX-INT&nbsp;<strong>/</strong> -&gt; MAX-INT&nbsp;MAX-INT&nbsp;T/ }T</span> <br>\n        <span class=\"tt\">T{ MIN-INT&nbsp;MIN-INT&nbsp;<strong>/</strong> -&gt; MIN-INT&nbsp;MIN-INT&nbsp;T/ }T</span>\n        \n        \n        </p></div>\n      "
                    }
                }
            },
            "DivMOD": {
                "id": "core:/MOD",
                "number": "6.1.0240",
                "name": "/MOD",
                "english": "slash-mod",
                "list": "CORE",
                "basename": "DivMOD",
                "stackEffect": {
                    "html": {
                        " ": "( <em>n<sub>1</sub> n<sub>2</sub></em> -- <em>n<sub>3</sub> n<sub>4</sub></em> )"
                    },
                    "plain": {
                        " ": "( n1 n2 -- n3 n4 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>n<sub>1</sub> n<sub>2</sub></em> -- <em>n<sub>3</sub> n<sub>4</sub></em> )\n      <p>\n      Divide <em>n<sub>1</sub></em> by <em>n<sub>2</sub></em>, giving the single-cell remainder\n      <em>n<sub>3</sub></em> and the single-cell quotient <em>n<sub>4</sub></em>. An ambiguous\n      condition exists if <em>n<sub>2</sub></em> is zero. If <em>n<sub>1</sub></em> and\n      <em>n<sub>2</sub></em> differ in sign, the implementation-defined result\n      returned will be the same as that returned by either the phrase\n      <a href=\"../core/toR.html\">&gt;R</a> <a href=\"../core/StoD.html\">S&gt;D</a> <a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/FMDivMOD.html\">FM/MOD</a>\n      or the phrase\n      <a href=\"../core/toR.html\">&gt;R</a> <a href=\"../core/StoD.html\">S&gt;D</a> <a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/SMDivREM.html\">SM/REM</a>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:div\">3.2.2.1 Integer division</a></strong>.\n      <p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0240 /MOD -->\n            <div class=\"tt\">\nIFFLOORED &nbsp;&nbsp;  <a href=\"../core/Colon.html\">:</a> T/MOD  <a href=\"../core/toR.html\">&gt;R</a> <a href=\"../core/StoD.html\">S&gt;D</a> <a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/FMDivMOD.html\">FM/MOD</a> <a href=\"../core/Semi.html\">;</a> <br>\n        IFSYM &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/Colon.html\">:</a> T/MOD  <a href=\"../core/toR.html\">&gt;R</a> <a href=\"../core/StoD.html\">S&gt;D</a> <a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/SMDivREM.html\">SM/REM</a> <a href=\"../core/Semi.html\">;</a>\n        <p>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>/MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;T/MOD }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>/MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;T/MOD }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>/MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;T/MOD }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>/MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;T/MOD }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>/MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;T/MOD }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>/MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;T/MOD }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>/MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;T/MOD }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>/MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;T/MOD }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>/MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;T/MOD }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>/MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;T/MOD }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;<strong>/MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;T/MOD }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>/MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;T/MOD }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2&nbsp;<strong>/MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2&nbsp;T/MOD }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;<strong>/MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;T/MOD }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-3&nbsp;<strong>/MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-3&nbsp;T/MOD }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;<strong>/MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;T/MOD }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-3&nbsp;<strong>/MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-3&nbsp;T/MOD }T</span> <br>\n        <span class=\"tt\">T{ MAX-INT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>/MOD</strong> -&gt; MAX-INT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;T/MOD }T</span> <br>\n        <span class=\"tt\">T{ MIN-INT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>/MOD</strong> -&gt; MIN-INT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;T/MOD }T</span> <br>\n        <span class=\"tt\">T{ MAX-INT&nbsp;MAX-INT&nbsp;<strong>/MOD</strong> -&gt; MAX-INT&nbsp;MAX-INT&nbsp;T/MOD }T</span> <br>\n        <span class=\"tt\">T{ MIN-INT&nbsp;MIN-INT&nbsp;<strong>/MOD</strong> -&gt; MIN-INT&nbsp;MIN-INT&nbsp;T/MOD }T</span>\n        \n        \n        </p></div>\n      "
                    }
                }
            },
            "DotR": {
                "id": "core:.R",
                "number": "6.2.0210",
                "name": ".R",
                "english": "dot-r",
                "list": "CORE EXT",
                "basename": "DotR",
                "stackEffect": {
                    "html": {
                        " ": "( <em>n<sub>1</sub> n<sub>2</sub></em> -- )"
                    },
                    "plain": {
                        " ": "( n1 n2 -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>n<sub>1</sub> n<sub>2</sub></em> -- )\n      <p>\n      Display <em>n<sub>1</sub></em> right aligned in a field <em>n<sub>2</sub></em>\n      characters wide. If the number of characters required to display\n      <em>n<sub>1</sub></em> is greater than <em>n<sub>2</sub></em>, all digits are displayed\n      with no leading spaces in a field as wide as necessary.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../rationale.html#rat:core:.R\">A.6.2.0210 .R</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.2.0210 .R -->\n      In <strong>.R</strong>, \"R\" is short for RIGHT.\n      \n      \n      "
                    }
                }
            },
            "Dotp": {
                "id": "core:.p",
                "number": "6.2.0200",
                "name": ".(",
                "english": "dot-paren",
                "list": "CORE EXT",
                "basename": "Dotp",
                "stackEffect": {
                    "html": {
                        "Execution:": "( <em>\"ccc&lt;paren&gt;\"</em> -- )"
                    },
                    "plain": {
                        "Execution:": "( \"ccc<paren>\" -- )"
                    }
                },
                "sections": {
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      Perform the execution semantics given below.\n      <p>\n        \n      </p>"
                    },
                    "Execution:": {
                        "name": "Execution:",
                        "html": "\n\n\n      ( <em>\"ccc&lt;paren&gt;\"</em> -- )\n      <p>\n      Parse and display <em>ccc</em> delimited by <code>)</code> (right\n      parenthesis). <strong>.(</strong> is an immediate word.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:parsing\">3.4.1 Parsing</a></strong>,\n      <a href=\"../core/Dotq.html\">6.1.0190 .\"</a>,\n      <a href=\"../rationale.html#rat:core:.p\">A.6.2.0200 .(</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.2.0200 . -->\n      Typical use:\n      <strong>.(</strong> <em>ccc</em><code>)</code>\n      \n      \n      "
                    }
                }
            },
            "Dotq": {
                "id": "core:.q",
                "number": "6.1.0190",
                "name": ".\"",
                "english": "dot-quote",
                "list": "CORE",
                "basename": "Dotq",
                "stackEffect": {
                    "html": {
                        "Compilation:": "( <em>\"ccc&lt;quote&gt;\"</em> -- )",
                        "Run-time:": "( -- )"
                    },
                    "plain": {
                        "Compilation:": "( \"ccc<quote>\" -- )",
                        "Run-time:": "( -- )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      ( <em>\"ccc&lt;quote&gt;\"</em> -- )\n      <p>\n      Parse <em>ccc</em> delimited by <code>\"</code> (double-quote).\n      Append the run-time semantics given below to the current\n      definition.\n      </p><p>\n        \n      </p>"
                    },
                    "Run-time:": {
                        "name": "Run-time:",
                        "html": "\n\n\n      ( -- )\n      <p>\n      Display <em>ccc</em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:parsing\">3.4.1 Parsing</a></strong>,\n      <a href=\"../core/Dotp.html\">6.2.0200 .(</a>,\n      <a href=\"../rationale.html#rat:core:.q\">A.6.1.0190 .\"</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.1.0190 .\" -->\n      Typical use:\n      <a href=\"../core/Colon.html\">:</a> <code>X</code> ...\n      <strong>.\"</strong> <em>ccc</em><code>\"</code> ...\n      <a href=\"../core/Semi.html\">;</a>\n      <p>\n      An implementation may define interpretation semantics for\n      <strong>.\"</strong> if desired. In one plausible implementation,\n      interpreting <strong>.\"</strong> would display the delimited message.\n      In another plausible implementation, interpreting <strong>.\"</strong>\n      would compile code to display the message later. In still\n      another plausible implementation, interpreting <strong>.\"</strong> would\n      be treated as an exception. Given this variation a Standard\n      Program may not use <strong>.\"</strong> while interpreting. Similarly,\n      a Standard Program may not compile <a href=\"../core/POSTPONE.html\">POSTPONE</a> <strong>.\"</strong>\n      inside a new word, and then use that word while interpreting.\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0190 .\" -->\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;pb1&nbsp;<a href=\"../core/CR.html\">CR</a>&nbsp;<strong>.\"</strong>&nbsp;You&nbsp;should&nbsp;see&nbsp;2345:&nbsp;\"<strong>.\"</strong>&nbsp;2345\"<a href=\"../core/Semi.html\">;</a>&nbsp;pb1 -&gt;  }T</span>\n      <p>\n      See <a href=\"../testsuite.html#test:core:EMIT\">F.6.1.1320 EMIT</a>.\n      \n      \n      </p>"
                    }
                }
            },
            "ELSE": {
                "id": "core:ELSE",
                "number": "6.1.1310",
                "name": "ELSE",
                "english": " ",
                "list": "CORE",
                "basename": "ELSE",
                "stackEffect": {
                    "html": {
                        "Compilation:": "( C: <em>orig<sub>1</sub></em> -- <em>orig<sub>2</sub></em> )",
                        "Run-time:": "( -- )"
                    },
                    "plain": {
                        "Compilation:": "( C: orig1 -- orig2 )",
                        "Run-time:": "( -- )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      ( C: <em>orig<sub>1</sub></em> -- <em>orig<sub>2</sub></em> )\n      <p>\n      Put the location of a new unresolved forward reference\n      <em>orig<sub>2</sub></em> onto the control flow stack. Append the run-time\n      semantics given below to the current definition. The semantics\n      will be incomplete until <em>orig<sub>2</sub></em> is resolved (e.g., by\n      <a href=\"../core/THEN.html\">THEN</a>). Resolve the forward reference <em>orig<sub>1</sub></em> using\n      the location following the appended run-time semantics.\n      </p><p>\n        \n      </p>"
                    },
                    "Run-time:": {
                        "name": "Run-time:",
                        "html": "\n\n\n      ( -- )\n      <p>\n      Continue execution at the location given by the resolution of\n      <em>orig<sub>2</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/IF.html\">6.1.1700 IF</a>,\n      <a href=\"../core/THEN.html\">6.1.2270 THEN</a>,\n      <a href=\"../rationale.html#rat:core:ELSE\">A.6.1.1310 ELSE</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.1.1310 ELSE -->\n      Typical use:\n      <a href=\"../core/Colon.html\">:</a> <code>X</code> ...\n      <em>test</em> <a href=\"../core/IF.html\">IF</a> ...\n      <strong>ELSE</strong> ... <a href=\"../core/THEN.html\">THEN</a>\n      <a href=\"../core/Semi.html\">;</a>\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.1310 ELSE -->\n      See <a href=\"../testsuite.html#test:core:IF\">F.6.1.1700 IF</a>.\n      \n      \n      "
                    }
                }
            },
            "EMIT": {
                "id": "core:EMIT",
                "number": "6.1.1320",
                "name": "EMIT",
                "english": " ",
                "list": "CORE",
                "basename": "EMIT",
                "stackEffect": {
                    "html": {
                        " ": "( <em>x</em> -- )"
                    },
                    "plain": {
                        " ": "( x -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>x</em> -- )\n      <p>\n      If <em>x</em> is a graphic character in the implementation-defined\n      character set, display <em>x</em>. The effect of <strong>EMIT</strong> for all\n      other values of <em>x</em> is implementation-defined.\n      </p><p>\n      When passed a character whose character-defining bits have a\n      value between hex 20 and 7E inclusive, the corresponding\n      standard character, specified by <strong><a href=\"../usage.html#usage:ASCII\">3.1.2.1 Graphic characters</a></strong>, is displayed. Because different output\n      devices can respond differently to control characters, programs\n      that use control characters to perform specific functions have\n      an environmental dependency. Each EMIT deals with only one\n      character.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/TYPE.html\">6.1.2310 TYPE</a>.\n      <p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.1320 EMIT -->\n            <div class=\"tt\">\n<a href=\"../core/Colon.html\">:</a> OUTPUT-TEST <br>\n        \n        &nbsp;&nbsp;   <a href=\"../core/Dotq.html\">.\"</a> YOU SHOULD SEE THE STANDARD GRAPHIC CHARACTERS:\" <a href=\"../core/CR.html\">CR</a> <br>\n        &nbsp;&nbsp;   41 <a href=\"../core/BL.html\">BL</a> <a href=\"../core/DO.html\">DO</a> <a href=\"../core/I.html\">I</a> <strong>EMIT</strong> <a href=\"../core/LOOP.html\">LOOP</a> <a href=\"../core/CR.html\">CR</a> <br>\n        &nbsp;&nbsp;   61 41 <a href=\"../core/DO.html\">DO</a> <a href=\"../core/I.html\">I</a> <strong>EMIT</strong> <a href=\"../core/LOOP.html\">LOOP</a> <a href=\"../core/CR.html\">CR</a> <br>\n        &nbsp;&nbsp;   7F 61 <a href=\"../core/DO.html\">DO</a> <a href=\"../core/I.html\">I</a> <strong>EMIT</strong> <a href=\"../core/LOOP.html\">LOOP</a> <a href=\"../core/CR.html\">CR</a> <br>\n        \n        &nbsp;&nbsp;   <a href=\"../core/Dotq.html\">.\"</a> YOU SHOULD SEE 0-9 SEPARATED BY A SPACE:\" <a href=\"../core/CR.html\">CR</a> <br>\n        &nbsp;&nbsp;   9 <a href=\"../core/OnePlus.html\">1+</a> 0 <a href=\"../core/DO.html\">DO</a> <a href=\"../core/I.html\">I</a> <a href=\"../core/d.html\">.</a> <a href=\"../core/LOOP.html\">LOOP</a> <a href=\"../core/CR.html\">CR</a> <br>\n        \n        &nbsp;&nbsp;   <a href=\"../core/Dotq.html\">.\"</a> YOU SHOULD SEE 0-9 (WITH NO SPACES):\" <a href=\"../core/CR.html\">CR</a> <br>\n        &nbsp;&nbsp;   <a href=\"../core/BracketCHAR.html\">[CHAR]</a> 9 <a href=\"../core/OnePlus.html\">1+</a> <a href=\"../core/BracketCHAR.html\">[CHAR]</a> 0\n        <a href=\"../core/DO.html\">DO</a> <a href=\"../core/I.html\">I</a> 0 <a href=\"../core/SPACES.html\">SPACES</a> <strong>EMIT</strong> <a href=\"../core/LOOP.html\">LOOP</a> <a href=\"../core/CR.html\">CR</a> <br>\n        \n        &nbsp;&nbsp;   <a href=\"../core/Dotq.html\">.\"</a> YOU SHOULD SEE A-G SEPARATED BY A SPACE:\" <a href=\"../core/CR.html\">CR</a> <br>\n        &nbsp;&nbsp;   <a href=\"../core/BracketCHAR.html\">[CHAR]</a> G <a href=\"../core/OnePlus.html\">1+</a> <a href=\"../core/BracketCHAR.html\">[CHAR]</a> A\n        <a href=\"../core/DO.html\">DO</a> <a href=\"../core/I.html\">I</a> <strong>EMIT</strong> <a href=\"../core/SPACE.html\">SPACE</a> <a href=\"../core/LOOP.html\">LOOP</a> <a href=\"../core/CR.html\">CR</a> <br>\n        \n        &nbsp;&nbsp;   <a href=\"../core/Dotq.html\">.\"</a> YOU SHOULD SEE 0-5 SEPARATED BY TWO SPACES:\" <a href=\"../core/CR.html\">CR</a> <br>\n        &nbsp;&nbsp;   5 <a href=\"../core/OnePlus.html\">1+</a> 0\n        <a href=\"../core/DO.html\">DO</a> <a href=\"../core/I.html\">I</a> <a href=\"../core/BracketCHAR.html\">[CHAR]</a> 0 <a href=\"../core/Plus.html\">+</a> <strong>EMIT</strong> 2 <a href=\"../core/SPACES.html\">SPACES</a> <a href=\"../core/LOOP.html\">LOOP</a> <a href=\"../core/CR.html\">CR</a> <br>\n        \n        &nbsp;&nbsp;   <a href=\"../core/Dotq.html\">.\"</a> YOU SHOULD SEE TWO SEPARATE LINES:\" <a href=\"../core/CR.html\">CR</a> <br>\n        &nbsp;&nbsp;   <a href=\"../core/Sq.html\">S\"</a> LINE 1\" <a href=\"../core/TYPE.html\">TYPE</a> <a href=\"../core/CR.html\">CR</a> <a href=\"../core/Sq.html\">S\"</a> LINE 2\" <a href=\"../core/TYPE.html\">TYPE</a> <a href=\"../core/CR.html\">CR</a> <br>\n        \n        &nbsp;&nbsp;   <a href=\"../core/Dotq.html\">.\"</a>  YOU SHOULD SEE THE NUMBER RANGES OF SIGNED AND UNSIGNED NUMBERS:\" <a href=\"../core/CR.html\">CR</a> <br>\n        &nbsp;&nbsp;   <a href=\"../core/Dotq.html\">.\"</a>   SIGNED: \" MIN-INT <a href=\"../core/d.html\">.</a> MAX-INT <a href=\"../core/d.html\">.</a> <a href=\"../core/CR.html\">CR</a> <br>\n        &nbsp;&nbsp;   <a href=\"../core/Dotq.html\">.\"</a> UNSIGNED: \" 0 <a href=\"../core/Ud.html\">U.</a> MAX-UINT <a href=\"../core/Ud.html\">U.</a> <a href=\"../core/CR.html\">CR</a> <br>\n        <a href=\"../core/Semi.html\">;</a>\n        <p>\n        <span class=\"tt\">T{ OUTPUT-TEST -&gt;  }T</span>\n        \n        \n        </p></div>\n      "
                    }
                }
            },
            "ENDCASE": {
                "id": "core:ENDCASE",
                "number": "6.2.1342",
                "name": "ENDCASE",
                "english": "end-case",
                "list": "CORE EXT",
                "basename": "ENDCASE",
                "stackEffect": {
                    "html": {
                        "Compilation:": "( C: <em>case-sys</em> -- )",
                        "Run-time:": "( <em>x</em> -- )"
                    },
                    "plain": {
                        "Compilation:": "( C: case-sys -- )",
                        "Run-time:": "( x -- )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      ( C: <em>case-sys</em> -- )\n      <p>\n      Mark the end of the\n      <a href=\"../core/CASE.html\">CASE</a>...<a href=\"../core/OF.html\">OF</a>...<a href=\"../core/ENDOF.html\">ENDOF</a>...<strong>ENDCASE</strong>\n      structure. Use <em>case-sys</em> to resolve the entire structure.\n      Append the run-time semantics given below to the current\n      definition.\n      </p><p>\n        \n      </p>"
                    },
                    "Run-time:": {
                        "name": "Run-time:",
                        "html": "\n\n\n      ( <em>x</em> -- )\n      <p>\n      Discard the case selector <em>x</em> and continue execution.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/CASE.html\">6.2.0873 CASE</a>,\n      <a href=\"../core/ENDOF.html\">6.2.1343 ENDOF</a>,\n      <a href=\"../core/OF.html\">6.2.1950 OF</a>,\n      <a href=\"../rationale.html#rat:core:ENDCASE\">A.6.2.1342 ENDCASE</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.2.1342 ENDCASE -->\n      Typical use:\n            <div class=\"quote\">\n\n        <a href=\"../core/Colon.html\">:</a> <code>X</code> ... <br>\n        &nbsp;&nbsp; <a href=\"../core/CASE.html\">CASE</a> <br>\n        &nbsp;&nbsp;   <em>test1</em> <a href=\"../core/OF.html\">OF</a> ... <a href=\"../core/ENDOF.html\">ENDOF</a> <br>\n        &nbsp;&nbsp;   <em>testn</em> <a href=\"../core/OF.html\">OF</a> ... <a href=\"../core/ENDOF.html\">ENDOF</a> <br>\n        &nbsp;&nbsp;   ... <a href=\"../core/p.html\">(</a> default ) <br>\n        &nbsp;&nbsp; <strong>ENDCASE</strong> ... <br>\n        <a href=\"../core/Semi.html\">;</a>\n        \n        </div>\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      See <a href=\"../testsuite.html#test:core:CASE\">F.6.2.0873 CASE</a>.\n      \n      \n      "
                    }
                }
            },
            "ENDOF": {
                "id": "core:ENDOF",
                "number": "6.2.1343",
                "name": "ENDOF",
                "english": "end-of",
                "list": "CORE EXT",
                "basename": "ENDOF",
                "stackEffect": {
                    "html": {
                        "Compilation:": "( C: <em>case-sys<sub>1</sub> of-sys</em> -- <em>case-sys<sub>2</sub></em> )",
                        "Run-time:": "( -- )"
                    },
                    "plain": {
                        "Compilation:": "( C: case-sys1 of-sys -- case-sys2 )",
                        "Run-time:": "( -- )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      ( C: <em>case-sys<sub>1</sub> of-sys</em> -- <em>case-sys<sub>2</sub></em> )\n      <p>\n      Mark the end of the <a href=\"../core/OF.html\">OF</a>...<strong>ENDOF</strong> part of the\n      <a href=\"../core/CASE.html\">CASE</a> structure. The next location for a transfer of\n      control resolves the reference given by <em>of-sys</em>. Append\n      the run-time semantics given below to the current definition.\n      Replace <em>case-sys<sub>1</sub></em> with <em>case-sys<sub>2</sub></em> on the\n      control-flow stack, to be resolved by <a href=\"../core/ENDCASE.html\">ENDCASE</a>.\n      </p><p>\n        \n      </p>"
                    },
                    "Run-time:": {
                        "name": "Run-time:",
                        "html": "\n\n\n      ( -- )\n      <p>\n      Continue execution at the location specified by the consumer\n      of <em>case-sys<sub>2</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/CASE.html\">6.2.0873 CASE</a>,\n      <a href=\"../core/ENDCASE.html\">6.2.1342 ENDCASE</a>,\n      <a href=\"../core/OF.html\">6.2.1950 OF</a>,\n      <a href=\"../rationale.html#rat:core:ENDOF\">A.6.2.1343 ENDOF</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.2.1343 ENDOF -->\n      Typical use:\n            <div class=\"quote\">\n\n        <a href=\"../core/Colon.html\">:</a> <code>X</code> ... <br>\n        &nbsp;&nbsp; <a href=\"../core/CASE.html\">CASE</a> <br>\n        &nbsp;&nbsp;   <em>test1</em> <a href=\"../core/OF.html\">OF</a> ... <strong>ENDOF</strong> <br>\n        &nbsp;&nbsp;   <em>testn</em> <a href=\"../core/OF.html\">OF</a> ... <strong>ENDOF</strong> <br>\n        &nbsp;&nbsp;   ... <a href=\"../core/p.html\">(</a> default ) <br>\n        &nbsp;&nbsp; <a href=\"../core/ENDCASE.html\">ENDCASE</a> ... <br>\n        <a href=\"../core/Semi.html\">;</a>\n        \n        </div>\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      See <a href=\"../testsuite.html#test:core:CASE\">F.6.2.0873 CASE</a>.\n      \n      \n      "
                    }
                }
            },
            "ENVIRONMENTq": {
                "id": "core:ENVIRONMENTq",
                "number": "6.1.1345",
                "name": "ENVIRONMENT?",
                "english": "environment-query",
                "list": "CORE",
                "basename": "ENVIRONMENTq",
                "stackEffect": {
                    "html": {
                        " ": "( <em>c-addr u</em> -- <em>false  |  i * x true</em> )"
                    },
                    "plain": {
                        " ": "( c-addr u -- false  |  i * x true )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>c-addr u</em> -- <em>false  |  i * x true</em> )\n      <p>\n      <em>c-addr</em> is the address of a character string and <em>u</em>\n      is the string's character count. <em>u</em> may have a value in\n      the range from zero to an implementation-defined maximum which\n      shall not be less than 31. The character string should contain a\n      keyword from <strong><a href=\"../usage.html#usage:env\">3.2.6 Environmental queries</a></strong> or the\n      optional word sets to be checked for correspondence with an\n      attribute of the present environment. If the system treats the\n      attribute as unknown, the returned flag is <em>false</em>;\n      otherwise, the flag is <em>true</em> and the <em>i * x</em> returned\n      is of the type specified in the table for the attribute queried.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../rationale.html#rat:core:ENVIRONMENTq\">A.6.1.1345 ENVIRONMENT?</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.1.1345 ENVIRONMENT? -->\n      In a Standard System that contains only the Core word set,\n      effective use of <strong>ENVIRONMENT?</strong> requires either its use\n      within a definition, or the use of user-supplied auxiliary\n      definitions. The Core word set lacks both a direct method for\n      collecting a string in interpretation state (<a href=\"../file/Sq.html\">11.6.1.2165 S\"</a>\n      is in an optional word set) and also a means to test the\n      returned flag in interpretation state (e.g. the optional\n      <a href=\"../tools/BracketIF.html\">15.6.2.2532 [IF]</a>).\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.1345 ENVIRONMENT? -->\n      <a href=\"../core/bs.html\">\\</a> should be the same for any query starting with X: <br>\n      <span class=\"tt\">T{ <a href=\"../core/Sq.html\">S\"</a>&nbsp;X:deferred\"&nbsp;<strong>ENVIRONMENT?</strong>&nbsp;<a href=\"../core/DUP.html\">DUP</a>&nbsp;<a href=\"../core/ZeroEqual.html\">0=</a>&nbsp;<a href=\"../core/XOR.html\">XOR</a>&nbsp;<a href=\"../core/INVERT.html\">INVERT</a> -&gt; &lt;TRUE&gt;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ <a href=\"../core/Sq.html\">S\"</a>&nbsp;X:notfound\"&nbsp;<strong>ENVIRONMENT?</strong>&nbsp;<a href=\"../core/DUP.html\">DUP</a>&nbsp;<a href=\"../core/ZeroEqual.html\">0=</a>&nbsp;<a href=\"../core/XOR.html\">XOR</a>&nbsp;<a href=\"../core/INVERT.html\">INVERT</a> -&gt; &lt;FALSE&gt; }T</span>\n      \n      \n      "
                    }
                }
            },
            "ERASE": {
                "id": "core:ERASE",
                "number": "6.2.1350",
                "name": "ERASE",
                "english": " ",
                "list": "CORE EXT",
                "basename": "ERASE",
                "stackEffect": {
                    "html": {
                        " ": "( <em>addr u</em> -- )"
                    },
                    "plain": {
                        " ": "( addr u -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>addr u</em> -- )\n      <p>\n      If <em>u</em> is greater than zero, clear all bits in each of\n      <em>u</em> consecutive address units of memory beginning at\n      <em>addr</em>.\n      \n      </p>"
                    }
                }
            },
            "EVALUATE": {
                "id": "core:EVALUATE",
                "number": "6.1.1360",
                "name": "EVALUATE",
                "english": " ",
                "list": "CORE",
                "basename": "EVALUATE",
                "stackEffect": {
                    "html": {
                        " ": "( <em>i * x c-addr u</em> -- <em>j * x</em> )"
                    },
                    "plain": {
                        " ": "( i * x c-addr u -- j * x )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>i * x c-addr u</em> -- <em>j * x</em> )\n      <p>\n      Save the current input source specification. Store minus-one\n      (-1) in <a href=\"../core/SOURCE-ID.html\">SOURCE-ID</a> if it is present. Make the string\n      described by <em>c-addr</em> and <em>u</em> both the input source\n      and input buffer, set <a href=\"../core/toIN.html\">&gt;IN</a> to zero, and interpret. When\n      the parse area is empty, restore the prior input source\n      specification. Other stack effects are due to the words\n      <strong>EVALUATE</strong>d.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.1360 EVALUATE -->\n            <div class=\"tt\">\n<a href=\"../core/Colon.html\">:</a> GE1 <a href=\"../core/Sq.html\">S\"</a> 123\" <a href=\"../core/Semi.html\">;</a> <a href=\"../core/IMMEDIATE.html\">IMMEDIATE</a> <br>\n        <a href=\"../core/Colon.html\">:</a> GE2 <a href=\"../core/Sq.html\">S\"</a> 123 1+\" <a href=\"../core/Semi.html\">;</a> <a href=\"../core/IMMEDIATE.html\">IMMEDIATE</a> <br>\n        <a href=\"../core/Colon.html\">:</a> GE3 <a href=\"../core/Sq.html\">S\"</a> <a href=\"../core/Colon.html\">:</a> GE4 345 <a href=\"../core/Semi.html\">;</a>\" <a href=\"../core/Semi.html\">;</a> <br>\n        <a href=\"../core/Colon.html\">:</a> GE5 <strong>EVALUATE</strong> <a href=\"../core/Semi.html\">;</a> <a href=\"../core/IMMEDIATE.html\">IMMEDIATE</a>\n        <p>\n        <span class=\"tt\">T{ GE1&nbsp;<strong>EVALUATE</strong> -&gt; 123 }T</span> <a href=\"../core/p.html\">(</a> TEST EVALUATE IN INTERP. STATE ) <br>\n        <span class=\"tt\">T{ GE2&nbsp;<strong>EVALUATE</strong> -&gt; 124 }T</span> <br>\n        <span class=\"tt\">T{ GE3&nbsp;<strong>EVALUATE</strong> -&gt; &nbsp;&nbsp;&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ GE4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -&gt; 345 }T</span>\n        </p><p>\n        <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;GE6&nbsp;GE1&nbsp;GE5&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span> <a href=\"../core/p.html\">(</a> TEST EVALUATE IN COMPILE STATE ) <br>\n        <span class=\"tt\">T{ GE6 -&gt; 123 }T</span> <br>\n        <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;GE7&nbsp;GE2&nbsp;GE5&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span> <br>\n        <span class=\"tt\">T{ GE7 -&gt; 124 }T</span>\n        </p><p>\n        <span class=\"rm\">See <a href=\"testsuite.html#test:throw\">F.9.3.6</a> for additional test.</span>\n        \n        \n        </p></div>\n      "
                    }
                }
            },
            "EXECUTE": {
                "id": "core:EXECUTE",
                "number": "6.1.1370",
                "name": "EXECUTE",
                "english": " ",
                "list": "CORE",
                "basename": "EXECUTE",
                "stackEffect": {
                    "html": {
                        " ": "( <em>i * x xt</em> -- <em>j * x</em> )"
                    },
                    "plain": {
                        " ": "( i * x xt -- j * x )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>i * x xt</em> -- <em>j * x</em> )\n      <p>\n      Remove <em>xt</em> from the stack and perform the semantics\n      identified by it. Other stack effects are due to the word\n      <strong>EXECUTE</strong>d.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/Tick.html\">6.1.0070 '</a>,\n      <a href=\"../core/BracketTick.html\">6.1.2510 [']</a>.\n      <p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.1370 EXECUTE -->\n      See <a href=\"../testsuite.html#test:core:'\">F.6.1.0070 '</a> and <a href=\"../testsuite.html#test:core:[']\">F.6.1.2510 [']</a>.\n      \n      \n      "
                    }
                }
            },
            "EXIT": {
                "id": "core:EXIT",
                "number": "6.1.1380",
                "name": "EXIT",
                "english": " ",
                "list": "CORE",
                "basename": "EXIT",
                "stackEffect": {
                    "html": {
                        "Execution:": "( -- )\n      ( R: <em>nest-sys</em> -- )"
                    },
                    "plain": {
                        "Execution:": "( -- )\n( R: nest-sys -- )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Execution:": {
                        "name": "Execution:",
                        "html": "\n\n\n      ( -- )\n      ( R: <em>nest-sys</em> -- )\n      <p>\n      Return control to the calling definition specified by\n      <em>nest-sys</em>. Before executing <strong>EXIT</strong> within a\n      do-loop, a program shall discard the loop-control parameters\n      by executing <a href=\"../core/UNLOOP.html\">UNLOOP</a>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:returnstack\">3.2.3.3 Return stack</a></strong>,\n      <a href=\"../core/UNLOOP.html\">6.1.2380 UNLOOP</a>,\n      <a href=\"../rationale.html#rat:core:EXIT\">A.6.1.1380 EXIT</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.1.1380 EXIT -->\n      Typical use:\n      <a href=\"../core/Colon.html\">:</a> <code>X</code> ...\n      <em>test</em> <a href=\"../core/IF.html\">IF</a>\n      ... <strong>EXIT</strong> <a href=\"../core/THEN.html\">THEN</a>\n      ... <a href=\"../core/Semi.html\">;</a>\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.1380 EXIT -->\n      See <a href=\"../testsuite.html#test:core:UNLOOP\">F.6.1.2380 UNLOOP</a>.\n      \n      \n      "
                    }
                }
            },
            "Equal": {
                "id": "core:=",
                "number": "6.1.0530",
                "name": "=",
                "english": "equals",
                "list": "CORE",
                "basename": "Equal",
                "stackEffect": {
                    "html": {
                        " ": "( <em>x<sub>1</sub> x<sub>2</sub></em> -- <em>flag</em> )"
                    },
                    "plain": {
                        " ": "( x1 x2 -- flag )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>x<sub>1</sub> x<sub>2</sub></em> -- <em>flag</em> )\n      <p>\n      <em>flag</em> is true if and only if <em>x<sub>1</sub></em> is bit-for-bit\n      the same as <em>x<sub>2</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0530 = -->\n      <span class=\"tt\">T{ &nbsp;0&nbsp;&nbsp;0&nbsp;<strong>=</strong> -&gt; &lt;TRUE&gt;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;1&nbsp;&nbsp;1&nbsp;<strong>=</strong> -&gt; &lt;TRUE&gt;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ -1&nbsp;-1&nbsp;<strong>=</strong> -&gt; &lt;TRUE&gt;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;1&nbsp;&nbsp;0&nbsp;<strong>=</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ -1&nbsp;&nbsp;0&nbsp;<strong>=</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;0&nbsp;&nbsp;1&nbsp;<strong>=</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;0&nbsp;-1&nbsp;<strong>=</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      \n      \n      "
                    }
                }
            },
            "FALSE": {
                "id": "core:FALSE",
                "number": "6.2.1485",
                "name": "FALSE",
                "english": " ",
                "list": "CORE EXT",
                "basename": "FALSE",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>false</em> )"
                    },
                    "plain": {
                        " ": "( -- false )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>false</em> )\n      <p>\n      Return a <em>false</em> flag.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:flags\">3.1.3.1 Flags</a></strong>\n      <p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      <span class=\"tt\">T{ <strong>FALSE</strong> -&gt; 0 }T</span> <br>\n      <span class=\"tt\">T{ <strong>FALSE</strong> -&gt; &lt;FALSE&gt; }T</span>\n      \n      \n      "
                    }
                }
            },
            "FILL": {
                "id": "core:FILL",
                "number": "6.1.1540",
                "name": "FILL",
                "english": " ",
                "list": "CORE",
                "basename": "FILL",
                "stackEffect": {
                    "html": {
                        " ": "( <em>c-addr u char</em> -- )"
                    },
                    "plain": {
                        " ": "( c-addr u char -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>c-addr u char</em> -- )\n      <p>\n      If <em>u</em> is greater than zero, store <em>char</em> in each of\n      <em>u</em> consecutive characters of memory beginning at\n      <em>c-addr</em>.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.1540 FILL -->\n      <span class=\"tt\">T{ FBUF&nbsp;0&nbsp;20&nbsp;<strong>FILL</strong> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ SEEBUF -&gt; 00&nbsp;00&nbsp;00 }T</span>\n      <p>\n      <span class=\"tt\">T{ FBUF&nbsp;1&nbsp;20&nbsp;<strong>FILL</strong> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ SEEBUF -&gt; 20&nbsp;00&nbsp;00 }T</span>\n      </p><p>\n      <span class=\"tt\">T{ FBUF&nbsp;3&nbsp;20&nbsp;<strong>FILL</strong> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ SEEBUF -&gt; 20&nbsp;20&nbsp;20 }T</span>\n      \n      \n      </p>"
                    }
                }
            },
            "FIND": {
                "id": "core:FIND",
                "number": "6.1.1550",
                "name": "FIND",
                "english": " ",
                "list": "CORE",
                "basename": "FIND",
                "stackEffect": {
                    "html": {
                        " ": "( <em>c-addr</em> -- <em>c-addr 0  |  xt 1  |  xt -1</em> )"
                    },
                    "plain": {
                        " ": "( c-addr -- c-addr 0  |  xt 1  |  xt -1 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>c-addr</em> -- <em>c-addr 0  |  xt 1  |  xt -1</em> )\n      <p>\n      Find the definition named in the counted string at <em>c-addr</em>.\n      If the definition is not found, return <em>c-addr</em> and zero.\n      If the definition is found, return its execution token <em>xt</em>.\n      If the definition is immediate, also return one (<em>1</em>),\n      otherwise also return minus-one (<em>-1</em>). For a given string,\n      the values returned by <strong>FIND</strong> while compiling may differ\n      from those returned while not compiling.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:find\">3.4.2 Finding definition names</a></strong>,\n      <a href=\"../rationale.html#rat:core:'\">A.6.1.0070 '</a>,\n      <a href=\"../rationale.html#rat:core:FIND\">A.6.1.1550 FIND</a>, <br>\n      <a href=\"../rationale.html#rat:core:POSTPONE\">A.6.1.2033 POSTPONE</a>,\n      <a href=\"../rationale.html#rat:core:[']\">A.6.1.2510 [']</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.1.1550 FIND -->\n      One of the more difficult issues which the committee took on\n      was the problem of divorcing the specification of\n      implementation mechanisms from the specification of the\n      Forth language. Three basic implementation approaches can be\n      quickly enumerated:\n      <p>\n      </p><ol style=\"list-style-type: decimal\">\n      <li> Threaded code mechanisms.\n      These are the traditional approaches to implementing Forth,\n      but other techniques may be used.\n      <p>\n      </p></li>\n      <li> Subroutine threading with \"macro-expansion\" (code\n      copying). Short routines, like the code for <a href=\"../core/DUP.html\">DUP</a>,\n      are copied into a definition rather than compiling a\n      <code>JSR</code> reference.\n      <p>\n      </p></li>\n      <li> Native coding with optimization.\n      This may include stack optimization (replacing such phrases\n      as <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../core/ROT.html\">ROT</a> <a href=\"../core/Plus.html\">+</a> with one or two machine\n      instructions, for example), parallelization (the trend in\n      the newer RISC chips is to have several functional subunits\n      which can execute in parallel), and so on.\n      </li>\n</ol>\n      <p>\n      The initial requirement (inherited from Forth 83) that\n      compilation addresses be compiled into the dictionary\n      disallowed type 2 and type 3 implementations.\n      </p><p>\n      Type 3 mechanisms and optimizations of type 2 implementations\n      were hampered by the explicit specification of immediacy or\n      non-immediacy of all standard words. <a href=\"../core/POSTPONE.html\">POSTPONE</a> allowed\n      de-specification of immediacy or non-immediacy for all but a\n      few Forth words whose behavior must be <a href=\"../core/STATE.html\">STATE</a>-independent.\n      </p><p>\n      One type 3 implementation, Charles Moore's cmForth, has both\n      compiling and interpreting versions of many Forth words. At the\n      present, this appears to be a common approach for type 3\n      implementations. The committee felt that this implementation\n      approach must be allowed. Consequently, it is possible that\n      words without interpretation semantics can be found only during\n      compilation, and other words may exist in two versions: a\n      compiling version and an interpreting version. Hence the values\n      returned by <strong>FIND</strong> may depend on <a href=\"../core/STATE.html\">STATE</a>, and <a href=\"../core/Tick.html\">'</a>\n      and <a href=\"../core/BracketTick.html\">[']</a> may be unable to find words without\n      interpretation semantics.\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.1550 FIND -->\n            <div class=\"tt\">\n<a href=\"../core/HERE.html\">HERE</a>\n        3 <a href=\"../core/CComma.html\">C,</a>\n        <a href=\"../core/CHAR.html\">CHAR</a> G <a href=\"../core/CComma.html\">C,</a>\n        <a href=\"../core/CHAR.html\">CHAR</a> T <a href=\"../core/CComma.html\">C,</a>\n        <a href=\"../core/CHAR.html\">CHAR</a> 1 <a href=\"../core/CComma.html\">C,</a>\n        <a href=\"../core/CONSTANT.html\">CONSTANT</a> GT1STRING <br>\n        <a href=\"../core/HERE.html\">HERE</a>\n        3 <a href=\"../core/CComma.html\">C,</a>\n        <a href=\"../core/CHAR.html\">CHAR</a> G <a href=\"../core/CComma.html\">C,</a>\n        <a href=\"../core/CHAR.html\">CHAR</a> T <a href=\"../core/CComma.html\">C,</a>\n        <a href=\"../core/CHAR.html\">CHAR</a> 2 <a href=\"../core/CComma.html\">C,</a>\n        <a href=\"../core/CONSTANT.html\">CONSTANT</a> GT2STRING <br>\n        <span class=\"tt\">T{ GT1STRING&nbsp;<strong>FIND</strong> -&gt; <a href=\"../core/Tick.html\">'</a>&nbsp;GT1&nbsp;-1 }T</span> <br>\n        <span class=\"tt\">T{ GT2STRING&nbsp;<strong>FIND</strong> -&gt; <a href=\"../core/Tick.html\">'</a>&nbsp;GT2&nbsp;1&nbsp; }T</span> <br>\n        <a href=\"../core/p.html\">(</a> HOW TO SEARCH FOR NON-EXISTENT WORD? )\n        \n        \n        </div>\n      "
                    }
                }
            },
            "FMDivMOD": {
                "id": "core:FM/MOD",
                "number": "6.1.1561",
                "name": "FM/MOD",
                "english": "f-m-slash-mod",
                "list": "CORE",
                "basename": "FMDivMOD",
                "stackEffect": {
                    "html": {
                        " ": "( <em>d<sub>1</sub> n<sub>1</sub></em> -- <em>n<sub>2</sub> n<sub>3</sub></em> )"
                    },
                    "plain": {
                        " ": "( d1 n1 -- n2 n3 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>d<sub>1</sub> n<sub>1</sub></em> -- <em>n<sub>2</sub> n<sub>3</sub></em> )\n      <p>\n      Divide <em>d<sub>1</sub></em> by <em>n<sub>1</sub></em>, giving the floored quotient\n      <em>n<sub>3</sub></em> and the remainder <em>n<sub>2</sub></em>. Input and output stack\n      arguments are signed. An ambiguous condition exists if\n      <em>n<sub>1</sub></em> is zero or if the quotient lies outside the range of\n      a single-cell signed integer.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:div\">3.2.2.1 Integer division</a></strong>,\n      <a href=\"../core/SMDivREM.html\">6.1.2214 SM/REM</a>,\n      <a href=\"../core/UMDivMOD.html\">6.1.2370 UM/MOD</a>,\n      <a href=\"../rationale.html#rat:core:FM/MOD\">A.6.1.1561 FM/MOD</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.1.1561 FM/MOD -->\n      By introducing the requirement for \"floored\" division,\n      Forth 83 produced much controversy and concern on the part of\n      those who preferred the more common practice followed in other\n      languages of implementing division according to the behavior\n      of the host CPU, which is most often symmetric (rounded toward\n      zero). In attempting to find a compromise position, this\n      standard provides primitives for both common varieties, floored\n      and symmetric (see <a href=\"../core/SMDivREM.html\">SM/REM</a>). <strong>FM/MOD</strong> is the floored\n      version.\n      <p>\n      The committee considered providing two complete sets\n      of explicitly named division operators, and declined to do so\n      on the grounds that this would unduly enlarge and complicate\n      the standard. Instead, implementors may define the normal\n      division words in terms of either <strong>FM/MOD</strong> or\n      <a href=\"../core/SMDivREM.html\">SM/REM</a> providing they document their choice. People\n      wishing to have explicitly named sets of operators are\n      encouraged to do so. <strong>FM/MOD</strong> may be used, for example,\n      to define:\n      </p><p>\n            </p><div class=\"quote\">\n        <div class=\"tt\">\n<a href=\"../core/Colon.html\">:</a> /_MOD <a href=\"../core/p.html\">(</a> n1 n2 -- n3 n4)\n          <a href=\"../core/toR.html\">&gt;R</a> <a href=\"../core/StoD.html\">S&gt;D</a> <a href=\"../core/Rfrom.html\">R&gt;</a> <strong>FM/MOD</strong>\n          <a href=\"../core/Semi.html\">;</a>\n          <p>\n          <a href=\"../core/Colon.html\">:</a> /_ <a href=\"../core/p.html\">(</a> n1 n2 -- n3)\n          /_MOD <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../core/DROP.html\">DROP</a>\n          <a href=\"../core/Semi.html\">;</a>\n          </p><p>\n          <a href=\"../core/Colon.html\">:</a> _MOD <a href=\"../core/p.html\">(</a> n1 n2 -- n3)\n          /_MOD <a href=\"../core/DROP.html\">DROP</a>\n          <a href=\"../core/Semi.html\">;</a>\n          </p><p>\n          <a href=\"../core/Colon.html\">:</a> */_MOD <a href=\"../core/p.html\">(</a> n1 n2 n3 -- n4 n5)\n          <a href=\"../core/toR.html\">&gt;R</a> <a href=\"../core/MTimes.html\">M*</a> <a href=\"../core/Rfrom.html\">R&gt;</a> <strong>FM/MOD</strong>\n          <a href=\"../core/Semi.html\">;</a>\n          </p><p>\n          <a href=\"../core/Colon.html\">:</a> */_ <a href=\"../core/p.html\">(</a> n1 n2 n3 -- n4 )\n          */_MOD <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../core/DROP.html\">DROP</a>\n          <a href=\"../core/Semi.html\">;</a>\n          \n          </p></div>\n        </div>\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.1561 FM/MOD -->\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>FM/MOD</strong> -&gt; &nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>FM/MOD</strong> -&gt; &nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>FM/MOD</strong> -&gt; &nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>FM/MOD</strong> -&gt; &nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>FM/MOD</strong> -&gt; &nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>FM/MOD</strong> -&gt; &nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>FM/MOD</strong> -&gt; &nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>FM/MOD</strong> -&gt; &nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>FM/MOD</strong> -&gt; &nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>FM/MOD</strong> -&gt; &nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;<strong>FM/MOD</strong> -&gt; &nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>FM/MOD</strong> -&gt; &nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2&nbsp;<strong>FM/MOD</strong> -&gt; &nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;<strong>FM/MOD</strong> -&gt; &nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-3&nbsp;<strong>FM/MOD</strong> -&gt; -2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-3 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-7&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;<strong>FM/MOD</strong> -&gt; &nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-3 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-7&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-3&nbsp;<strong>FM/MOD</strong> -&gt; -1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2 }T</span> <br>\n      <span class=\"tt\">T{ MAX-INT&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>FM/MOD</strong> -&gt; &nbsp;0&nbsp;MAX-INT }T</span> <br>\n      <span class=\"tt\">T{ MIN-INT&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>FM/MOD</strong> -&gt; &nbsp;0&nbsp;MIN-INT }T</span> <br>\n      <span class=\"tt\">T{ MAX-INT&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MAX-INT&nbsp;<strong>FM/MOD</strong> -&gt; &nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 }T</span> <br>\n      <span class=\"tt\">T{ MIN-INT&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MIN-INT&nbsp;<strong>FM/MOD</strong> -&gt; &nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;1S&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;<strong>FM/MOD</strong> -&gt; &nbsp;3&nbsp;MAX-INT }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;MIN-INT&nbsp;<a href=\"../core/MTimes.html\">M*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>FM/MOD</strong> -&gt; &nbsp;0&nbsp;MIN-INT }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;MIN-INT&nbsp;<a href=\"../core/MTimes.html\">M*</a>&nbsp;MIN-INT&nbsp;<strong>FM/MOD</strong> -&gt; &nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;MIN-INT&nbsp;<a href=\"../core/MTimes.html\">M*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;<strong>FM/MOD</strong> -&gt; &nbsp;0&nbsp;MIN-INT }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;MIN-INT&nbsp;<a href=\"../core/MTimes.html\">M*</a>&nbsp;MIN-INT&nbsp;<strong>FM/MOD</strong> -&gt; &nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;MAX-INT&nbsp;<a href=\"../core/MTimes.html\">M*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>FM/MOD</strong> -&gt; &nbsp;0&nbsp;MAX-INT }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;MAX-INT&nbsp;<a href=\"../core/MTimes.html\">M*</a>&nbsp;MAX-INT&nbsp;<strong>FM/MOD</strong> -&gt; &nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;MAX-INT&nbsp;<a href=\"../core/MTimes.html\">M*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;<strong>FM/MOD</strong> -&gt; &nbsp;0&nbsp;MAX-INT }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;MAX-INT&nbsp;<a href=\"../core/MTimes.html\">M*</a>&nbsp;MAX-INT&nbsp;<strong>FM/MOD</strong> -&gt; &nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2 }T</span> <br>\n      <span class=\"tt\">T{ MIN-INT&nbsp;MIN-INT&nbsp;<a href=\"../core/MTimes.html\">M*</a>&nbsp;MIN-INT&nbsp;<strong>FM/MOD</strong> -&gt; &nbsp;0&nbsp;MIN-INT }T</span> <br>\n      <span class=\"tt\">T{ MIN-INT&nbsp;MAX-INT&nbsp;<a href=\"../core/MTimes.html\">M*</a>&nbsp;MIN-INT&nbsp;<strong>FM/MOD</strong> -&gt; &nbsp;0&nbsp;MAX-INT }T</span> <br>\n      <span class=\"tt\">T{ MIN-INT&nbsp;MAX-INT&nbsp;<a href=\"../core/MTimes.html\">M*</a>&nbsp;MAX-INT&nbsp;<strong>FM/MOD</strong> -&gt; &nbsp;0&nbsp;MIN-INT }T</span> <br>\n      <span class=\"tt\">T{ MAX-INT&nbsp;MAX-INT&nbsp;<a href=\"../core/MTimes.html\">M*</a>&nbsp;MAX-INT&nbsp;<strong>FM/MOD</strong> -&gt; &nbsp;0&nbsp;MAX-INT }T</span>\n      \n      \n      "
                    }
                }
            },
            "Fetch": {
                "id": "core:@",
                "number": "6.1.0650",
                "name": "@",
                "english": "fetch",
                "list": "CORE",
                "basename": "Fetch",
                "stackEffect": {
                    "html": {
                        " ": "( <em>a-addr</em> -- <em>x</em> )"
                    },
                    "plain": {
                        " ": "( a-addr -- x )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>a-addr</em> -- <em>x</em> )\n      <p>\n      <em>x</em> is the value stored at <em>a-addr</em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:aaddr\">3.3.3.1 Address alignment</a></strong>.\n      <p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0650 @ -->\n      See <a href=\"../testsuite.html#test:core:,\">F.6.1.0150 ,</a>.\n      \n      \n      "
                    }
                }
            },
            "HERE": {
                "id": "core:HERE",
                "number": "6.1.1650",
                "name": "HERE",
                "english": " ",
                "list": "CORE",
                "basename": "HERE",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>addr</em> )"
                    },
                    "plain": {
                        " ": "( -- addr )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>addr</em> )\n      <p>\n      <em>addr</em> is the data-space pointer.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:contiguous\">3.3.3.2 Contiguous regions</a></strong>.\n      <p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.1650 HERE -->\n      See <a href=\"../testsuite.html#test:core:,\">F.6.1.0150 ,</a>,\n      <a href=\"../testsuite.html#test:core:ALLOT\">F.6.1.0710 ALLOT</a>,\n      <a href=\"../testsuite.html#test:core:C,\">F.6.1.0860 C,</a>.\n      \n      \n      "
                    }
                }
            },
            "HEX": {
                "id": "core:HEX",
                "number": "6.2.1660",
                "name": "HEX",
                "english": " ",
                "list": "CORE EXT",
                "basename": "HEX",
                "stackEffect": {
                    "html": {
                        " ": "( -- )"
                    },
                    "plain": {
                        " ": "( -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- )\n      <p>\n      Set contents of <a href=\"../core/BASE.html\">BASE</a> to sixteen.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.2.1660 HEX -->\n      See <a href=\"../testsuite.html#test:core:BASE\">F.6.1.0750 BASE</a>.\n      \n      \n      "
                    }
                }
            },
            "HOLD": {
                "id": "core:HOLD",
                "number": "6.1.1670",
                "name": "HOLD",
                "english": " ",
                "list": "CORE",
                "basename": "HOLD",
                "stackEffect": {
                    "html": {
                        " ": "( <em>char</em> -- )"
                    },
                    "plain": {
                        " ": "( char -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>char</em> -- )\n      <p>\n      Add <em>char</em> to the beginning of the pictured numeric output\n      string. An ambiguous condition exists if <strong>HOLD</strong> executes\n      outside of a <a href=\"../core/num-start.html\">&lt;#</a> <a href=\"../core/num-end.html\">#&gt;</a> delimited number\n      conversion.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.1670 HOLD -->\n            <div class=\"tt\">\n<a href=\"../core/Colon.html\">:</a> GP1  <a href=\"../core/num-start.html\">&lt;#</a> 41 <strong>HOLD</strong> 42 <strong>HOLD</strong> 0 0 <a href=\"../core/num-end.html\">#&gt;</a> <a href=\"../core/Sq.html\">S\"</a> BA\" S= <a href=\"../core/Semi.html\">;</a> <br>\n        <span class=\"tt\">T{ GP1 -&gt; &lt;TRUE&gt; }T</span>\n        \n        \n        </div>\n      "
                    }
                }
            },
            "HOLDS": {
                "id": "core:HOLDS",
                "number": "6.2.1675",
                "name": "HOLDS",
                "english": " ",
                "list": "CORE EXT",
                "basename": "HOLDS",
                "stackEffect": {
                    "html": {
                        " ": "( <em>c-addr u</em> -- )"
                    },
                    "plain": {
                        " ": "( c-addr u -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>c-addr u</em> -- )\n      <p>\n      Adds the string represented by <em>c-addr u</em> to the pictured numeric\n      output string.  An ambiguous condition exists if <strong>HOLDS</strong> executes\n      outside of a <a href=\"../core/num-start.html\">&lt;#</a> <a href=\"../core/num-end.html\">#&gt;</a> delimited number conversion.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/HOLD.html\">6.1.1670 HOLD</a>.\n      <p>\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n\n      <a href=\"../core/Colon.html\">:</a> <strong>HOLDS</strong> <a href=\"../core/p.html\">(</a> addr u -- ) <br>\n      &nbsp;&nbsp; <a href=\"../core/BEGIN.html\">BEGIN</a> <a href=\"../core/DUP.html\">DUP</a> <a href=\"../core/WHILE.html\">WHILE</a> <a href=\"../core/OneMinus.html\">1-</a> <a href=\"../core/TwoDUP.html\">2DUP</a> <a href=\"../core/Plus.html\">+</a>\n      <a href=\"../core/CFetch.html\">C@</a> <a href=\"../core/HOLD.html\">HOLD</a> <a href=\"../core/REPEAT.html\">REPEAT</a> <a href=\"../core/TwoDROP.html\">2DROP</a> <a href=\"../core/Semi.html\">;</a>\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      <span class=\"tt\">T{ 0.&nbsp;<a href=\"../core/num-start.html\">&lt;#</a>&nbsp;<a href=\"../file/Sq.html\">S\"</a>&nbsp;Test\"&nbsp;<strong>HOLDS</strong>&nbsp;<a href=\"../core/num-end.html\">#&gt;</a>&nbsp;<a href=\"../file/Sq.html\">S\"</a>&nbsp;Test\"&nbsp;<a href=\"../string/COMPARE.html\">COMPARE</a> -&gt; 0 }T</span>\n      \n      \n      "
                    }
                }
            },
            "I": {
                "id": "core:I",
                "number": "6.1.1680",
                "name": "I",
                "english": " ",
                "list": "CORE",
                "basename": "I",
                "stackEffect": {
                    "html": {
                        "Execution:": "( -- <em>n | u</em> )\n      ( R: <em>loop-sys</em> -- <em>loop-sys</em> )"
                    },
                    "plain": {
                        "Execution:": "( -- n | u )\n( R: loop-sys -- loop-sys )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Execution:": {
                        "name": "Execution:",
                        "html": "\n\n\n      ( -- <em>n | u</em> )\n      ( R: <em>loop-sys</em> -- <em>loop-sys</em> )\n      <p>\n      <em>n | u</em> is a copy of the current (innermost) loop index.\n      An ambiguous condition exists if the loop control parameters\n      are unavailable.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.1680 I -->\n      See <a href=\"../testsuite.html#test:core:LOOP\">F.6.1.1800 LOOP</a>,\n      <a href=\"../testsuite.html#test:core:+LOOP\">F.6.1.0140 +LOOP</a>,\n      <a href=\"../testsuite.html#test:core:J\">F.6.1.1730 J</a>,\n      <a href=\"../testsuite.html#test:core:LEAVE\">F.6.1.1760 LEAVE</a>,\n      <a href=\"../testsuite.html#test:core:UNLOOP\">F.6.1.2380 UNLOOP</a>.\n      \n      \n      "
                    }
                }
            },
            "IF": {
                "id": "core:IF",
                "number": "6.1.1700",
                "name": "IF",
                "english": " ",
                "list": "CORE",
                "basename": "IF",
                "stackEffect": {
                    "html": {
                        "Compilation:": "( C: -- <em>orig</em> )",
                        "Run-time:": "( <em>x</em> -- )"
                    },
                    "plain": {
                        "Compilation:": "( C: -- orig )",
                        "Run-time:": "( x -- )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      ( C: -- <em>orig</em> )\n      <p>\n      Put the location of a new unresolved forward reference\n      <em>orig</em> onto the control flow stack. Append the run-time\n      semantics given below to the current definition. The semantics\n      are incomplete until <em>orig</em> is resolved, e.g., by\n      <a href=\"../core/THEN.html\">THEN</a> or <a href=\"../core/ELSE.html\">ELSE</a>.\n      </p><p>\n        \n      </p>"
                    },
                    "Run-time:": {
                        "name": "Run-time:",
                        "html": "\n\n\n      ( <em>x</em> -- )\n      <p>\n      If all bits of <em>x</em> are zero, continue execution at the\n      location specified by the resolution of <em>orig</em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:controlstack\">3.2.3.2 Control-flow stack</a></strong>,\n      <a href=\"../core/ELSE.html\">6.1.1310 ELSE</a>,\n      <a href=\"../core/THEN.html\">6.1.2270 THEN</a>,\n      <a href=\"../rationale.html#rat:core:IF\">A.6.1.1700 IF</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.1.1700 IF -->\n      Typical use:\n      <p>\n      &nbsp;&nbsp; <a href=\"../core/Colon.html\">:</a> <code>X</code> ...\n      <em>test</em> <strong>IF</strong> ... <a href=\"../core/THEN.html\">THEN</a>\n      ... <a href=\"../core/Semi.html\">;</a>\n      </p><p>\n      or\n      </p><p>\n      &nbsp;&nbsp; <a href=\"../core/Colon.html\">:</a> <code>X</code> ...\n      <em>test</em> <strong>IF</strong>\n      ... <a href=\"../core/ELSE.html\">ELSE</a> ... <a href=\"../core/THEN.html\">THEN</a>\n      ... <a href=\"../core/Semi.html\">;</a>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.1700 IF -->\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;GI1&nbsp;<strong>IF</strong>&nbsp;123&nbsp;<a href=\"../core/THEN.html\">THEN</a>&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;GI2&nbsp;<strong>IF</strong>&nbsp;123&nbsp;<a href=\"../core/ELSE.html\">ELSE</a>&nbsp;234&nbsp;<a href=\"../core/THEN.html\">THEN</a>&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;0&nbsp;GI1 -&gt; &nbsp;&nbsp;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;1&nbsp;GI1 -&gt; 123 }T</span> <br>\n      <span class=\"tt\">T{ -1&nbsp;GI1 -&gt; 123 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;0&nbsp;GI2 -&gt; 234 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;1&nbsp;GI2 -&gt; 123 }T</span> <br>\n      <span class=\"tt\">T{ -1&nbsp;GI1 -&gt; 123 }T</span>\n      <p>\n      <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Multiple <a href=\"../core/ELSE.html\">ELSE</a>s in an <strong>IF</strong> statement</span> <br>\n      <a href=\"../core/Colon.html\">:</a> melse <strong>IF</strong> 1 <a href=\"../core/ELSE.html\">ELSE</a> 2 <a href=\"../core/ELSE.html\">ELSE</a> 3 <a href=\"../core/ELSE.html\">ELSE</a> 4 <a href=\"../core/ELSE.html\">ELSE</a> 5 <a href=\"../core/THEN.html\">THEN</a> <a href=\"../core/Semi.html\">;</a> <br>\n      <span class=\"tt\">T{ &lt;FALSE&gt;&nbsp;melse -&gt; 2&nbsp;4 }T</span> <br>\n      <span class=\"tt\">T{ &lt;TRUE&gt;&nbsp;&nbsp;melse -&gt; 1&nbsp;3&nbsp;5 }T</span>\n      \n      \n      </p>"
                    }
                }
            },
            "IMMEDIATE": {
                "id": "core:IMMEDIATE",
                "number": "6.1.1710",
                "name": "IMMEDIATE",
                "english": " ",
                "list": "CORE",
                "basename": "IMMEDIATE",
                "stackEffect": {
                    "html": {
                        " ": "( -- )"
                    },
                    "plain": {
                        " ": "( -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- )\n      <p>\n      Make the most recent definition an immediate word. An ambiguous\n      condition exists if the most recent definition does not have a\n      name or if it was defined as a <a href=\"../tools/SYNONYM.html\">SYNONYM</a>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../tools/SYNONYM.html\">15.6.2.2264 SYNONYM</a>\n      <a href=\"../rationale.html#rat:core:IMMEDIATE\">A.6.1.1710 IMMEDIATE</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.1.1710 IMMEDIATE -->\n      Typical use:\n      <a href=\"../core/Colon.html\">:</a> <code>X</code>\n      ... <a href=\"../core/Semi.html\">;</a> <strong>IMMEDIATE</strong>\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.1710 IMMEDIATE -->\n      <span class=\"tt\">T{ 123&nbsp;<a href=\"../core/CONSTANT.html\">CONSTANT</a>&nbsp;iw1&nbsp;<strong>IMMEDIATE</strong>&nbsp;iw1 -&gt; 123 }T</span> <br>\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;iw2&nbsp;iw1&nbsp;<a href=\"../core/LITERAL.html\">LITERAL</a>&nbsp;<a href=\"../core/Semi.html\">;</a>&nbsp;iw2 -&gt; 123 }T</span>\n      <p>\n      <span class=\"tt\">T{ <a href=\"../core/VARIABLE.html\">VARIABLE</a>&nbsp;iw3&nbsp;<strong>IMMEDIATE</strong>&nbsp;234&nbsp;iw3&nbsp;<a href=\"../core/Store.html\">!</a>&nbsp;iw3&nbsp;<a href=\"../core/Fetch.html\">@</a> -&gt; 234 }T</span> <br>\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;iw4&nbsp;iw3&nbsp;<a href=\"../core/Bracket.html\">[</a>&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<a href=\"../right-bracket.html\">]</a>&nbsp;<a href=\"../core/LITERAL.html\">LITERAL</a>&nbsp;<a href=\"../core/Semi.html\">;</a>&nbsp;iw4 -&gt; 234 }T</span>\n      </p><p>\n      <span class=\"tt\">T{ <a href=\"../core/ColonNONAME.html\">:NONAME</a>&nbsp;<a href=\"../core/Bracket.html\">[</a>&nbsp;345&nbsp;<a href=\"../right-bracket.html\">]</a>&nbsp;iw3&nbsp;<a href=\"../core/Bracket.html\">[</a>&nbsp;<a href=\"../core/Store.html\">!</a>&nbsp;<a href=\"../right-bracket.html\">]</a>&nbsp;<a href=\"../core/Semi.html\">;</a>&nbsp;<a href=\"../core/DROP.html\">DROP</a>&nbsp;iw3&nbsp;<a href=\"../core/Fetch.html\">@</a> -&gt; 345 }T</span> <br>\n      <span class=\"tt\">T{ <a href=\"../core/CREATE.html\">CREATE</a>&nbsp;iw5&nbsp;456&nbsp;<a href=\"../core/Comma.html\">,</a>&nbsp;<strong>IMMEDIATE</strong> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ <a href=\"../core/ColonNONAME.html\">:NONAME</a>&nbsp;iw5&nbsp;<a href=\"../core/Bracket.html\">[</a>&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;iw3&nbsp;<a href=\"../core/Store.html\">!</a>&nbsp;<a href=\"../right-bracket.html\">]</a>&nbsp;<a href=\"../core/Semi.html\">;</a>&nbsp;<a href=\"../core/DROP.html\">DROP</a>&nbsp;iw3&nbsp;<a href=\"../core/Fetch.html\">@</a> -&gt; 456 }T</span>\n      </p><p>\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;iw6&nbsp;<a href=\"../core/CREATE.html\">CREATE</a>&nbsp;<a href=\"../core/Comma.html\">,</a>&nbsp;<strong>IMMEDIATE</strong>&nbsp;<a href=\"../core/DOES.html\">DOES&gt;</a>&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<a href=\"../core/OnePlus.html\">1+</a>&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ 111&nbsp;iw6&nbsp;iw7&nbsp;iw7 -&gt; 112 }T</span> <br>\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;iw8&nbsp;iw7&nbsp;<a href=\"../core/LITERAL.html\">LITERAL</a>&nbsp;<a href=\"../core/OnePlus.html\">1+</a>&nbsp;<a href=\"../core/Semi.html\">;</a>&nbsp;iw8 -&gt; 113 }T</span>\n      </p><p>\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;iw9&nbsp;<a href=\"../core/CREATE.html\">CREATE</a>&nbsp;<a href=\"../core/Comma.html\">,</a>&nbsp;<a href=\"../core/DOES.html\">DOES&gt;</a>&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;2&nbsp;<a href=\"../core/Plus.html\">+</a>&nbsp;<strong>IMMEDIATE</strong>&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span> <br>\n      <a href=\"../core/Colon.html\">:</a> find-iw <a href=\"../core/BL.html\">BL</a> <a href=\"../core/WORD.html\">WORD</a> <a href=\"../core/FIND.html\">FIND</a> <a href=\"../core/NIP.html\">NIP</a> <a href=\"../core/Semi.html\">;</a> <br>\n      <span class=\"tt\">T{ 222&nbsp;iw9&nbsp;iw10&nbsp;find-iw&nbsp;iw10 -&gt; -1 }T</span> &nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">iw10 is not immediate</span> <br>\n      <span class=\"tt\">T{ iw10&nbsp;find-iw&nbsp;iw10 -&gt; 224&nbsp;1 }T</span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">iw10 becomes immediate</span>\n      </p><p>\n      See <a href=\"../testsuite.html#test:core:[']\">F.6.1.2510 [']</a>,\n      <a href=\"../testsuite.html#test:core:POSTPONE\">F.6.1.2033 POSTPONE</a>,\n      <a href=\"../testsuite.html#test:core:STATE\">F.6.1.2250 STATE</a>,\n      <a href=\"../testsuite.html#test:core:Sq\">F.6.1.2165 S\"</a>.\n      \n      \n      </p>"
                    }
                }
            },
            "INVERT": {
                "id": "core:INVERT",
                "number": "6.1.1720",
                "name": "INVERT",
                "english": " ",
                "list": "CORE",
                "basename": "INVERT",
                "stackEffect": {
                    "html": {
                        " ": "( <em>x<sub>1</sub></em> -- <em>x<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( x1 -- x2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>x<sub>1</sub></em> -- <em>x<sub>2</sub></em> )\n      <p>\n      Invert all bits of <em>x<sub>1</sub></em>, giving its logical inverse\n      <em>x<sub>2</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/NEGATE.html\">6.1.1910 NEGATE</a>,\n      <a href=\"../core/ZeroEqual.html\">6.1.0270 0=</a>,\n      <a href=\"../rationale.html#rat:core:INVERT\">A.6.1.1720 INVERT</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.1.1720 INVERT -->\n      The word <code>NOT</code> was originally provided in Forth as a\n      flag operator to make control structures readable. Under its\n      intended usage the following two definitions would produce\n      identical results:\n      <p>\n            </p><div class=\"quote\">\n        <div class=\"tt\">\n<a href=\"../core/Colon.html\">:</a> ONE <a href=\"../core/p.html\">(</a> flag -- ) <br>\n          &nbsp;&nbsp; <a href=\"../core/IF.html\">IF</a>\n          <a href=\"../core/Dotq.html\">.\"</a> true\"\n          <a href=\"../core/ELSE.html\">ELSE</a>\n          <a href=\"../core/Dotq.html\">.\"</a> false\"\n          <a href=\"../core/THEN.html\">THEN</a>\n          <a href=\"../core/Semi.html\">;</a>\n          <p>\n          <a href=\"../core/Colon.html\">:</a> TWO <a href=\"../core/p.html\">(</a> flag -- ) <br>\n          &nbsp;&nbsp; NOT <a href=\"../core/IF.html\">IF</a>\n          <a href=\"../core/Dotq.html\">.\"</a> false\"\n          <a href=\"../core/ELSE.html\">ELSE</a>\n          <a href=\"../core/Dotq.html\">.\"</a> true\"\n          <a href=\"../core/THEN.html\">THEN</a>\n          <a href=\"../core/Semi.html\">;</a>\n          \n          </p></div>\n        </div>\n      <p>\n      This was common usage prior to the Forth-83 Standard which\n      redefined <code>NOT</code> as a cell-wide one's-complement\n      operation, functionally equivalent to the phrase <code>-1</code>\n      <a href=\"../core/XOR.html\">XOR</a>. At the same time, the data type manipulated by\n      this word was changed from a flag to a cell-wide collection of\n      bits and the standard value for true was changed from \"1\"\n      (rightmost bit only set) to \"-1\" (all bits set). As these\n      definitions of <a href=\"../core/TRUE.html\">TRUE</a> and <code>NOT</code> were incompatible\n      with their previous definitions, many Forth users continue to\n      rely on the old definitions. Hence both versions are in common\n      use.\n      </p><p>\n      Therefore, usage of <code>NOT</code> cannot be standardized at\n      this time. The two traditional meanings of <code>NOT</code> —\n      that of negating the sense of a flag and that of doing a one's\n      complement operation — are made available by <a href=\"../core/ZeroEqual.html\">0=</a> and\n      <strong>INVERT</strong>, respectively.\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.1720 INVERT -->\n      <span class=\"tt\">T{ 0S&nbsp;<strong>INVERT</strong> -&gt; 1S }T</span> <br>\n      <span class=\"tt\">T{ 1S&nbsp;<strong>INVERT</strong> -&gt; 0S }T</span>\n      \n      \n      "
                    }
                }
            },
            "IS": {
                "id": "core:IS",
                "number": "6.2.1725",
                "name": "IS",
                "english": " ",
                "list": "CORE EXT",
                "basename": "IS",
                "stackEffect": {
                    "html": {
                        "Interpretation:": "( <em>xt \"&lt;spaces&gt;name\"</em> -- )",
                        "Compilation:": "( <em>\"&lt;spaces&gt;name\"</em> -- )",
                        "Run-time:": "( <em>xt</em> -- )"
                    },
                    "plain": {
                        "Interpretation:": "( xt \"<spaces>name\" -- )",
                        "Compilation:": "( \"<spaces>name\" -- )",
                        "Run-time:": "( xt -- )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      ( <em>xt \"&lt;spaces&gt;name\"</em> -- )\n      <p>\n      Skip leading spaces and parse <em>name</em> delimited by a space.\n      Set <em>name</em> to execute <em>xt</em>.\n      </p><p>\n      An ambiguous condition exists if <em>name</em> was not defined\n      by <a href=\"../core/DEFER.html\">DEFER</a>.\n      </p><p>\n        \n      </p>"
                    },
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      ( <em>\"&lt;spaces&gt;name\"</em> -- )\n      <p>\n      Skip leading spaces and parse <em>name</em> delimited by a space.\n      Append the run-time semantics given below to the current definition.\n      An ambiguous condition exists if <em>name</em> was not defined by\n      <a href=\"../core/DEFER.html\">DEFER</a>.\n      </p><p>\n        \n      </p>"
                    },
                    "Run-time:": {
                        "name": "Run-time:",
                        "html": "\n\n\n      ( <em>xt</em> -- )\n      <p>\n      Set <em>name</em> to execute <em>xt</em>.\n      </p><p>\n      An ambiguous condition exists if <a href=\"../core/POSTPONE.html\">POSTPONE</a>, <a href=\"../core/BracketCOMPILE.html\">[COMPILE]</a>,\n      <a href=\"../core/BracketTick.html\">[']</a> or <a href=\"../core/Tick.html\">'</a> is applied to <strong>IS</strong>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/ACTION-OF.html\">6.2.0698 ACTION-OF</a>,\n      <a href=\"../core/DEFER.html\">6.2.1173 DEFER</a>,\n      <a href=\"../core/DEFERStore.html\">6.2.1175 DEFER!</a>,\n      <a href=\"../core/DEFERFetch.html\">6.2.1177 DEFER@</a>.\n      <p>\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n <!-- I.6.2.---- IS -->\n      <a href=\"../core/Colon.html\">:</a> <strong>IS</strong> <br>\n      &nbsp;&nbsp; <a href=\"../core/STATE.html\">STATE</a> <a href=\"../core/Fetch.html\">@</a> <a href=\"../core/IF.html\">IF</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/POSTPONE.html\">POSTPONE</a> <a href=\"../core/BracketTick.html\">[']</a> <a href=\"../core/POSTPONE.html\">POSTPONE</a> <a href=\"../core/DEFERStore.html\">DEFER!</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/ELSE.html\">ELSE</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/Tick.html\">'</a> <a href=\"../core/DEFERStore.html\">DEFER!</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/THEN.html\">THEN</a> <a href=\"../core/Semi.html\">;</a> <a href=\"../core/IMMEDIATE.html\">IMMEDIATE</a>\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.2.---- IS -->\n      <span class=\"tt\">T{ <a href=\"../core/DEFER.html\">DEFER</a>&nbsp;defer5 -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;is-defer5&nbsp;<strong>IS</strong>&nbsp;defer5&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span>\n      <p>\n      <span class=\"tt\">T{ <a href=\"../core/Tick.html\">'</a>&nbsp;<a href=\"../core/Times.html\">*</a>&nbsp;<strong>IS</strong>&nbsp;defer5 -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ 2&nbsp;3&nbsp;defer5 -&gt; 6 }T</span>\n      </p><p>\n      <span class=\"tt\">T{ <a href=\"../core/Tick.html\">'</a>&nbsp;<a href=\"../core/Plus.html\">+</a>&nbsp;is-defer5 -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ 1&nbsp;2&nbsp;defer5 -&gt; 3 }T</span>\n      \n      \n      </p>"
                    }
                }
            },
            "J": {
                "id": "core:J",
                "number": "6.1.1730",
                "name": "J",
                "english": " ",
                "list": "CORE",
                "basename": "J",
                "stackEffect": {
                    "html": {
                        "Execution:": "( -- <em>n | u</em> )\n      ( R: <em>loop-sys<sub>1</sub> loop-sys<sub>2</sub></em> -- <em>loop-sys<sub>1</sub> loop-sys<sub>2</sub></em> )"
                    },
                    "plain": {
                        "Execution:": "( -- n | u )\n( R: loop-sys1 loop-sys2 -- loop-sys1 loop-sys2 )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Execution:": {
                        "name": "Execution:",
                        "html": "\n\n\n      ( -- <em>n | u</em> )\n      ( R: <em>loop-sys<sub>1</sub> loop-sys<sub>2</sub></em> -- <em>loop-sys<sub>1</sub> loop-sys<sub>2</sub></em> )\n      <p>\n      <em>n | u</em> is a copy of the next-outer loop index. An\n      ambiguous condition exists if the loop control parameters of\n      the next-outer loop, <em>loop-sys<sub>1</sub></em>, are unavailable.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../rationale.html#rat:core:J\">A.6.1.1730 J</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.1.1730 J -->\n      <strong>J</strong> may only be used with a nested\n      <a href=\"../core/DO.html\">DO</a> ... <a href=\"../core/LOOP.html\">LOOP</a>,\n      <a href=\"../core/DO.html\">DO</a> ... <a href=\"../core/PlusLOOP.html\">+LOOP</a>,\n      <a href=\"../core/qDO.html\">?DO</a> ... <a href=\"../core/LOOP.html\">LOOP</a>, or\n      <a href=\"../core/qDO.html\">?DO</a> ... <a href=\"../core/PlusLOOP.html\">+LOOP</a>,\n      for example, in the form:\n      <p>\n      &nbsp;&nbsp; <a href=\"../core/Colon.html\">:</a> <code>X</code>\n      ... <a href=\"../core/DO.html\">DO</a>\n      ... <a href=\"../core/DO.html\">DO</a>\n      ... <strong>J</strong> ...\n      <a href=\"../core/LOOP.html\">LOOP</a>\n      ... <a href=\"../core/PlusLOOP.html\">+LOOP</a>\n      ... <a href=\"../core/Semi.html\">;</a>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.1730 J -->\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;GD3&nbsp;<a href=\"../core/DO.html\">DO</a>&nbsp;1&nbsp;0&nbsp;<a href=\"../core/DO.html\">DO</a>&nbsp;<strong>J</strong>&nbsp;<a href=\"../core/LOOP.html\">LOOP</a>&nbsp;<a href=\"../core/LOOP.html\">LOOP</a>&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;GD3 -&gt; &nbsp;1&nbsp;2&nbsp;3&nbsp;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;GD3 -&gt; -1&nbsp;0&nbsp;1&nbsp;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ MID-UINT+1&nbsp;MID-UINT&nbsp;GD3 -&gt; MID-UINT }T</span>\n      <p>\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;GD4&nbsp;<a href=\"../core/DO.html\">DO</a>&nbsp;1&nbsp;0&nbsp;<a href=\"../core/DO.html\">DO</a>&nbsp;<strong>J</strong>&nbsp;<a href=\"../core/LOOP.html\">LOOP</a>&nbsp;-1&nbsp;<a href=\"../core/PlusLOOP.html\">+LOOP</a>&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;GD4 -&gt; 4&nbsp;3&nbsp;2&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;GD4 -&gt; 2&nbsp;1&nbsp;0&nbsp;-1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ MID-UINT&nbsp;MID-UINT+1&nbsp;GD4 -&gt; MID-UINT+1&nbsp;MID-UINT }T</span>\n      \n      \n      </p>"
                    }
                }
            },
            "KEY": {
                "id": "core:KEY",
                "number": "6.1.1750",
                "name": "KEY",
                "english": " ",
                "list": "CORE",
                "basename": "KEY",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>char</em> )"
                    },
                    "plain": {
                        " ": "( -- char )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>char</em> )\n      <p>\n      Receive one character <em>char</em>, a member of the\n      implementation-defined character set. Keyboard events that do\n      not correspond to such characters are discarded until a valid\n      character is received, and those events are subsequently\n      unavailable.\n      </p><p>\n      All standard characters can be received. Characters received by\n      <strong>KEY</strong> are not displayed.\n      </p><p>\n      Any standard character returned by <strong>KEY</strong> has the numeric\n      value specified in <strong><a href=\"../usage.html#usage:ASCII\">3.1.2.1 Graphic characters</a></strong>.\n      Programs that require the ability to receive control characters\n      have an environmental dependency.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../facility/EKEY.html\">10.6.2.1305 EKEY</a>,\n      <a href=\"../facility/EKEYq.html\">10.6.2.1307 EKEY?</a>,\n      <a href=\"../facility/KEYq.html\">10.6.1.1755 KEY?</a>,\n      <a href=\"../rationale.html#rat:core:KEY\">A.6.1.1750 KEY</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- KEY -->\n      Use of <strong>KEY</strong> indicates that the application is processing\n      primitive characters.  Some input devices, e.g., keyboards,\n      may provide more information than can be represented as a\n      primitive character and such an event may be received as an\n      implementation-specific sequence of primitive characters.\n      <p>\n      See <a href=\"../rationale.html#rat:facility:EKEY\">A.10.6.2.1305 EKEY</a>.\n      \n      \n      </p>"
                    }
                }
            },
            "LEAVE": {
                "id": "core:LEAVE",
                "number": "6.1.1760",
                "name": "LEAVE",
                "english": " ",
                "list": "CORE",
                "basename": "LEAVE",
                "stackEffect": {
                    "html": {
                        "Execution:": "( -- )\n      ( R: <em>loop-sys</em> -- )"
                    },
                    "plain": {
                        "Execution:": "( -- )\n( R: loop-sys -- )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Execution:": {
                        "name": "Execution:",
                        "html": "\n\n\n      ( -- )\n      ( R: <em>loop-sys</em> -- )\n      <p>\n      Discard the current loop control parameters. An ambiguous condition\n      exists if they are unavailable. Continue execution immediately\n      following the innermost syntactically enclosing\n      <a href=\"../core/DO.html\">DO</a>...<a href=\"../core/LOOP.html\">LOOP</a> or <a href=\"../core/DO.html\">DO</a>...<a href=\"../core/PlusLOOP.html\">+LOOP</a>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:returnstack\">3.2.3.3 Return stack</a></strong>,\n      <a href=\"../core/PlusLOOP.html\">6.1.0140 +LOOP</a>,\n      <a href=\"../core/LOOP.html\">6.1.1800 LOOP</a>,\n      <a href=\"../rationale.html#rat:core:LEAVE\">A.6.1.1760 LEAVE</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.1.1760 LEAVE -->\n      Note that <strong>LEAVE</strong> immediately exits the loop. No words\n      following <strong>LEAVE</strong> within the loop will be executed.\n      Typical use:\n      <p>\n      &nbsp;&nbsp; <a href=\"../core/Colon.html\">:</a> <code>X</code> ... <a href=\"../core/DO.html\">DO</a>\n      ... <a href=\"../core/IF.html\">IF</a>\n      ... <strong>LEAVE</strong>\n      <a href=\"../core/THEN.html\">THEN</a> ... <a href=\"../core/LOOP.html\">LOOP</a> ...\n      <a href=\"../core/Semi.html\">;</a>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.1760 LEAVE -->\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;GD5&nbsp;123&nbsp;<a href=\"../core/SWAP.html\">SWAP</a>&nbsp;0&nbsp;<a href=\"../core/DO.html\">DO</a>&nbsp;<br>\n      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/I.html\">I</a>&nbsp;4&nbsp;<a href=\"../core/more.html\">&gt;</a>&nbsp;<a href=\"../core/IF.html\">IF</a>&nbsp;<a href=\"../core/DROP.html\">DROP</a>&nbsp;234&nbsp;<strong>LEAVE</strong>&nbsp;<a href=\"../core/THEN.html\">THEN</a>&nbsp;<br>\n      &nbsp;&nbsp;&nbsp;<a href=\"../core/LOOP.html\">LOOP</a>&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ 1&nbsp;GD5 -&gt; 123 }T</span> <br>\n      <span class=\"tt\">T{ 5&nbsp;GD5 -&gt; 123 }T</span> <br>\n      <span class=\"tt\">T{ 6&nbsp;GD5 -&gt; 234 }T</span>\n      \n      \n      "
                    }
                }
            },
            "LITERAL": {
                "id": "core:LITERAL",
                "number": "6.1.1780",
                "name": "LITERAL",
                "english": " ",
                "list": "CORE",
                "basename": "LITERAL",
                "stackEffect": {
                    "html": {
                        "Compilation:": "( <em>x</em> -- )",
                        "Run-time:": "( -- <em>x</em> )"
                    },
                    "plain": {
                        "Compilation:": "( x -- )",
                        "Run-time:": "( -- x )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      ( <em>x</em> -- )\n      <p>\n      Append the run-time semantics given below to the current definition.\n      </p><p>\n        \n      </p>"
                    },
                    "Run-time:": {
                        "name": "Run-time:",
                        "html": "\n\n\n      ( -- <em>x</em> )\n      <p>\n      Place <em>x</em> on the stack.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../rationale.html#rat:core:LITERAL\">A.6.1.1780 LITERAL</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.1.1780 LITERAL -->\n      Typical use:\n      <a href=\"../core/Colon.html\">:</a> <code>X</code> ...\n      <a href=\"../core/Bracket.html\">[</a> <code>x</code> <a href=\"../right-bracket.html\">]</a> <strong>LITERAL</strong>\n      ... <a href=\"../core/Semi.html\">;</a>\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.1780 LITERAL -->\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;GT3&nbsp;GT2&nbsp;<strong>LITERAL</strong>&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ GT3 -&gt; <a href=\"../core/Tick.html\">'</a>&nbsp;GT1 }T</span>\n      \n      \n      "
                    }
                }
            },
            "LOOP": {
                "id": "core:LOOP",
                "number": "6.1.1800",
                "name": "LOOP",
                "english": " ",
                "list": "CORE",
                "basename": "LOOP",
                "stackEffect": {
                    "html": {
                        "Compilation:": "( C: <em>do-sys</em> -- )",
                        "Run-time:": "( -- )\n      ( R: <em>loop-sys<sub>1</sub></em> -- <em> |  loop-sys<sub>2</sub></em> )"
                    },
                    "plain": {
                        "Compilation:": "( C: do-sys -- )",
                        "Run-time:": "( -- )\n( R: loop-sys1 --  |  loop-sys2 )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      ( C: <em>do-sys</em> -- )\n      <p>\n      Append the run-time semantics given below to the current\n      definition. Resolve the destination of all unresolved\n      occurrences of <a href=\"../core/LEAVE.html\">LEAVE</a> between the location given by\n      <em>do-sys</em> and the next location for a transfer of\n      control, to execute the words following the <strong>LOOP</strong>.\n      </p><p>\n        \n      </p>"
                    },
                    "Run-time:": {
                        "name": "Run-time:",
                        "html": "\n\n\n      ( -- )\n      ( R: <em>loop-sys<sub>1</sub></em> -- <em> |  loop-sys<sub>2</sub></em> )\n      <p>\n      An ambiguous condition exists if the loop control parameters are\n      unavailable. Add one to the loop index. If the loop index is then\n      equal to the loop limit, discard the loop parameters and continue\n      execution immediately following the loop. Otherwise continue\n      execution at the beginning of the loop.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/DO.html\">6.1.1240 DO</a>,\n      <a href=\"../core/I.html\">6.1.1680 I</a>,\n      <a href=\"../core/LEAVE.html\">6.1.1760 LEAVE</a><a href=\"../rationale.html#rat:core:LOOP\">A.6.1.1800 LOOP</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.1.1800 LOOP -->\n      \n      Typical use:\n      <p>\n      &nbsp;&nbsp; <a href=\"../core/Colon.html\">:</a> <code>X</code> ...\n      <em>limit</em> <em>first</em> <a href=\"../core/DO.html\">DO</a>\n      ...\n      <strong>LOOP</strong>\n      ... <a href=\"../core/Semi.html\">;</a>\n      </p><p>\n      or\n      </p><p>\n      &nbsp;&nbsp; <a href=\"../core/Colon.html\">:</a> <code>X</code> ...\n      <em>limit</em> <em>first</em> <a href=\"../core/qDO.html\">?DO</a>\n      ...\n      <strong>LOOP</strong>\n      ... <a href=\"../core/Semi.html\">;</a>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.1800 LOOP -->\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;GD1&nbsp;<a href=\"../core/DO.html\">DO</a>&nbsp;<a href=\"../core/I.html\">I</a>&nbsp;<strong>LOOP</strong>&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;GD1 -&gt; &nbsp;1&nbsp;2&nbsp;3&nbsp;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;GD1 -&gt; -1&nbsp;0&nbsp;1&nbsp;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ MID-UINT+1&nbsp;MID-UINT&nbsp;GD1 -&gt; MID-UINT }T</span>\n      \n      \n      "
                    }
                }
            },
            "LSHIFT": {
                "id": "core:LSHIFT",
                "number": "6.1.1805",
                "name": "LSHIFT",
                "english": "l-shift",
                "list": "CORE",
                "basename": "LSHIFT",
                "stackEffect": {
                    "html": {
                        " ": "( <em>x<sub>1</sub> u</em> -- <em>x<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( x1 u -- x2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>x<sub>1</sub> u</em> -- <em>x<sub>2</sub></em> )\n      <p>\n      Perform a logical left shift of <em>u</em> bit-places on\n      <em>x<sub>1</sub></em>, giving <em>x<sub>2</sub></em>. Put zeroes into the least\n      significant bits vacated by the shift. An ambiguous condition\n      exists if <em>u</em> is greater than or equal to the number of\n      bits in a cell.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.1805 LSHIFT -->\n      <span class=\"tt\">T{ &nbsp;&nbsp;1&nbsp;0&nbsp;<strong>LSHIFT</strong> -&gt; &nbsp;&nbsp;&nbsp;1 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;1&nbsp;1&nbsp;<strong>LSHIFT</strong> -&gt; &nbsp;&nbsp;&nbsp;2 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;1&nbsp;2&nbsp;<strong>LSHIFT</strong> -&gt; &nbsp;&nbsp;&nbsp;4 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;1&nbsp;F&nbsp;<strong>LSHIFT</strong> -&gt; 8000 }T</span> &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> BIGGEST GUARANTEED SHIFT <br>\n      <span class=\"tt\">T{ &nbsp;1S&nbsp;1&nbsp;<strong>LSHIFT</strong>&nbsp;1&nbsp;<a href=\"../core/XOR.html\">XOR</a> -&gt; 1S }T</span> <br>\n      <span class=\"tt\">T{ MSB&nbsp;1&nbsp;<strong>LSHIFT</strong> -&gt; &nbsp;&nbsp;&nbsp;0 }T</span>\n      \n      \n      "
                    }
                }
            },
            "MARKER": {
                "id": "core:MARKER",
                "number": "6.2.1850",
                "name": "MARKER",
                "english": " ",
                "list": "CORE EXT",
                "basename": "MARKER",
                "stackEffect": {
                    "html": {
                        " ": "( <em>\"&lt;spaces&gt;name\"</em> -- )",
                        "name Execution:": "( -- )"
                    },
                    "plain": {
                        " ": "( \"<spaces>name\" -- )",
                        "name Execution:": "( -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>\"&lt;spaces&gt;name\"</em> -- )\n      <p>\n      Skip leading space delimiters. Parse <em>name</em> delimited by\n      a space. Create a definition for <em>name</em> with the execution\n      semantics defined below.\n      </p><p>\n        \n      </p>"
                    },
                    "name Execution:": {
                        "name": "name Execution:",
                        "html": "\n\n\n      ( -- )\n      <p>\n      Restore all dictionary allocation and search order pointers to\n      the state they had just prior to the definition of <em>name</em>.\n      Remove the definition of <em>name</em> and all subsequent\n      definitions. Restoration of any structures still existing that\n      could refer to deleted definitions or deallocated data space is\n      not necessarily provided. No other contextual information such\n      as numeric base is affected.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:parsing\">3.4.1 Parsing</a></strong>,\n      <a href=\"../tools/FORGET.html\">15.6.2.1580 FORGET</a>,\n      <a href=\"../rationale.html#rat:core:MARKER\">A.6.2.1850 MARKER</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.2.1850 MARKER -->\n      As dictionary implementations have become more elaborate\n      and in some cases have used multiple address spaces,\n      <a href=\"../tools/FORGET.html\">FORGET</a> has become prohibitively difficult or\n      impossible to implement on many Forth systems. <strong>MARKER</strong>\n      greatly eases the problem by making it possible for the\n      system to remember \"landmark information\" in advance that\n      specifically marks the spots where the dictionary may at some\n      future time have to be rearranged.\n      \n      \n      "
                    }
                }
            },
            "MAX": {
                "id": "core:MAX",
                "number": "6.1.1870",
                "name": "MAX",
                "english": " ",
                "list": "CORE",
                "basename": "MAX",
                "stackEffect": {
                    "html": {
                        " ": "( <em>n<sub>1</sub> n<sub>2</sub></em> -- <em>n<sub>3</sub></em> )"
                    },
                    "plain": {
                        " ": "( n1 n2 -- n3 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>n<sub>1</sub> n<sub>2</sub></em> -- <em>n<sub>3</sub></em> )\n      <p>\n      <em>n<sub>3</sub></em> is the greater of <em>n<sub>1</sub></em> and <em>n<sub>2</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.1870 MAX -->\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>MAX</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;<strong>MAX</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;<strong>MAX</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>MAX</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 }T</span> <br>\n      <span class=\"tt\">T{ MIN-INT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;<strong>MAX</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0 }T</span> <br>\n      <span class=\"tt\">T{ MIN-INT&nbsp;MAX-INT&nbsp;<strong>MAX</strong> -&gt; MAX-INT }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;MAX-INT&nbsp;<strong>MAX</strong> -&gt; MAX-INT }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;<strong>MAX</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>MAX</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;<strong>MAX</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>MAX</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>MAX</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>MAX</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;MIN-INT&nbsp;<strong>MAX</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0 }T</span> <br>\n      <span class=\"tt\">T{ MAX-INT&nbsp;MIN-INT&nbsp;<strong>MAX</strong> -&gt; MAX-INT }T</span> <br>\n      <span class=\"tt\">T{ MAX-INT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;<strong>MAX</strong> -&gt; MAX-INT }T</span> <br>\n      \n      \n      "
                    }
                }
            },
            "MIN": {
                "id": "core:MIN",
                "number": "6.1.1880",
                "name": "MIN",
                "english": " ",
                "list": "CORE",
                "basename": "MIN",
                "stackEffect": {
                    "html": {
                        " ": "( <em>n<sub>1</sub> n<sub>2</sub></em> -- <em>n<sub>3</sub></em> )"
                    },
                    "plain": {
                        " ": "( n1 n2 -- n3 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>n<sub>1</sub> n<sub>2</sub></em> -- <em>n<sub>3</sub></em> )\n      <p>\n      <em>n<sub>3</sub></em> is the lesser of <em>n<sub>1</sub></em> and <em>n<sub>2</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.1880 MIN -->\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>MIN</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;<strong>MIN</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;<strong>MIN</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>MIN</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1 }T</span> <br>\n      <span class=\"tt\">T{ MIN-INT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;<strong>MIN</strong> -&gt; MIN-INT }T</span> <br>\n      <span class=\"tt\">T{ MIN-INT&nbsp;MAX-INT&nbsp;<strong>MIN</strong> -&gt; MIN-INT }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;MAX-INT&nbsp;<strong>MIN</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;<strong>MIN</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>MIN</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;<strong>MIN</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>MIN</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>MIN</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>MIN</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;MIN-INT&nbsp;<strong>MIN</strong> -&gt; MIN-INT }T</span> <br>\n      <span class=\"tt\">T{ MAX-INT&nbsp;MIN-INT&nbsp;<strong>MIN</strong> -&gt; MIN-INT }T</span> <br>\n      <span class=\"tt\">T{ MAX-INT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;<strong>MIN</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0 }T</span> <br>\n      \n      \n      "
                    }
                }
            },
            "MOD": {
                "id": "core:MOD",
                "number": "6.1.1890",
                "name": "MOD",
                "english": " ",
                "list": "CORE",
                "basename": "MOD",
                "stackEffect": {
                    "html": {
                        " ": "( <em>n<sub>1</sub> n<sub>2</sub></em> -- <em>n<sub>3</sub></em> )"
                    },
                    "plain": {
                        " ": "( n1 n2 -- n3 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>n<sub>1</sub> n<sub>2</sub></em> -- <em>n<sub>3</sub></em> )\n      <p>\n      Divide <em>n<sub>1</sub></em> by <em>n<sub>2</sub></em>, giving the single-cell remainder\n      <em>n<sub>3</sub></em>. An ambiguous condition exists if <em>n<sub>2</sub></em> is zero.\n      If <em>n<sub>1</sub></em> and <em>n<sub>2</sub></em> differ in sign, the\n      implementation-defined result returned will be the same as that\n      returned by either the phrase\n      <a href=\"../core/toR.html\">&gt;R</a> <a href=\"../core/StoD.html\">S&gt;D</a> <a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/FMDivMOD.html\">FM/MOD</a> <a href=\"../core/DROP.html\">DROP</a>\n      or the phrase\n      <a href=\"../core/toR.html\">&gt;R</a> <a href=\"../core/StoD.html\">S&gt;D</a> <a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/SMDivREM.html\">SM/REM</a> <a href=\"../core/DROP.html\">DROP</a>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:div\">3.2.2.1 Integer division</a></strong>.\n      <p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.1890 MOD -->\n            <div class=\"tt\">\nIFFLOORED &nbsp;&nbsp; \t<a href=\"../core/Colon.html\">:</a> TMOD T/MOD <a href=\"../core/DROP.html\">DROP</a> <a href=\"../core/Semi.html\">;</a> <br>\n        IFSYM &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t<a href=\"../core/Colon.html\">:</a> TMOD T/MOD <a href=\"../core/DROP.html\">DROP</a> <a href=\"../core/Semi.html\">;</a>\n        <p>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;TMOD }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;TMOD }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;TMOD }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;TMOD }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;TMOD }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;TMOD }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;TMOD }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;TMOD }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;TMOD }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;TMOD }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;<strong>MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;TMOD }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;TMOD }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2&nbsp;<strong>MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2&nbsp;TMOD }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;<strong>MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;TMOD }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-3&nbsp;<strong>MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-3&nbsp;TMOD }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;<strong>MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;TMOD }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-3&nbsp;<strong>MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-3&nbsp;TMOD }T</span> <br>\n        <span class=\"tt\">T{ MAX-INT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>MOD</strong> -&gt; MAX-INT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;TMOD }T</span> <br>\n        <span class=\"tt\">T{ MIN-INT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>MOD</strong> -&gt; MIN-INT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;TMOD }T</span> <br>\n        <span class=\"tt\">T{ MAX-INT&nbsp;MAX-INT&nbsp;<strong>MOD</strong> -&gt; MAX-INT&nbsp;MAX-INT&nbsp;TMOD }T</span> <br>\n        <span class=\"tt\">T{ MIN-INT&nbsp;MIN-INT&nbsp;<strong>MOD</strong> -&gt; MIN-INT&nbsp;MIN-INT&nbsp;TMOD }T</span>\n        \n        \n        </p></div>\n      "
                    }
                }
            },
            "MOVE": {
                "id": "core:MOVE",
                "number": "6.1.1900",
                "name": "MOVE",
                "english": " ",
                "list": "CORE",
                "basename": "MOVE",
                "stackEffect": {
                    "html": {
                        " ": "( <em>addr<sub>1</sub> addr<sub>2</sub> u</em> -- )"
                    },
                    "plain": {
                        " ": "( addr1 addr2 u -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>addr<sub>1</sub> addr<sub>2</sub> u</em> -- )\n      <p>\n      If <em>u</em> is greater than zero, copy the contents of <em>u</em>\n      consecutive address units at <em>addr<sub>1</sub></em> to the <em>u</em>\n      consecutive address units at <em>addr<sub>2</sub></em>. After <strong>MOVE</strong>\n      completes, the <em>u</em> consecutive address units at <em>addr<sub>2</sub></em>\n      contain exactly what the <em>u</em> consecutive address units at\n      <em>addr<sub>1</sub></em> contained before the move.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n\t<a href=\"../string/CMOVE.html\">17.6.1.0910 CMOVE</a>,\n      <a href=\"../string/CMOVEtop.html\">17.6.1.0920 CMOVE&gt;</a>,\n      <a href=\"../rationale.html#rat:core:MOVE\">A.6.1.1900 MOVE</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.1.1900 MOVE -->\n      <a href=\"../string/CMOVE.html\">CMOVE</a> and <a href=\"../string/CMOVEtop.html\">CMOVE&gt;</a> are the primary\n      move operators in Forth 83. They specify a behavior for moving\n      that implies propagation if the move is suitably invoked. In\n      some hardware, this specific behavior cannot be achieved using\n      the best move instruction. Further, <a href=\"../string/CMOVE.html\">CMOVE</a> and\n      <a href=\"../string/CMOVEtop.html\">CMOVE&gt;</a> move characters; Forth needs a move\n      instruction capable of dealing with address units. Thus\n      <strong>MOVE</strong> has been defined and added to the Core word set,\n      and <a href=\"../string/CMOVE.html\">CMOVE</a> and <a href=\"../string/CMOVEtop.html\">CMOVE&gt;</a> have been\n      moved to the String word set.\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.1900 MOVE -->\n      <span class=\"tt\">T{ FBUF&nbsp;FBUF&nbsp;3&nbsp;<a href=\"../core/CHARS.html\">CHARS</a>&nbsp;<strong>MOVE</strong> -&gt;  }T</span>  <a href=\"../core/bs.html\">\\</a> BIZARRE SPECIAL CASE <br>\n      <span class=\"tt\">T{ SEEBUF -&gt; 20&nbsp;20&nbsp;20 }T</span>\n      <p>\n      <span class=\"tt\">T{ SBUF&nbsp;FBUF&nbsp;0&nbsp;<a href=\"../core/CHARS.html\">CHARS</a>&nbsp;<strong>MOVE</strong> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ SEEBUF -&gt; 20&nbsp;20&nbsp;20 }T</span>\n      </p><p>\n      <span class=\"tt\">T{ SBUF&nbsp;FBUF&nbsp;1&nbsp;<a href=\"../core/CHARS.html\">CHARS</a>&nbsp;<strong>MOVE</strong> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ SEEBUF -&gt; 12&nbsp;20&nbsp;20 }T</span>\n      </p><p>\n      <span class=\"tt\">T{ SBUF&nbsp;FBUF&nbsp;3&nbsp;<a href=\"../core/CHARS.html\">CHARS</a>&nbsp;<strong>MOVE</strong> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ SEEBUF -&gt; 12&nbsp;34&nbsp;56 }T</span>\n      </p><p>\n      <span class=\"tt\">T{ FBUF&nbsp;FBUF&nbsp;<a href=\"../core/CHARPlus.html\">CHAR+</a>&nbsp;2&nbsp;<a href=\"../core/CHARS.html\">CHARS</a>&nbsp;<strong>MOVE</strong> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ SEEBUF -&gt; 12&nbsp;12&nbsp;34 }T</span>\n      </p><p>\n      <span class=\"tt\">T{ FBUF&nbsp;<a href=\"../core/CHARPlus.html\">CHAR+</a>&nbsp;FBUF&nbsp;2&nbsp;<a href=\"../core/CHARS.html\">CHARS</a>&nbsp;<strong>MOVE</strong> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ SEEBUF -&gt; 12&nbsp;34&nbsp;34 }T</span>\n      \n      \n      </p>"
                    }
                }
            },
            "MTimes": {
                "id": "core:M*",
                "number": "6.1.1810",
                "name": "M*",
                "english": "m-star",
                "list": "CORE",
                "basename": "MTimes",
                "stackEffect": {
                    "html": {
                        " ": "( <em>n<sub>1</sub> n<sub>2</sub></em> -- <em>d</em> )"
                    },
                    "plain": {
                        " ": "( n1 n2 -- d )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>n<sub>1</sub> n<sub>2</sub></em> -- <em>d</em> )\n      <p>\n      <em>d</em> is the signed product of <em>n<sub>1</sub></em> times <em>n<sub>2</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../rationale.html#rat:core:M*\">A.6.1.1810 M*</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.1.1810 M* -->\n      This word is a useful early step in calculation, going to\n      extra precision conveniently. It has been in use since the\n      Forth systems of the early 1970's.\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.1810 M* -->\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;<strong>M*</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a> }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>M*</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a> }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;<strong>M*</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a> }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;<strong>M*</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a> }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>M*</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a> }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;<strong>M*</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a> }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;<strong>M*</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-9&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a> }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-3&nbsp;<strong>M*</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-9&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a> }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-3&nbsp;<strong>M*</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a> }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;MIN-INT&nbsp;<strong>M*</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a> }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;MIN-INT&nbsp;<strong>M*</strong> -&gt; MIN-INT&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a> }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;MIN-INT&nbsp;<strong>M*</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;1S&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;MAX-INT&nbsp;<strong>M*</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a> }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;MAX-INT&nbsp;<strong>M*</strong> -&gt; MAX-INT&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a> }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;MAX-INT&nbsp;<strong>M*</strong> -&gt; MAX-INT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<a href=\"../core/LSHIFT.html\">LSHIFT</a>&nbsp;0 }T</span> <br>\n      <span class=\"tt\">T{ MIN-INT&nbsp;MIN-INT&nbsp;<strong>M*</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;MSB&nbsp;1&nbsp;<a href=\"../core/RSHIFT.html\">RSHIFT</a>&nbsp;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ MAX-INT&nbsp;MIN-INT&nbsp;<strong>M*</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;MSB&nbsp;MSB&nbsp;<a href=\"../core/TwoDiv.html\">2/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ MAX-INT&nbsp;MAX-INT&nbsp;<strong>M*</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;MSB&nbsp;<a href=\"../core/TwoDiv.html\">2/</a>&nbsp;<a href=\"../core/INVERT.html\">INVERT</a>&nbsp; }T</span>\n      \n      \n      "
                    }
                }
            },
            "Minus": {
                "id": "core:-",
                "number": "6.1.0160",
                "name": "-",
                "english": "minus",
                "list": "CORE",
                "basename": "Minus",
                "stackEffect": {
                    "html": {
                        " ": "( <em>n<sub>1</sub> | u<sub>1</sub> n<sub>2</sub> | u<sub>2</sub></em> -- <em>n<sub>3</sub> | u<sub>3</sub></em> )"
                    },
                    "plain": {
                        " ": "( n1 | u1 n2 | u2 -- n3 | u3 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>n<sub>1</sub> | u<sub>1</sub> n<sub>2</sub> | u<sub>2</sub></em> -- <em>n<sub>3</sub> | u<sub>3</sub></em> )\n      <p>\n      Subtract <em>n<sub>2</sub> | u<sub>2</sub></em> from <em>n<sub>1</sub> | u<sub>1</sub></em>, giving the\n      difference <em>n<sub>3</sub> | u<sub>3</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:aaddr\">3.3.3.1 Address alignment</a></strong>.\n      <p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0160 - -->\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;5&nbsp;<strong>-</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-5 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;0&nbsp;<strong>-</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;-5&nbsp;<strong>-</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-5&nbsp;&nbsp;0&nbsp;<strong>-</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-5 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;2&nbsp;<strong>-</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;-2&nbsp;<strong>-</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;&nbsp;2&nbsp;<strong>-</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-3 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;-2&nbsp;<strong>-</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;1&nbsp;<strong>-</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1 }T</span> <br>\n      <span class=\"tt\">T{ MID-UINT+1&nbsp;&nbsp;1&nbsp;<strong>-</strong> -&gt; MID-UINT }T</span>\n      \n      \n      "
                    }
                }
            },
            "NEGATE": {
                "id": "core:NEGATE",
                "number": "6.1.1910",
                "name": "NEGATE",
                "english": " ",
                "list": "CORE",
                "basename": "NEGATE",
                "stackEffect": {
                    "html": {
                        " ": "( <em>n<sub>1</sub></em> -- <em>n<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( n1 -- n2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>n<sub>1</sub></em> -- <em>n<sub>2</sub></em> )\n      <p>\n      Negate <em>n<sub>1</sub></em>, giving its arithmetic inverse <em>n<sub>2</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/INVERT.html\">6.1.1720 INVERT</a>,\n      <a href=\"../core/ZeroEqual.html\">6.1.0270 0=</a>.\n      <p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.1910 NEGATE -->\n      <span class=\"tt\">T{ &nbsp;0&nbsp;<strong>NEGATE</strong> -&gt; &nbsp;0 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;1&nbsp;<strong>NEGATE</strong> -&gt; -1 }T</span> <br>\n      <span class=\"tt\">T{ -1&nbsp;<strong>NEGATE</strong> -&gt; &nbsp;1 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;2&nbsp;<strong>NEGATE</strong> -&gt; -2 }T</span> <br>\n      <span class=\"tt\">T{ -2&nbsp;<strong>NEGATE</strong> -&gt; &nbsp;2 }T</span>\n      \n      \n      "
                    }
                }
            },
            "NIP": {
                "id": "core:NIP",
                "number": "6.2.1930",
                "name": "NIP",
                "english": " ",
                "list": "CORE EXT",
                "basename": "NIP",
                "stackEffect": {
                    "html": {
                        " ": "( <em>x<sub>1</sub> x<sub>2</sub></em> -- <em>x<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( x1 x2 -- x2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>x<sub>1</sub> x<sub>2</sub></em> -- <em>x<sub>2</sub></em> )\n      <p>\n      Drop the first item below the top of stack.\n      \n      </p>"
                    }
                }
            },
            "OF": {
                "id": "core:OF",
                "number": "6.2.1950",
                "name": "OF",
                "english": " ",
                "list": "CORE EXT",
                "basename": "OF",
                "stackEffect": {
                    "html": {
                        "Compilation:": "( C: -- <em>of-sys</em> )",
                        "Run-time:": "( <em>x<sub>1</sub> x<sub>2</sub></em> -- <em> |  x<sub>1</sub></em> )"
                    },
                    "plain": {
                        "Compilation:": "( C: -- of-sys )",
                        "Run-time:": "( x1 x2 --  |  x1 )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      ( C: -- <em>of-sys</em> )\n      <p>\n      Put <em>of-sys</em> onto the control flow stack. Append the\n      run-time semantics given below to the current definition.\n      The semantics are incomplete until resolved by a consumer\n      of <em>of-sys</em> such as <a href=\"../core/ENDOF.html\">ENDOF</a>.\n      </p><p>\n        \n      </p>"
                    },
                    "Run-time:": {
                        "name": "Run-time:",
                        "html": "\n\n\n      ( <em>x<sub>1</sub> x<sub>2</sub></em> -- <em> |  x<sub>1</sub></em> )\n      <p>\n      If the two values on the stack are not equal, discard the\n      top value and continue execution at the location specified\n      by the consumer of <em>of-sys</em>, e.g., following the next\n      <a href=\"../core/ENDOF.html\">ENDOF</a>. Otherwise, discard both values and continue\n      execution in line.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/CASE.html\">6.2.0873 CASE</a>,\n      <a href=\"../core/ENDCASE.html\">6.2.1342 ENDCASE</a>,\n      <a href=\"../core/ENDOF.html\">6.2.1343 ENDOF</a>,\n      <a href=\"../rationale.html#rat:core:OF\">A.6.2.1950 OF</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.2.1950 OF -->\n      Typical use:\n            <div class=\"quote\">\n\n        <a href=\"../core/Colon.html\">:</a> <code>X</code> ... <br>\n        &nbsp;&nbsp; <a href=\"../core/CASE.html\">CASE</a> <br>\n        &nbsp;&nbsp;   <em>test1</em> <strong>OF</strong> ... <a href=\"../core/ENDOF.html\">ENDOF</a> <br>\n        &nbsp;&nbsp;   <em>testn</em> <strong>OF</strong> ... <a href=\"../core/ENDOF.html\">ENDOF</a> <br>\n        &nbsp;&nbsp;   ... <a href=\"../core/p.html\">(</a> default ) <br>\n        &nbsp;&nbsp; <a href=\"../core/ENDCASE.html\">ENDCASE</a> ... <br>\n        <a href=\"../core/Semi.html\">;</a>\n        \n        </div>\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      See <a href=\"../testsuite.html#test:core:CASE\">F.6.2.0873 CASE</a>.\n      \n      \n      "
                    }
                }
            },
            "OR": {
                "id": "core:OR",
                "number": "6.1.1980",
                "name": "OR",
                "english": " ",
                "list": "CORE",
                "basename": "OR",
                "stackEffect": {
                    "html": {
                        " ": "( <em>x<sub>1</sub> x<sub>2</sub></em> -- <em>x<sub>3</sub></em> )"
                    },
                    "plain": {
                        " ": "( x1 x2 -- x3 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>x<sub>1</sub> x<sub>2</sub></em> -- <em>x<sub>3</sub></em> )\n      <p>\n      <em>x<sub>3</sub></em> is the bit-by-bit inclusive-or of <em>x<sub>1</sub></em> with\n      <em>x<sub>2</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.1980 OR -->\n      <span class=\"tt\">T{ 0S&nbsp;0S&nbsp;<strong>OR</strong> -&gt; 0S }T</span> <br>\n      <span class=\"tt\">T{ 0S&nbsp;1S&nbsp;<strong>OR</strong> -&gt; 1S }T</span> <br>\n      <span class=\"tt\">T{ 1S&nbsp;0S&nbsp;<strong>OR</strong> -&gt; 1S }T</span> <br>\n      <span class=\"tt\">T{ 1S&nbsp;1S&nbsp;<strong>OR</strong> -&gt; 1S }T</span>\n      \n      \n      "
                    }
                }
            },
            "OVER": {
                "id": "core:OVER",
                "number": "6.1.1990",
                "name": "OVER",
                "english": " ",
                "list": "CORE",
                "basename": "OVER",
                "stackEffect": {
                    "html": {
                        " ": "( <em>x<sub>1</sub> x<sub>2</sub></em> -- <em>x<sub>1</sub> x<sub>2</sub> x<sub>1</sub></em> )"
                    },
                    "plain": {
                        " ": "( x1 x2 -- x1 x2 x1 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>x<sub>1</sub> x<sub>2</sub></em> -- <em>x<sub>1</sub> x<sub>2</sub> x<sub>1</sub></em> )\n      <p>\n      Place a copy of <em>x<sub>1</sub></em> on top of the stack.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.1990 OVER -->\n      <span class=\"tt\">T{ 1&nbsp;2&nbsp;<strong>OVER</strong> -&gt; 1&nbsp;2&nbsp;1 }T</span>\n      \n      \n      "
                    }
                }
            },
            "OneMinus": {
                "id": "core:1-",
                "number": "6.1.0300",
                "name": "1-",
                "english": "one-minus",
                "list": "CORE",
                "basename": "OneMinus",
                "stackEffect": {
                    "html": {
                        " ": "( <em>n<sub>1</sub> | u<sub>1</sub></em> -- <em>n<sub>2</sub> | u<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( n1 | u1 -- n2 | u2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>n<sub>1</sub> | u<sub>1</sub></em> -- <em>n<sub>2</sub> | u<sub>2</sub></em> )\n      <p>\n      Subtract one (1) from <em>n<sub>1</sub> | u<sub>1</sub></em> giving the difference\n      <em>n<sub>2</sub> | u<sub>2</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0300 1- -->\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;<strong>1-</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>1-</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;<strong>1-</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1 }T</span> <br>\n      <span class=\"tt\">T{ MID-UINT+1&nbsp;<strong>1-</strong> -&gt; MID-UINT }T</span>\n      \n      \n      "
                    }
                }
            },
            "OnePlus": {
                "id": "core:1+",
                "number": "6.1.0290",
                "name": "1+",
                "english": "one-plus",
                "list": "CORE",
                "basename": "OnePlus",
                "stackEffect": {
                    "html": {
                        " ": "( <em>n<sub>1</sub> | u<sub>1</sub></em> -- <em>n<sub>2</sub> | u<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( n1 | u1 -- n2 | u2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>n<sub>1</sub> | u<sub>1</sub></em> -- <em>n<sub>2</sub> | u<sub>2</sub></em> )\n      <p>\n      Add one (1) to <em>n<sub>1</sub> | u<sub>1</sub></em> giving the sum\n      <em>n<sub>2</sub> | u<sub>2</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0290 1+ -->\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;<strong>1+</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>1+</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>1+</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2 }T</span> <br>\n      <span class=\"tt\">T{ MID-UINT&nbsp;<strong>1+</strong> -&gt; MID-UINT+1 }T</span>\n      \n      \n      "
                    }
                }
            },
            "PAD": {
                "id": "core:PAD",
                "number": "6.2.2000",
                "name": "PAD",
                "english": " ",
                "list": "CORE EXT",
                "basename": "PAD",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>c-addr</em> )"
                    },
                    "plain": {
                        " ": "( -- c-addr )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>c-addr</em> )\n      <p>\n      <em>c-addr</em> is the address of a transient region that can\n      be used to hold data for intermediate processing.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:transient\">3.3.3.6 Other transient regions</a></strong>,\n      <a href=\"../rationale.html#rat:core:PAD\">A.6.2.2000 PAD</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.2.2000 PAD -->\n      <strong>PAD</strong> has been available as scratch storage for strings\n      since the earliest Forth implementations. It was brought to\n      our attention that many programmers are reluctant to use\n      <strong>PAD</strong>, fearing incompatibilities with system uses.\n      <strong>PAD</strong> is specifically intended as a programmer convenience,\n      however, which is why we documented the fact that no standard\n      words use it.\n      \n      \n      "
                    }
                }
            },
            "PARSE-NAME": {
                "id": "core:PARSE-NAME",
                "number": "6.2.2020",
                "name": "PARSE-NAME",
                "english": " ",
                "list": "CORE EXT",
                "basename": "PARSE-NAME",
                "stackEffect": {
                    "html": {
                        " ": "( <em>\"&lt;spaces&gt;name&lt;space&gt;\"</em> -- <em>c-addr u</em> )"
                    },
                    "plain": {
                        " ": "( \"<spaces>name<space>\" -- c-addr u )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>\"&lt;spaces&gt;name&lt;space&gt;\"</em> -- <em>c-addr u</em> )\n      <p>\n      Skip leading space delimiters. Parse <em>name</em> delimited by a\n      space.\n      </p><p>\n      <em>c-addr</em> is the address of the selected string within the\n      input buffer and <em>u</em> is its length in characters. If the\n      parse area is empty or contains only white space, the resulting\n      string has length zero.\n      </p><p>\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n <!-- I.6.2.---- PARSE-NAME -->\n      <a href=\"../core/Colon.html\">:</a> isspace? <a href=\"../core/p.html\">(</a> c -- f ) <br>\n      &nbsp;&nbsp; <a href=\"../core/BL.html\">BL</a> <a href=\"../core/OnePlus.html\">1+</a> <a href=\"../core/Uless.html\">U&lt;</a> <a href=\"../core/Semi.html\">;</a>\n      <p>\n      <a href=\"../core/Colon.html\">:</a> isnotspace? <a href=\"../core/p.html\">(</a> c -- f ) <br>\n      &nbsp;&nbsp; isspace? <a href=\"../core/ZeroEqual.html\">0=</a> <a href=\"../core/Semi.html\">;</a>\n      </p><p>\n      <a href=\"../core/Colon.html\">:</a> xt-skip <a href=\"../core/p.html\">(</a> addr1 n1 xt -- addr2 n2 ) <br>\n      &nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> skip all characters satisfying xt ( c -- f ) <br>\n      &nbsp;&nbsp; <a href=\"../core/toR.html\">&gt;R</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/BEGIN.html\">BEGIN</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/DUP.html\">DUP</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/WHILE.html\">WHILE</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/OVER.html\">OVER</a> <a href=\"../core/CFetch.html\">C@</a> <a href=\"../core/RFetch.html\">R@</a> <a href=\"../core/EXECUTE.html\">EXECUTE</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/WHILE.html\">WHILE</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; 1 <a href=\"../string/DivSTRING.html\">/STRING</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/REPEAT.html\">REPEAT</a> <a href=\"../core/THEN.html\">THEN</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/DROP.html\">DROP</a> <a href=\"../core/Semi.html\">;</a>\n      </p><p>\n      <a href=\"../core/Colon.html\">:</a> parse-name <a href=\"../core/p.html\">(</a> \"name\" -- c-addr u ) <br>\n      &nbsp;&nbsp; <a href=\"../core/SOURCE.html\">SOURCE</a> <a href=\"../core/toIN.html\">&gt;IN</a> <a href=\"../core/Fetch.html\">@</a> <a href=\"../string/DivSTRING.html\">/STRING</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/BracketTick.html\">[']</a> isspace? xt-skip <a href=\"../core/OVER.html\">OVER</a> <a href=\"../core/toR.html\">&gt;R</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/BracketTick.html\">[']</a> isnotspace? xt-skip <a href=\"../core/p.html\">(</a> end-word restlen r: start-word ) <br>\n      &nbsp;&nbsp; <a href=\"../core/TwoDUP.html\">2DUP</a> 1 <a href=\"../core/MIN.html\">MIN</a> <a href=\"../core/Plus.html\">+</a> <a href=\"../core/SOURCE.html\">SOURCE</a> <a href=\"../core/DROP.html\">DROP</a> <a href=\"../core/Minus.html\">-</a> <a href=\"../core/toIN.html\">&gt;IN</a> <a href=\"../core/Store.html\">!</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/DROP.html\">DROP</a> <a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/TUCK.html\">TUCK</a> <a href=\"../core/Minus.html\">-</a> <a href=\"../core/Semi.html\">;</a>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.2.---- PARSE-NAME -->\n      <span class=\"tt\">T{ <strong>PARSE-NAME</strong>&nbsp;abcd&nbsp;<a href=\"../core/Sq.html\">S\"</a>&nbsp;abcd\"&nbsp;S= -&gt; &lt;TRUE&gt; }T</span> <br>\n      <span class=\"tt\">T{ <strong>PARSE-NAME</strong>&nbsp;&nbsp;&nbsp;abcde&nbsp;&nbsp;&nbsp;<a href=\"../core/Sq.html\">S\"</a>&nbsp;abcde\"&nbsp;S= -&gt; &lt;TRUE&gt; }T</span>\n      <p>\n      <a href=\"../core/bs.html\">\\</a> test empty parse area <br>\n      <span class=\"tt\">T{ <strong>PARSE-NAME</strong>&nbsp;<br>\n      \n      &nbsp;&nbsp;&nbsp;<a href=\"../core/NIP.html\">NIP</a> -&gt; 0 }T</span> &nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> empty line <br>\n      <span class=\"tt\">T{ PARSE-NAME&nbsp;&nbsp;&nbsp;&nbsp;<br>\n      \n      &nbsp;&nbsp;&nbsp;<a href=\"../core/NIP.html\">NIP</a> -&gt; 0 }T</span> &nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> line with white space\n      </p><p>\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;parse-name-test&nbsp;<a href=\"../core/p.html\">(</a>&nbsp;\"name1\"&nbsp;\"name2\"&nbsp;--&nbsp;n&nbsp;)&nbsp;<br>\n      &nbsp;&nbsp;&nbsp;<strong>PARSE-NAME</strong>&nbsp;<strong>PARSE-NAME</strong>&nbsp;S=&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span>\n      </p><p>\n      <span class=\"tt\">T{ parse-name-test&nbsp;abcd&nbsp;abcd -&gt; &lt;TRUE&gt; }T</span> <br>\n      <span class=\"tt\">T{ parse-name-test&nbsp;&nbsp;abcd&nbsp;&nbsp;&nbsp;abcd&nbsp;&nbsp; -&gt; &lt;TRUE&gt; }T</span> <br>\n      <span class=\"tt\">T{ parse-name-test&nbsp;abcde&nbsp;abcdf -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ parse-name-test&nbsp;abcdf&nbsp;abcde -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ parse-name-test&nbsp;abcde&nbsp;abcde&nbsp;<br>\n      &nbsp;&nbsp;&nbsp; -&gt; &lt;TRUE&gt; }T</span> <br>\n      <span class=\"tt\">T{ parse-name-test&nbsp;abcde&nbsp;abcde&nbsp;&nbsp;<br>\n      &nbsp;&nbsp;&nbsp; -&gt; &lt;TRUE&gt; }T</span>\n      &nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> line with white space\n      \n      \n      </p>"
                    }
                }
            },
            "PARSE": {
                "id": "core:PARSE",
                "number": "6.2.2008",
                "name": "PARSE",
                "english": " ",
                "list": "CORE EXT",
                "basename": "PARSE",
                "stackEffect": {
                    "html": {
                        " ": "( <em>char \"ccc&lt;char&gt;\"</em> -- <em>c-addr u</em> )"
                    },
                    "plain": {
                        " ": "( char \"ccc<char>\" -- c-addr u )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>char \"ccc&lt;char&gt;\"</em> -- <em>c-addr u</em> )\n      <p>\n      Parse <em>ccc</em> delimited by the delimiter <em>char</em>.\n      </p><p>\n      <em>c-addr</em> is the address (within the input buffer) and\n      <em>u</em> is the length of the parsed string. If the parse area\n      was empty, the resulting string has a zero length.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:parsing\">3.4.1 Parsing</a></strong>,\n      <a href=\"../rationale.html#rat:core:PARSE\">A.6.2.2008 PARSE</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.2.2008 PARSE -->\n      Typical use: <em>char</em> <strong>PARSE</strong> <em>ccc</em>&lt;<em>char</em>&gt;\n      <p>\n      The traditional Forth word for parsing is <a href=\"../core/WORD.html\">WORD</a>.\n      <strong>PARSE</strong> solves the following problems with <a href=\"../core/WORD.html\">WORD</a>:\n      </p><p>\n      </p><ol style=\"list-style-type: decimal\">\n      <li> <a href=\"../core/WORD.html\">WORD</a> always skips leading delimiters. This\n      behavior is appropriate for use by the text interpreter,\n      which looks for sequences of non-blank characters, but is\n      inappropriate for use by words like <a href=\"../core/p.html\">(</a> , <a href=\"../core/Dotp.html\">.(</a>,\n      and <a href=\"../core/Dotq.html\">.\"</a>. Consider the following (flawed) definition\n      of <a href=\"../core/Dotp.html\">.(</a>:\n      <p>\n      &nbsp;&nbsp; <a href=\"../core/Colon.html\">:</a> <a href=\"../core/Dotp.html\">.(</a>  \n      <a href=\"../core/BracketCHAR.html\">[CHAR]</a> <code>)</code>  \n      <a href=\"../core/WORD.html\">WORD</a> <a href=\"../core/COUNT.html\">COUNT</a> <a href=\"../core/TYPE.html\">TYPE</a>\n      <a href=\"../core/Semi.html\">;</a>   <a href=\"../core/IMMEDIATE.html\">IMMEDIATE</a>\n      </p><p>\n      This works fine when used in a line like:\n      </p><p>\n      &nbsp;&nbsp; <a href=\"../core/Dotp.html\">.(</a> <code>HELLO)</code> &nbsp;&nbsp; <code>5</code> <a href=\"../core/d.html\">.</a>\n      </p><p>\n      but consider what happens if the user enters an empty\n      string:\n      </p><p>\n      &nbsp;&nbsp; <a href=\"../core/Dotp.html\">.(</a> <code>)</code> &nbsp;&nbsp; <code>5</code> <a href=\"../core/d.html\">.</a>\n      </p><p>\n      The definition of <a href=\"../core/Dotp.html\">.(</a> shown above would treat the\n      <code>)</code> as a leading delimiter, skip it, and continue\n      consuming characters until it located another <code>)</code>\n      that followed a non-<code>)</code> character, or until the\n      parse area was empty. In the example shown, the\n      <code>5</code> <a href=\"../core/d.html\">.</a>\n      would be treated as part of the string to be printed.\n      </p><p>\n      With <strong>PARSE</strong>, we could write a correct definition of\n      <a href=\"../core/Dotp.html\">.(</a>:\n      </p><p>\n      &nbsp;&nbsp; <a href=\"../core/Colon.html\">:</a> <a href=\"../core/Dotp.html\">.(</a>  \n      <a href=\"../core/BracketCHAR.html\">[CHAR]</a> <code>)</code>  \n      <strong>PARSE</strong> <a href=\"../core/TYPE.html\">TYPE</a>\n      <a href=\"../core/Semi.html\">;</a>   <a href=\"../core/IMMEDIATE.html\">IMMEDIATE</a>\n      </p><p>\n      This definition avoids the \"empty string\" anomaly.\n      </p><p>\n      </p></li>\n      <li> <a href=\"../core/WORD.html\">WORD</a> returns its result as a counted string.\n      This has four bad effects:\n      <p>\n      </p><ol style=\"list-style-type: lower-alpha\">\n      <li> The characters accepted by <a href=\"../core/WORD.html\">WORD</a> must be\n      copied from the input buffer into a transient buffer,\n      in order to make room for the count character that\n      must be at the beginning of the counted string. The\n      copy step is inefficient, compared to <strong>PARSE</strong>,\n      which leaves the string in the input buffer and doesn't\n      need to copy it anywhere.\n      <p>\n      </p></li>\n      <li> <a href=\"../core/WORD.html\">WORD</a> must be careful not to store too many\n      characters into the transient buffer, thus overwriting\n      something beyond the end of the buffer. This adds to\n      the overhead of the copy step. (<a href=\"../core/WORD.html\">WORD</a> may have\n      to scan a lot of characters before finding the trailing\n      delimiter.)\n      <p>\n      </p></li>\n      <li> The count character limits the length of the string\n      returned by <a href=\"../core/WORD.html\">WORD</a> to 255 characters (longer\n      strings can easily be stored in blocks!). This\n      limitation does not exist for <strong>PARSE</strong>.\n      <p>\n      </p></li>\n      <li> The transient buffer is typically overwritten by the\n      next use of <a href=\"../core/WORD.html\">WORD</a>.\n      </li>\n</ol>\n      <p>\n      The need for <a href=\"../core/WORD.html\">WORD</a> has largely been eliminated by\n      <strong>PARSE</strong> and <a href=\"../core/PARSE-NAME.html\">PARSE-NAME</a>. <a href=\"../core/WORD.html\">WORD</a> is\n      retained for backward compatibility.\n      </p></li>\n</ol>\n      \n      \n      "
                    }
                }
            },
            "PICK": {
                "id": "core:PICK",
                "number": "6.2.2030",
                "name": "PICK",
                "english": " ",
                "list": "CORE EXT",
                "basename": "PICK",
                "stackEffect": {
                    "html": {
                        " ": "( <em>x<sub>u</sub>...x<sub>1</sub> x<sub>0</sub> u</em> -- <em>x<sub>u</sub>...x<sub>1</sub> x<sub>0</sub> x<sub>u</sub></em> )"
                    },
                    "plain": {
                        " ": "( xu...x1 x0 u -- xu...x1 x0 xu )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>x<sub>u</sub>...x<sub>1</sub> x<sub>0</sub> u</em> -- <em>x<sub>u</sub>...x<sub>1</sub> x<sub>0</sub> x<sub>u</sub></em> )\n      <p>\n      Remove <em>u</em>. Copy the <em>x<sub>u</sub></em> to the top of the stack.\n      An ambiguous condition exists if there are less than <em>u</em>+2\n      items on the stack before <strong>PICK</strong> is executed.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../rationale.html#rat:core:PICK\">A.6.2.2030 PICK</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.2.2030 PICK -->\n      <code>0</code> <strong>PICK</strong> is equivalent to <a href=\"../core/DUP.html\">DUP</a> and\n      <code>1</code> <strong>PICK</strong> is equivalent to <a href=\"../core/OVER.html\">OVER</a>.\n      \n      \n      "
                    }
                }
            },
            "POSTPONE": {
                "id": "core:POSTPONE",
                "number": "6.1.2033",
                "name": "POSTPONE",
                "english": " ",
                "list": "CORE",
                "basename": "POSTPONE",
                "stackEffect": {
                    "html": {
                        "Compilation:": "( <em>\"&lt;spaces&gt;name\"</em> -- )"
                    },
                    "plain": {
                        "Compilation:": "( \"<spaces>name\" -- )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      ( <em>\"&lt;spaces&gt;name\"</em> -- )\n      <p>\n      Skip leading space delimiters. Parse <em>name</em> delimited by\n      a space. Find <em>name</em>. Append the compilation semantics of\n      <em>name</em> to the current definition. An ambiguous condition\n      exists if <em>name</em> is not found.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:parsing\">3.4.1 Parsing</a></strong>,\n      <a href=\"../rationale.html#rat:core:POSTPONE\">A.6.1.2033 POSTPONE</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.1.2033 POSTPONE -->\n      Typical use:\n      <p>\n      &nbsp;&nbsp; <a href=\"../core/Colon.html\">:</a> <code>ENDIF</code>\n      <strong>POSTPONE</strong> <a href=\"../core/THEN.html\">THEN</a>\n      <a href=\"../core/Semi.html\">;</a> <a href=\"../core/IMMEDIATE.html\">IMMEDIATE</a>\n      </p><p>\n      &nbsp;&nbsp; <a href=\"../core/Colon.html\">:</a> <code>X</code> ...\n      <a href=\"../core/IF.html\">IF</a> ... <code>ENDIF</code>\n      ... <a href=\"../core/Semi.html\">;</a>\n      </p><p>\n      <strong>POSTPONE</strong> replaces most of the functionality of\n      <code>COMPILE</code> and  <a href=\"../core/BracketCOMPILE.html\">[COMPILE]</a>. <code>COMPILE</code> and\n      \n      <a href=\"../core/BracketCOMPILE.html\">[COMPILE]</a> are used for the same purpose: postpone the\n      compilation behavior of the next word in the parse area.\n      <code>COMPILE</code> was designed to be applied to non-immediate\n      words and <a href=\"../core/BracketCOMPILE.html\">[COMPILE]</a> to immediate words. This burdens\n      the programmer with needing to know which words in a system\n      are immediate. Consequently, Forth standards have had to\n      specify the immediacy or non-immediacy of all words covered by\n      the standard. This unnecessarily constrains implementors.\n      </p><p>\n      A second problem with <code>COMPILE</code> is that some\n      programmers have come to expect and exploit a particular\n      implementation, namely:\n      </p><p>\n      &nbsp;&nbsp; <a href=\"../core/Colon.html\">:</a> <code>COMPILE</code> <a href=\"../core/Rfrom.html\">R&gt;</a>\n      <a href=\"../core/DUP.html\">DUP</a> <a href=\"../core/Fetch.html\">@</a> <a href=\"../core/Comma.html\">,</a> <a href=\"../core/CELLPlus.html\">CELL+</a> <a href=\"../core/toR.html\">&gt;R</a>\n      <a href=\"../core/Semi.html\">;</a>\n      </p><p>\n      This implementation will not work on native code Forth systems.\n      In a native code Forth using inline code expansion and peephole\n      optimization, the size of the object code produced varies; this\n      information is difficult to communicate to a \"dumb\"\n      <code>COMPILE</code>. A \"smart\" (i.e., immediate) <code>COMPILE</code>\n      would not have this problem, but this was forbidden in previous\n      standards.\n      </p><p>\n      For these reasons, <code>COMPILE</code> has not been included in\n      the standard and <a href=\"../core/BracketCOMPILE.html\">[COMPILE]</a> has been moved in favor of\n      <strong>POSTPONE</strong>. Additional discussion can be found in Hayes,\n      J.R., \"Postpone\", <em>Proceedings of the 1989 Rochester\n      Forth Conference</em>.\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.2033 POSTPONE -->\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;GT4&nbsp;<strong>POSTPONE</strong>&nbsp;GT1&nbsp;<a href=\"../core/Semi.html\">;</a>&nbsp;<a href=\"../core/IMMEDIATE.html\">IMMEDIATE</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;GT5&nbsp;GT4&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ GT5 -&gt; 123 }T</span>\n      <p>\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;GT6&nbsp;345&nbsp;<a href=\"../core/Semi.html\">;</a>&nbsp;<a href=\"../core/IMMEDIATE.html\">IMMEDIATE</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;GT7&nbsp;<strong>POSTPONE</strong>&nbsp;GT6&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ GT7 -&gt; 345 }T</span>\n      \n      \n      </p>"
                    }
                }
            },
            "Plus": {
                "id": "core:+",
                "number": "6.1.0120",
                "name": "+",
                "english": "plus",
                "list": "CORE",
                "basename": "Plus",
                "stackEffect": {
                    "html": {
                        " ": "( <em>n<sub>1</sub> | u<sub>1</sub> n<sub>2</sub> | u<sub>2</sub></em> -- <em>n<sub>3</sub> | u<sub>3</sub></em> )"
                    },
                    "plain": {
                        " ": "( n1 | u1 n2 | u2 -- n3 | u3 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>n<sub>1</sub> | u<sub>1</sub> n<sub>2</sub> | u<sub>2</sub></em> -- <em>n<sub>3</sub> | u<sub>3</sub></em> )\n      <p>\n      Add <em>n<sub>2</sub> | u<sub>2</sub></em> to <em>n<sub>1</sub> | u<sub>1</sub></em>, giving the sum\n      <em>n<sub>3</sub> | u<sub>3</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:aaddr\">3.3.3.1 Address alignment</a></strong>.\n      <p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0120 + -->\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;5&nbsp;<strong>+</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;0&nbsp;<strong>+</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;-5&nbsp;<strong>+</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-5 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-5&nbsp;&nbsp;0&nbsp;<strong>+</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-5 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;2&nbsp;<strong>+</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;-2&nbsp;<strong>+</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;&nbsp;2&nbsp;<strong>+</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;-2&nbsp;<strong>+</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-3 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;&nbsp;1&nbsp;<strong>+</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0 }T</span> <br>\n      <span class=\"tt\">T{ MID-UINT&nbsp;&nbsp;1&nbsp;<strong>+</strong> -&gt; MID-UINT+1 }T</span>\n      \n      \n      "
                    }
                }
            },
            "PlusLOOP": {
                "id": "core:+LOOP",
                "number": "6.1.0140",
                "name": "+LOOP",
                "english": "plus-loop",
                "list": "CORE",
                "basename": "PlusLOOP",
                "stackEffect": {
                    "html": {
                        "Compilation:": "( C: <em>do-sys</em> -- )",
                        "Run-time:": "( <em>n</em> -- )\n      ( R: <em>loop-sys<sub>1</sub></em> -- <em> | loop-sys<sub>2</sub></em> )"
                    },
                    "plain": {
                        "Compilation:": "( C: do-sys -- )",
                        "Run-time:": "( n -- )\n( R: loop-sys1 --  | loop-sys2 )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      ( C: <em>do-sys</em> -- )\n      <p>\n      Append the run-time semantics given below to the current\n      definition. Resolve the destination of all unresolved\n      occurrences of <a href=\"../core/LEAVE.html\">LEAVE</a> between the location given\n      by <em>do-sys</em> and the next location for a transfer of\n      control, to execute the words following <strong>+LOOP</strong>.\n      </p><p>\n        \n      </p>"
                    },
                    "Run-time:": {
                        "name": "Run-time:",
                        "html": "\n\n\n      ( <em>n</em> -- )\n      ( R: <em>loop-sys<sub>1</sub></em> -- <em> | loop-sys<sub>2</sub></em> )\n      <p>\n      An ambiguous condition exists if the loop control parameters\n      are unavailable. Add <em>n</em> to the loop index. If the loop\n      index did not cross the boundary between the loop limit minus\n      one and the loop limit, continue execution at the beginning\n      of the loop. Otherwise, discard the current loop control\n      parameters and continue execution immediately following the\n      loop.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/DO.html\">6.1.1240 DO</a>,\n      <a href=\"../core/I.html\">6.1.1680 I</a>,\n      <a href=\"../core/LEAVE.html\">6.1.1760 LEAVE</a>,\n      <a href=\"../rationale.html#rat:core:+LOOP\">A.6.1.0140 +LOOP</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.1.0140 +LOOP -->\n      Typical use:\n      <a href=\"../core/Colon.html\">:</a> <code>X</code>  ... limit first <a href=\"../core/DO.html\">DO</a>\n      ... step <strong>+LOOP</strong>\n      <a href=\"../core/Semi.html\">;</a>\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0140 +LOOP -->\n            <div class=\"tt\">\n<span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;GD2&nbsp;<a href=\"../core/DO.html\">DO</a>&nbsp;<a href=\"../core/I.html\">I</a>&nbsp;-1&nbsp;<strong>+LOOP</strong>&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;GD2 -&gt; 4&nbsp;3&nbsp;2&nbsp;&nbsp;1 }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;GD2 -&gt; 2&nbsp;1&nbsp;0&nbsp;-1 }T</span> <br>\n        <span class=\"tt\">T{ MID-UINT&nbsp;MID-UINT+1&nbsp;GD2 -&gt; MID-UINT+1&nbsp;MID-UINT }T</span>\n        <p>\n        <a href=\"../core/VARIABLE.html\">VARIABLE</a> gditerations <br>\n        <a href=\"../core/VARIABLE.html\">VARIABLE</a> gdincrement\n        </p><p>\n        <a href=\"../core/Colon.html\">:</a> gd7 <a href=\"../core/p.html\">(</a> limit start increment -- ) <br>\n        &nbsp;&nbsp; gdincrement <a href=\"../core/Store.html\">!</a> <br>\n        &nbsp;&nbsp; 0 gditerations <a href=\"../core/Store.html\">!</a> <br>\n        &nbsp;&nbsp; <a href=\"../core/DO.html\">DO</a> <br>\n        &nbsp;&nbsp;&nbsp;&nbsp; 1 gditerations <a href=\"../core/PlusStore.html\">+!</a> <br>\n        &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/I.html\">I</a> <br>\n        &nbsp;&nbsp;&nbsp;&nbsp; gditerations <a href=\"../core/Fetch.html\">@</a>  6 <a href=\"../core/Equal.html\">=</a> <a href=\"../core/IF.html\">IF</a> <a href=\"../core/LEAVE.html\">LEAVE</a> <a href=\"../core/THEN.html\">THEN</a> <br>\n        &nbsp;&nbsp;&nbsp;&nbsp; gdincrement <a href=\"../core/Fetch.html\">@</a> <br>\n        &nbsp;&nbsp; <strong>+LOOP</strong> gditerations <a href=\"../core/Fetch.html\">@</a> <br>\n        <a href=\"../core/Semi.html\">;</a>\n        </p><p>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;4&nbsp;&nbsp;-1&nbsp;gd7 -&gt; &nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;4&nbsp;&nbsp;-1&nbsp;gd7 -&gt; &nbsp;4&nbsp;&nbsp;3&nbsp;&nbsp;2&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;1&nbsp;&nbsp;-1&nbsp;gd7 -&gt; &nbsp;1&nbsp;&nbsp;0&nbsp;-1&nbsp;-2&nbsp;&nbsp;-3&nbsp;&nbsp;-4&nbsp;6&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;0&nbsp;gd7 -&gt; &nbsp;1&nbsp;&nbsp;1&nbsp;&nbsp;1&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;1&nbsp;6&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;0&nbsp;gd7 -&gt; &nbsp;0&nbsp;&nbsp;0&nbsp;&nbsp;0&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;0&nbsp;6&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;0&nbsp;gd7 -&gt; &nbsp;4&nbsp;&nbsp;4&nbsp;&nbsp;4&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;4&nbsp;6&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;1&nbsp;gd7 -&gt; &nbsp;4&nbsp;&nbsp;5&nbsp;&nbsp;6&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;9&nbsp;6&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;1&nbsp;gd7 -&gt; &nbsp;1&nbsp;&nbsp;2&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;1&nbsp;gd7 -&gt; &nbsp;4&nbsp;&nbsp;5&nbsp;&nbsp;6&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;9&nbsp;6&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;2&nbsp;-1&nbsp;&nbsp;-1&nbsp;gd7 -&gt; -1&nbsp;-2&nbsp;-3&nbsp;-4&nbsp;&nbsp;-5&nbsp;&nbsp;-6&nbsp;6&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;-1&nbsp;&nbsp;2&nbsp;&nbsp;-1&nbsp;gd7 -&gt; &nbsp;2&nbsp;&nbsp;1&nbsp;&nbsp;0&nbsp;-1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;2&nbsp;-1&nbsp;&nbsp;&nbsp;0&nbsp;gd7 -&gt; -1&nbsp;-1&nbsp;-1&nbsp;-1&nbsp;&nbsp;-1&nbsp;&nbsp;-1&nbsp;6&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;-1&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;0&nbsp;gd7 -&gt; &nbsp;2&nbsp;&nbsp;2&nbsp;&nbsp;2&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;2&nbsp;6&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;-1&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;1&nbsp;gd7 -&gt; &nbsp;2&nbsp;&nbsp;3&nbsp;&nbsp;4&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;6&nbsp;&nbsp;&nbsp;7&nbsp;6&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;2&nbsp;-1&nbsp;&nbsp;&nbsp;1&nbsp;gd7 -&gt; -1&nbsp;0&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;-20&nbsp;30&nbsp;-10&nbsp;gd7 -&gt; 30&nbsp;20&nbsp;10&nbsp;&nbsp;0&nbsp;-10&nbsp;-20&nbsp;6&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;-20&nbsp;31&nbsp;-10&nbsp;gd7 -&gt; 31&nbsp;21&nbsp;11&nbsp;&nbsp;1&nbsp;&nbsp;-9&nbsp;-19&nbsp;6&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;-20&nbsp;29&nbsp;-10&nbsp;gd7 -&gt; 29&nbsp;19&nbsp;&nbsp;9&nbsp;-1&nbsp;-11&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp; }T</span>\n        </p><p>\n        <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">With large and small increments</span>\n        </p><p>\n        MAX-UINT 8 RSHIFT 1+ CONSTANT ustep <br>\n        ustep NEGATE CONSTANT -ustep <br>\n        MAX-INT 7 RSHIFT 1+ CONSTANT step <br>\n        step NEGATE CONSTANT -step\n        </p><p>\n        <a href=\"../core/VARIABLE.html\">VARIABLE</a> bump\n        </p><p>\n        <span class=\"tt\">T{ &nbsp;<a href=\"../core/Colon.html\">:</a>&nbsp;gd8&nbsp;bump&nbsp;<a href=\"../core/Store.html\">!</a>&nbsp;<a href=\"../core/DO.html\">DO</a>&nbsp;<a href=\"../core/OnePlus.html\">1+</a>&nbsp;bump&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<strong>+LOOP</strong>&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span>\n        </p><p>\n        <span class=\"tt\">T{ &nbsp;0&nbsp;MAX-UINT&nbsp;0&nbsp;ustep&nbsp;gd8 -&gt; 256 }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;0&nbsp;0&nbsp;MAX-UINT&nbsp;-ustep&nbsp;gd8 -&gt; 256 }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;0&nbsp;MAX-INT&nbsp;MIN-INT&nbsp;step&nbsp;gd8 -&gt; 256 }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;0&nbsp;MIN-INT&nbsp;MAX-INT&nbsp;-step&nbsp;gd8 -&gt; 256 }T</span>\n        \n        \n        </p></div>\n      "
                    }
                }
            },
            "PlusStore": {
                "id": "core:+!",
                "number": "6.1.0130",
                "name": "+!",
                "english": "plus-store",
                "list": "CORE",
                "basename": "PlusStore",
                "stackEffect": {
                    "html": {
                        " ": "( <em>n | u a-addr</em> -- )"
                    },
                    "plain": {
                        " ": "( n | u a-addr -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>n | u a-addr</em> -- )\n      <p>\n      Add <em>n | u</em> to the single-cell number at <em>a-addr</em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:aaddr\">3.3.3.1 Address alignment</a></strong>.\n      <p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0130 +! -->\n      <span class=\"tt\">T{ &nbsp;0&nbsp;1ST&nbsp;<a href=\"../core/Store.html\">!</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -&gt; &nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;1&nbsp;1ST&nbsp;<strong>+!</strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -&gt; &nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;1ST&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -&gt; 1 }T</span> <br>\n      <span class=\"tt\">T{ -1&nbsp;1ST&nbsp;<strong>+!</strong>&nbsp;1ST&nbsp;<a href=\"../core/Fetch.html\">@</a> -&gt; 0 }T</span>\n      \n      \n      "
                    }
                }
            },
            "QUIT": {
                "id": "core:QUIT",
                "number": "6.1.2050",
                "name": "QUIT",
                "english": " ",
                "list": "CORE",
                "basename": "QUIT",
                "stackEffect": {
                    "html": {
                        " ": "( -- )\n      ( R: <em>i * x</em> -- )"
                    },
                    "plain": {
                        " ": "( -- )\n( R: i * x -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- )\n      ( R: <em>i * x</em> -- )\n      <p>\n      Empty the return stack, store zero in <a href=\"../core/SOURCE-ID.html\">SOURCE-ID</a> if it is\n      present, make the user input device the input source, and enter\n      interpretation state. Do not display a message. Repeat the\n      following:\n      </p><ul>\n      <li> Accept a line from the input source into the input buffer,\n      set <a href=\"../core/toIN.html\">&gt;IN</a> to zero, and interpret.\n      </li>\n      <li> Display the implementation-defined system prompt if in\n      interpretation state, all processing has been completed,\n      and no ambiguous condition exists.\n      </li>\n</ul>\n      <p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:command\">3.4 The Forth text interpreter</a></strong>.\n      <p>\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n\n      <a href=\"../core/Colon.html\">:</a> <strong>QUIT</strong> <br>\n      &nbsp;&nbsp; <a href=\"../core/p.html\">(</a> <span class=\"rm\">empty the return stack and set the input source to the user input device</span> ) <br>\n      &nbsp;&nbsp; <a href=\"../core/POSTPONE.html\">POSTPONE</a> <a href=\"../core/Bracket.html\">[</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/REFILL.html\">REFILL</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/WHILE.html\">WHILE</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/BracketTick.html\">[']</a> INTERPRET <a href=\"../exception/CATCH.html\">CATCH</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/CASE.html\">CASE</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp;  0 <a href=\"../core/OF.html\">OF</a> <a href=\"../core/STATE.html\">STATE</a> <a href=\"../core/Fetch.html\">@</a> <a href=\"../core/ZeroEqual.html\">0=</a> <a href=\"../core/IF.html\">IF</a>\n      <a href=\"../core/Dotq.html\">.\"</a> OK\" <a href=\"../core/THEN.html\">THEN</a> <a href=\"../core/CR.html\">CR</a> <a href=\"../core/ENDOF.html\">ENDOF</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; -1 <a href=\"../core/OF.html\">OF</a> <a href=\"../core/p.html\">(</a> <span class=\"rm\">Aborted</span> ) <a href=\"../core/ENDOF.html\">ENDOF</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; -2 <a href=\"../core/OF.html\">OF</a> <a href=\"../core/p.html\">(</a> <span class=\"rm\">display message from <a href=\"../core/ABORTq.html\">ABORT\"</a></span> ) <a href=\"../core/ENDOF.html\">ENDOF</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/p.html\">(</a> <span class=\"rm\">default</span> ) <a href=\"../core/DUP.html\">DUP</a> <a href=\"../core/Dotq.html\">.\"</a> Exception # \" <a href=\"../core/d.html\">.</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/ENDCASE.html\">ENDCASE</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/REPEAT.html\">REPEAT</a> <a href=\"../tools/BYE.html\">BYE</a> <br>\n      <a href=\"../core/Semi.html\">;</a>\n      <p>\n            </p><div class=\"rm\">\nThis assumes the existence of a system-implementation word\n        <code>INTERPRET</code> that embodies the text interpreter semantics\n        described in <strong><a href=\"../usage.html#usage:command\">3.4 The Forth text interpreter</a></strong>.\n        Further discussion of the interpret loop can be found in\n        <a href=\"../rationale.html#rat:core:COMPILE,\">A.6.2.0945 COMPILE,</a>.\n        \n        \n        </div>\n      "
                    }
                }
            },
            "RECURSE": {
                "id": "core:RECURSE",
                "number": "6.1.2120",
                "name": "RECURSE",
                "english": " ",
                "list": "CORE",
                "basename": "RECURSE",
                "stackEffect": {
                    "html": {
                        "Compilation:": "( -- )"
                    },
                    "plain": {
                        "Compilation:": "( -- )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      ( -- )\n      <p>\n      Append the execution semantics of the current definition to\n      the current definition. An ambiguous condition exists if\n      <strong>RECURSE</strong> appears in a definition after <a href=\"../core/DOES.html\">DOES&gt;</a>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/DOES.html\">6.1.1250 DOES&gt;</a>,\n      <a href=\"../core/RECURSE.html\">6.1.2120 RECURSE</a>,\n      <a href=\"../rationale.html#rat:core:RECURSE\">A.6.1.2120 RECURSE</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.1.2120 RECURSE -->\n      Typical use:\n      <a href=\"../core/Colon.html\">:</a> <code>X</code> ... <strong>RECURSE</strong> ... <a href=\"../core/Semi.html\">;</a>\n      <p>\n      This is Forth's recursion operator; in some implementations it\n      is called <code>MYSELF</code>. The usual example is the coding of\n      the factorial function.\n      </p><p>\n            </p><div class=\"quote\">\n        <div class=\"tt\">\n<a href=\"../core/Colon.html\">:</a> FACTORIAL <a href=\"../core/p.html\">(</a> +n1 -- +n2) <br>\n          &nbsp;&nbsp; <a href=\"../core/DUP.html\">DUP</a> 2 <a href=\"../core/less.html\">&lt;</a> <a href=\"../core/IF.html\">IF</a> \n          <a href=\"../core/DROP.html\">DROP</a> 1 <a href=\"../core/EXIT.html\">EXIT</a> \n          <a href=\"../core/THEN.html\">THEN</a> <br>\n          &nbsp;&nbsp; <a href=\"../core/DUP.html\">DUP</a> 1-  <strong>RECURSE</strong>  <a href=\"../core/Times.html\">*</a> <br>\n          <a href=\"../core/Semi.html\">;</a>\n          \n          </div>\n        </div>\n      <p>\n      <em>n<sub>2</sub> = n<sub>1</sub>(n<sub>1</sub>-1)(n<sub>1</sub>-2)...(2)(1)</em>, the product of <em>n<sub>1</sub></em>\n      with all positive integers less than itself (as a special case,\n      zero factorial equals one). While beloved of computer scientists,\n      recursion makes unusually heavy use of both stacks and should\n      therefore be used with caution. See alternate definition in\n      <a href=\"../rationale.html#rat:core:REPEAT\">A.6.1.2140 REPEAT</a>.\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.2120 RECURSE -->\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;GI6&nbsp;<a href=\"../core/p.html\">(</a>&nbsp;N&nbsp;--&nbsp;0,1,..N&nbsp;)&nbsp;<br>\n      \n      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/DUP.html\">DUP</a>&nbsp;<a href=\"../core/IF.html\">IF</a>&nbsp;<a href=\"../core/DUP.html\">DUP</a>&nbsp;<a href=\"../core/toR.html\">&gt;R</a>&nbsp;<a href=\"../core/OneMinus.html\">1-</a>&nbsp;<strong>RECURSE</strong>&nbsp;<a href=\"../core/Rfrom.html\">R&gt;</a>\n      <a href=\"../core/THEN.html\">THEN</a>&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ 0&nbsp;GI6 -&gt; 0 }T</span> <br>\n      <span class=\"tt\">T{ 1&nbsp;GI6 -&gt; 0&nbsp;1 }T</span> <br>\n      <span class=\"tt\">T{ 2&nbsp;GI6 -&gt; 0&nbsp;1&nbsp;2 }T</span> <br>\n      <span class=\"tt\">T{ 3&nbsp;GI6 -&gt; 0&nbsp;1&nbsp;2&nbsp;3 }T</span> <br>\n      <span class=\"tt\">T{ 4&nbsp;GI6 -&gt; 0&nbsp;1&nbsp;2&nbsp;3&nbsp;4 }T</span>\n      <p>\n      <a href=\"../core/DECIMAL.html\">DECIMAL</a> <br>\n      <span class=\"tt\">T{ <a href=\"../core/ColonNONAME.html\">:NONAME</a>&nbsp;<a href=\"../core/p.html\">(</a>&nbsp;n&nbsp;--&nbsp;0,&nbsp;1,&nbsp;..,&nbsp;n&nbsp;)&nbsp;<br>\n      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/DUP.html\">DUP</a>&nbsp;<a href=\"../core/IF.html\">IF</a>&nbsp;<a href=\"../core/DUP.html\">DUP</a>&nbsp;<a href=\"../core/toR.html\">&gt;R</a>&nbsp;<a href=\"../core/OneMinus.html\">1-</a>&nbsp;<strong>RECURSE</strong>&nbsp;<a href=\"../core/Rfrom.html\">R&gt;</a>&nbsp;<a href=\"../core/THEN.html\">THEN</a>&nbsp;<br>\n      &nbsp;&nbsp;&nbsp;<a href=\"../core/Semi.html\">;</a>&nbsp;<br>\n      &nbsp;&nbsp;&nbsp;<a href=\"../core/CONSTANT.html\">CONSTANT</a>&nbsp;rn1 -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ 0&nbsp;rn1&nbsp;EXECUTE -&gt; 0 }T</span> <br>\n      <span class=\"tt\">T{ 4&nbsp;rn1&nbsp;EXECUTE -&gt; 0&nbsp;1&nbsp;2&nbsp;3&nbsp;4 }T</span>\n      </p><p>\n      <a href=\"../core/ColonNONAME.html\">:NONAME</a>  <a href=\"../core/p.html\">(</a> n -- n1 ) <br>\n      &nbsp;&nbsp; <a href=\"../core/OneMinus.html\">1-</a> <a href=\"../core/DUP.html\">DUP</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/CASE.html\">CASE</a> 0 <a href=\"../core/OF.html\">OF</a> <a href=\"../core/EXIT.html\">EXIT</a> <a href=\"../core/ENDOF.html\">ENDOF</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; 1 <a href=\"../core/OF.html\">OF</a> 11 <a href=\"../core/SWAP.html\">SWAP</a> <strong>RECURSE</strong> <a href=\"../core/ENDOF.html\">ENDOF</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; 2 <a href=\"../core/OF.html\">OF</a> 22 <a href=\"../core/SWAP.html\">SWAP</a> <strong>RECURSE</strong> <a href=\"../core/ENDOF.html\">ENDOF</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; 3 <a href=\"../core/OF.html\">OF</a> 33 <a href=\"../core/SWAP.html\">SWAP</a> <strong>RECURSE</strong> <a href=\"../core/ENDOF.html\">ENDOF</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/DROP.html\">DROP</a> <a href=\"../core/ABS.html\">ABS</a> <strong>RECURSE</strong> <a href=\"../core/EXIT.html\">EXIT</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/ENDCASE.html\">ENDCASE</a> <br>\n      <a href=\"../core/Semi.html\">;</a> <a href=\"../core/CONSTANT.html\">CONSTANT</a> rn2\n      </p><p>\n      <span class=\"tt\">T{ &nbsp;1&nbsp;rn2&nbsp;EXECUTE -&gt; 0 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;2&nbsp;rn2&nbsp;EXECUTE -&gt; 11&nbsp;0 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;4&nbsp;rn2&nbsp;EXECUTE -&gt; 33&nbsp;22&nbsp;11&nbsp;0 }T</span> <br>\n      <span class=\"tt\">T{ 25&nbsp;rn2&nbsp;EXECUTE -&gt; 33&nbsp;22&nbsp;11&nbsp;0 }T</span>\n      \n      \n      </p>"
                    }
                }
            },
            "REFILL": {
                "id": "core:REFILL",
                "number": "6.2.2125",
                "name": "REFILL",
                "english": " ",
                "list": "CORE EXT",
                "basename": "REFILL",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>flag</em> )"
                    },
                    "plain": {
                        " ": "( -- flag )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>flag</em> )\n      <p>\n      Attempt to fill the input buffer from the input source,\n      returning a true flag if successful.\n      </p><p>\n      When the input source is the user input device, attempt to\n      receive input into the terminal input buffer. If successful,\n      make the result the input buffer, set <a href=\"../core/toIN.html\">&gt;IN</a> to zero, and\n      return <em>true</em>. Receipt of a line containing no characters\n      is considered successful. If there is no input available from\n      the current input source, return <em>false</em>.\n      </p><p>\n      When the input source is a string from <a href=\"../core/EVALUATE.html\">EVALUATE</a>, return\n      <em>false</em> and perform no other action.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../block/REFILL.html\">7.6.2.2125 REFILL</a>,\n      <a href=\"../file/REFILL.html\">11.6.2.2125 REFILL</a>,\n      <a href=\"../rationale.html#rat:core:REFILL\">A.6.2.2125 REFILL</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.2.2125 REFILL -->\n      <strong>REFILL</strong> is designed to behave reasonably for all possible\n      input sources. If the input source is coming from the user,\n      <strong>REFILL</strong> could still return a false value if, for instance,\n      a communication channel closes so that the system knows that no\n      more input will be available.\n      \n      \n      "
                    }
                }
            },
            "REPEAT": {
                "id": "core:REPEAT",
                "number": "6.1.2140",
                "name": "REPEAT",
                "english": " ",
                "list": "CORE",
                "basename": "REPEAT",
                "stackEffect": {
                    "html": {
                        "Compilation:": "( C: <em>orig dest</em> -- )",
                        "Run-time:": "( -- )"
                    },
                    "plain": {
                        "Compilation:": "( C: orig dest -- )",
                        "Run-time:": "( -- )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      ( C: <em>orig dest</em> -- )\n      <p>\n      Append the run-time semantics given below to the current\n      definition, resolving the backward reference <em>dest</em>.\n      Resolve the forward reference <em>orig</em> using the location\n      following the appended run-time semantics.\n      </p><p>\n        \n      </p>"
                    },
                    "Run-time:": {
                        "name": "Run-time:",
                        "html": "\n\n\n      ( -- )\n      <p>\n      Continue execution at the location given by <em>dest</em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/BEGIN.html\">6.1.0760 BEGIN</a>,\n      <a href=\"../core/WHILE.html\">6.1.2430 WHILE</a>,\n      <a href=\"../rationale.html#rat:core:REPEAT\">A.6.1.2140 REPEAT</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.1.2140 REPEAT -->\n      Typical use:\n            <div class=\"quote\">\n        <div class=\"tt\">\n<a href=\"../core/Colon.html\">:</a> FACTORIAL <a href=\"../core/p.html\">(</a> +n1 -- +n2 ) <br>\n          &nbsp;&nbsp; <a href=\"../core/DUP.html\">DUP</a> 2 <a href=\"../core/less.html\">&lt;</a> <a href=\"../core/IF.html\">IF</a> \n          <a href=\"../core/DROP.html\">DROP</a> 1 <a href=\"../core/EXIT.html\">EXIT</a>  <a href=\"../core/THEN.html\">THEN</a> <br>\n          &nbsp;&nbsp; <a href=\"../core/DUP.html\">DUP</a> <br>\n          &nbsp;&nbsp; <a href=\"../core/BEGIN.html\">BEGIN</a>  <a href=\"../core/DUP.html\">DUP</a> 2 <a href=\"../core/more.html\">&gt;</a> <a href=\"../core/WHILE.html\">WHILE</a> <br>\n          &nbsp;&nbsp;   1-  <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../core/OVER.html\">OVER</a> <a href=\"../core/Times.html\">*</a>  <a href=\"../core/SWAP.html\">SWAP</a> <br>\n          &nbsp;&nbsp; <strong>REPEAT</strong> <a href=\"../core/DROP.html\">DROP</a> <br>\n          <a href=\"../core/Semi.html\">;</a>\n          \n          </div>\n        </div>\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.2140 REPEAT -->\n      See <a href=\"../testsuite.html#test:core:WHILE\">F.6.1.2430 WHILE</a>.\n      \n      \n      "
                    }
                }
            },
            "RESTORE-INPUT": {
                "id": "core:RESTORE-INPUT",
                "number": "6.2.2148",
                "name": "RESTORE-INPUT",
                "english": " ",
                "list": "CORE EXT",
                "basename": "RESTORE-INPUT",
                "stackEffect": {
                    "html": {
                        " ": "( <em>x<sub>n</sub> ... x<sub>1</sub> n</em> -- <em>flag</em> )"
                    },
                    "plain": {
                        " ": "( xn ... x1 n -- flag )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>x<sub>n</sub> ... x<sub>1</sub> n</em> -- <em>flag</em> )\n      <p>\n      Attempt to restore the input source specification to the state\n      described by <em>x<sub>1</sub></em> through <em>x<sub>n</sub></em>. <em>flag</em> is\n      true if the input source specification cannot be so restored.\n      </p><p>\n      An ambiguous condition exists if the input source represented\n      by the arguments is not the same as the current input source.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../tools/NtoR.html\">15.6.2.1908 N&gt;R</a>, <a href=\"../tools/NRfrom.html\">15.6.2.1940 NR&gt;</a>,\n      <a href=\"../rationale.html#rat:core:SAVE-INPUT\">A.6.2.2182 SAVE-INPUT</a>.\n      \n      "
                    }
                }
            },
            "RFetch": {
                "id": "core:R@",
                "number": "6.1.2070",
                "name": "R@",
                "english": "r-fetch",
                "list": "CORE",
                "basename": "RFetch",
                "stackEffect": {
                    "html": {
                        "Execution:": "( -- <em>x</em> )\n      ( R: <em>x</em> -- <em>x</em> )"
                    },
                    "plain": {
                        "Execution:": "( -- x )\n( R: x -- x )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Execution:": {
                        "name": "Execution:",
                        "html": "\n\n\n      ( -- <em>x</em> )\n      ( R: <em>x</em> -- <em>x</em> )\n      <p>\n      Copy <em>x</em> from the return stack to the data stack.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:returnstack\">3.2.3.3 Return stack</a></strong>,\n      <a href=\"../core/toR.html\">6.1.0580 &gt;R</a>,\n      <a href=\"../core/Rfrom.html\">6.1.2060 R&gt;</a>,\n      <a href=\"../core/TwotoR.html\">6.2.0340 2&gt;R</a>,\n      <a href=\"../core/TwoRfrom.html\">6.2.0410 2R&gt;</a>,\n      <a href=\"../core/TwoRFetch.html\">6.2.0415 2R@</a>.\n      <p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.2070 R@ -->\n      See <a href=\"../testsuite.html#test:core:toR\">F.6.1.0580 &gt;R</a>.\n      \n      \n      "
                    }
                }
            },
            "ROLL": {
                "id": "core:ROLL",
                "number": "6.2.2150",
                "name": "ROLL",
                "english": " ",
                "list": "CORE EXT",
                "basename": "ROLL",
                "stackEffect": {
                    "html": {
                        " ": "( <em>x<sub>u</sub> x<sub>u-1</sub> ... x<sub>0</sub> u</em> -- <em>x<sub>u-1</sub> ... x<sub>0</sub> x<sub>u</sub></em> )"
                    },
                    "plain": {
                        " ": "( xu xu-1 ... x0 u -- xu-1 ... x0 xu )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>x<sub>u</sub> x<sub>u-1</sub> ... x<sub>0</sub> u</em> -- <em>x<sub>u-1</sub> ... x<sub>0</sub> x<sub>u</sub></em> )\n      <p>\n      Remove <em>u</em>. Rotate <em>u</em>+1 items on the top of the stack.\n      An ambiguous condition exists if there are less than <em>u</em>+2\n      items on the stack before <strong>ROLL</strong> is executed.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../rationale.html#rat:core:ROLL\">A.6.2.2150 ROLL</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.2.2150 ROLL -->\n      <code>2</code> <strong>ROLL</strong> is equivalent to <a href=\"../core/ROT.html\">ROT</a>,\n      <code>1</code> <strong>ROLL</strong> is equivalent to <a href=\"../core/SWAP.html\">SWAP</a> and\n      <code>0</code> <strong>ROLL</strong> is a null operation.\n      \n      \n      "
                    }
                }
            },
            "ROT": {
                "id": "core:ROT",
                "number": "6.1.2160",
                "name": "ROT",
                "english": "rote",
                "list": "CORE",
                "basename": "ROT",
                "stackEffect": {
                    "html": {
                        " ": "( <em>x<sub>1</sub> x<sub>2</sub> x<sub>3</sub></em> -- <em>x<sub>2</sub> x<sub>3</sub> x<sub>1</sub></em> )"
                    },
                    "plain": {
                        " ": "( x1 x2 x3 -- x2 x3 x1 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>x<sub>1</sub> x<sub>2</sub> x<sub>3</sub></em> -- <em>x<sub>2</sub> x<sub>3</sub> x<sub>1</sub></em> )\n      <p>\n      Rotate the top three stack entries.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.2160 ROT -->\n      <span class=\"tt\">T{ 1&nbsp;2&nbsp;3&nbsp;<strong>ROT</strong> -&gt; 2&nbsp;3&nbsp;1 }T</span>\n      \n      \n      "
                    }
                }
            },
            "RSHIFT": {
                "id": "core:RSHIFT",
                "number": "6.1.2162",
                "name": "RSHIFT",
                "english": "r-shift",
                "list": "CORE",
                "basename": "RSHIFT",
                "stackEffect": {
                    "html": {
                        " ": "( <em>x<sub>1</sub> u</em> -- <em>x<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( x1 u -- x2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>x<sub>1</sub> u</em> -- <em>x<sub>2</sub></em> )\n      <p>\n      Perform a logical right shift of <em>u</em> bit-places on\n      <em>x<sub>1</sub></em>, giving <em>x<sub>2</sub></em>. Put zeroes into the most\n      significant bits vacated by the shift. An ambiguous condition\n      exists if <em>u</em> is greater than or equal to the number of\n      bits in a cell.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.2162 RSHIFT -->\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;1&nbsp;0&nbsp;<strong>RSHIFT</strong> -&gt; 1 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;1&nbsp;1&nbsp;<strong>RSHIFT</strong> -&gt; 0 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;2&nbsp;1&nbsp;<strong>RSHIFT</strong> -&gt; 1 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;4&nbsp;2&nbsp;<strong>RSHIFT</strong> -&gt; 1 }T</span> <br>\n      <span class=\"tt\">T{ 8000&nbsp;F&nbsp;<strong>RSHIFT</strong> -&gt; 1 }T</span>\t\t\t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Biggest</span> <br>\n      <span class=\"tt\">T{ &nbsp;MSB&nbsp;1&nbsp;<strong>RSHIFT</strong>&nbsp;MSB&nbsp;<a href=\"../core/AND.html\">AND</a> -&gt; &nbsp;&nbsp;0 }T</span> &nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> RSHIFT <span class=\"rm\">zero fills MSBs</span> <br>\n      <span class=\"tt\">T{ &nbsp;MSB&nbsp;1&nbsp;<strong>RSHIFT</strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/TwoTimes.html\">2*</a>&nbsp; -&gt; MSB }T</span>\n      \n      \n      "
                    }
                }
            },
            "Rfrom": {
                "id": "core:Rfrom",
                "number": "6.1.2060",
                "name": "R>",
                "english": "r-from",
                "list": "CORE",
                "basename": "Rfrom",
                "stackEffect": {
                    "html": {
                        "Execution:": "( -- <em>x</em> )\n      ( R: <em>x</em> -- )"
                    },
                    "plain": {
                        "Execution:": "( -- x )\n( R: x -- )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Execution:": {
                        "name": "Execution:",
                        "html": "\n\n\n      ( -- <em>x</em> )\n      ( R: <em>x</em> -- )\n      <p>\n      Move <em>x</em> from the return stack to the data stack.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:returnstack\">3.2.3.3 Return stack</a></strong>,\n      <a href=\"../core/toR.html\">6.1.0580 &gt;R</a>,\n      <a href=\"../core/RFetch.html\">6.1.2070 R@</a>,\n      <a href=\"../core/TwotoR.html\">6.2.0340 2&gt;R</a>,\n      <a href=\"../core/TwoRfrom.html\">6.2.0410 2R&gt;</a>,\n      <a href=\"../core/TwoRFetch.html\">6.2.0415 2R@</a>.\n      <p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.2060 R> -->\n      See <a href=\"../testsuite.html#test:core:toR\">F.6.1.0580 &gt;R</a>.\n      \n      \n      "
                    }
                }
            },
            "SAVE-INPUT": {
                "id": "core:SAVE-INPUT",
                "number": "6.2.2182",
                "name": "SAVE-INPUT",
                "english": " ",
                "list": "CORE EXT",
                "basename": "SAVE-INPUT",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>x<sub>n</sub> ... x<sub>1</sub> n</em> )"
                    },
                    "plain": {
                        " ": "( -- xn ... x1 n )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>x<sub>n</sub> ... x<sub>1</sub> n</em> )\n      <p>\n      <em>x<sub>1</sub></em> through <em>x<sub>n</sub></em> describe the current state of the\n      input source specification for later use by <a href=\"../core/RESTORE-INPUT.html\">RESTORE-INPUT</a>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../tools/NtoR.html\">15.6.2.1908 N&gt;R</a>, <a href=\"../tools/NRfrom.html\">15.6.2.1940 NR&gt;</a>,\n      <a href=\"../rationale.html#rat:core:SAVE-INPUT\">A.6.2.2182 SAVE-INPUT</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.2.2182 SAVE-INPUT -->\n      <strong>SAVE-INPUT</strong> and <a href=\"../core/RESTORE-INPUT.html\">RESTORE-INPUT</a> allow the same\n      degree of input source repositioning within a text file as is\n      available with <a href=\"../block/BLOCK.html\">BLOCK</a> input. <strong>SAVE-INPUT</strong>\n      and <a href=\"../core/RESTORE-INPUT.html\">RESTORE-INPUT</a> \"hide the details\" of the operations\n      necessary to accomplish this repositioning, and are used the\n      same way with all input sources. This makes it easier for\n      programs to reposition the input source, because they do not\n      have to inspect several variables and take different action\n      depending on the values of those variables.\n      <p>\n      <strong>SAVE-INPUT</strong> and <a href=\"../core/RESTORE-INPUT.html\">RESTORE-INPUT</a> are intended for\n      repositioning within a single input source; for example, the\n      following scenario is NOT allowed for a Standard Program:\n      </p><p>\n            </p><div class=\"quote\">\n        <div class=\"tt\">\n<a href=\"../core/Colon.html\">:</a> XX <br>\n          &nbsp;&nbsp; <strong>SAVE-INPUT</strong>   <a href=\"../core/CREATE.html\">CREATE</a> <br>\n          &nbsp;&nbsp; <a href=\"../core/Sq.html\">S\"</a> RESTORE-INPUT\" <a href=\"../core/EVALUATE.html\">EVALUATE</a> <br>\n          &nbsp;&nbsp; <a href=\"../core/ABORTq.html\">ABORT\"</a> couldn't restore input\" <br>\n          <a href=\"../core/Semi.html\">;</a>\n          \n          </div>\n        </div>\n      <p>\n      This is incorrect because, at the time <a href=\"../core/RESTORE-INPUT.html\">RESTORE-INPUT</a> is\n      executed, the input source is the string via <a href=\"../core/EVALUATE.html\">EVALUATE</a>,\n      which is not the same input source that was in effect when\n      <strong>SAVE-INPUT</strong> was executed.\n      </p><p>\n      The following code is allowed:\n      </p><p>\n            </p><div class=\"quote\">\n        <div class=\"tt\">\n<a href=\"../core/Colon.html\">:</a> XX <br>\n          &nbsp;&nbsp; <strong>SAVE-INPUT</strong>   <a href=\"../core/CREATE.html\">CREATE</a> <br>\n          &nbsp;&nbsp; <a href=\"../core/Sq.html\">S\"</a> <a href=\"../core/Dotp.html\">.(</a> Hello)\" <a href=\"../core/EVALUATE.html\">EVALUATE</a> <br>\n          &nbsp;&nbsp; <a href=\"../core/RESTORE-INPUT.html\">RESTORE-INPUT</a> <a href=\"../core/ABORTq.html\">ABORT\"</a> couldn't restore input\" <br>\n          <a href=\"../core/Semi.html\">;</a>\n          \n          </div>\n        </div>\n      <p>\n      After <a href=\"../core/EVALUATE.html\">EVALUATE</a> returns, the input source specification\n      is restored to its previous state, thus\n      <a href=\"core:SAVE-INPUT\"><strong><code>SAVE-</code></strong></a>\n      <a href=\"core:SAVE-INPUT\"><strong><code>INPUT</code></strong></a>\n      and <a href=\"../core/RESTORE-INPUT.html\">RESTORE-INPUT</a> are called with the same input source\n      in effect.\n      </p><p>\n      In the above examples, the <a href=\"../core/EVALUATE.html\">EVALUATE</a> phrase could have\n      been replaced by a phrase involving <a href=\"../file/INCLUDE-FILE.html\">INCLUDE-FILE</a>\n      and the same rules would apply.\n      </p><p>\n      The standard does not specify what happens if a program\n      violates the above rules. A Standard System might check for\n      the violation and return an exception indication from\n      <a href=\"../core/RESTORE-INPUT.html\">RESTORE-INPUT</a>, or it might fail in an unpredictable\n      way.\n      </p><p>\n      The return value from <a href=\"../core/RESTORE-INPUT.html\">RESTORE-INPUT</a> is primarily\n      intended to report the case where the program attempts to\n      restore the position of an input source whose position cannot\n      be restored. The keyboard might be such an input source.\n      </p><p>\n      Nesting of <strong>SAVE-INPUT</strong> and <a href=\"../core/RESTORE-INPUT.html\">RESTORE-INPUT</a> is\n      allowed. For example, the following situation works as\n      expected:\n      </p><p>\n            </p><div class=\"quote\">\n        <div class=\"tt\">\n<a href=\"../core/Colon.html\">:</a> XX <br>\n          &nbsp;&nbsp; <strong>SAVE-INPUT</strong> <br>\n          &nbsp;&nbsp;   <a href=\"../core/Sq.html\">S\"</a> f1\" <a href=\"../file/INCLUDED.html\">INCLUDED</a> <br>\n          &nbsp;&nbsp;   <a href=\"../core/bs.html\">\\</a> The file \"f1\" includes: <br>\n          &nbsp;&nbsp;   <a href=\"../core/bs.html\">\\</a>    ... SAVE-INPUT ... RESTORE-INPUT ... <br>\n          &nbsp;&nbsp;   <a href=\"../core/bs.html\">\\</a> End of file \"f1\" <br>\n          &nbsp;&nbsp; <a href=\"../core/RESTORE-INPUT.html\">RESTORE-INPUT</a>   <a href=\"../core/ABORTq.html\">ABORT\"</a> couldn't restore input\" <br>\n          <a href=\"../core/Semi.html\">;</a>\n          \n          </div>\n        </div>\n      <p>\n      In principle, <a href=\"../core/RESTORE-INPUT.html\">RESTORE-INPUT</a> could be implemented to\n      \"always fail\", e.g.:\n      </p><p>\n            </p><div class=\"quote\">\n        <div class=\"tt\">\n<a href=\"../core/Colon.html\">:</a> <a href=\"../core/RESTORE-INPUT.html\">RESTORE-INPUT</a> <a href=\"../core/p.html\">(</a> x1 ... xn n -- flag ) <br>\n          &nbsp;&nbsp; 0 <a href=\"../core/qDO.html\">?DO</a> <a href=\"../core/DROP.html\">DROP</a> <a href=\"../core/LOOP.html\">LOOP</a> <a href=\"../core/TRUE.html\">TRUE</a> <br>\n          <a href=\"../core/Semi.html\">;</a>\n          \n          </div>\n        </div>\n      <p>\n      Such an implementation would not be useful in most cases. It\n      would be preferable for a system to leave <strong>SAVE-INPUT</strong>\n      and <a href=\"../core/RESTORE-INPUT.html\">RESTORE-INPUT</a> undefined, rather than to create a\n      useless implementation. In the absence of the words, the\n      application programmer could choose whether or not to create\n      \"dummy\" implementations or to work-around the problem in\n      some other way.\n      </p><p>\n      Examples of how an implementation might use the return values\n      from <strong>SAVE-INPUT</strong> to accomplish the save/restore function:\n      </p><p>\n      </p><div class=\"center\">\n\n        <table class=\"center\">\n        <tbody><tr valign=\"top\"><td colspan=\"5\"><hr></td></tr>\n        <tr valign=\"top\"><td>Input Source </td><td colspan=\"4\">possible stack values </td></tr>\n        <tr valign=\"top\"><td colspan=\"5\"><hr></td></tr>\n        <tr valign=\"top\"><td>block\t\t\t</td><td><a href=\"../core/toIN.html\">&gt;IN</a> <a href=\"../core/Fetch.html\">@</a> </td><td><a href=\"../block/BLK.html\">BLK</a> <a href=\"../core/Fetch.html\">@</a> </td><td><code>2</code> </td></tr>\n        <tr valign=\"top\"><td><a href=\"../core/EVALUATE.html\">EVALUATE</a>\t</td><td><a href=\"../core/toIN.html\">&gt;IN</a> <a href=\"../core/Fetch.html\">@</a> </td><td><code>1</code> </td></tr>\n        <tr valign=\"top\"><td>keyboard\t\t</td><td><a href=\"../core/toIN.html\">&gt;IN</a> <a href=\"../core/Fetch.html\">@</a> </td><td><code>1</code> </td></tr>\n        <tr valign=\"top\"><td>text file\t\t</td><td><a href=\"../core/toIN.html\">&gt;IN</a> <a href=\"../core/Fetch.html\">@</a> </td><td><code>lo-pos</code> </td><td><code>hi-pos</code> </td><td><code>3</code> </td></tr>\n        <tr valign=\"top\"><td colspan=\"5\"><hr></td></tr>\n        <tr valign=\"top\"><td></td></tr>\n        </tbody></table>\n        \n        </div>\n      <p>\n      These are examples only; a Standard Program may not assume any\n      particular meaning for the individual stack items returned by\n      <strong>SAVE-INPUT</strong>.\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n      <div class=\"tt\">\n<span class=\"rm\">Testing with a file source</span> <br>\n        <a href=\"../core/VARIABLE.html\">VARIABLE</a> siv -1 siv <a href=\"../core/Store.html\">!</a>\n        <p>\n        <a href=\"../core/Colon.html\">:</a> NeverExecuted <br>\n        &nbsp;&nbsp; <a href=\"../core/Dotq.html\">.\"</a> This should never be executed<code>\"</code> <a href=\"../core/ABORT.html\">ABORT</a> <br>\n        <a href=\"../core/Semi.html\">;</a>\n        </p><p>\n        11111 <strong>SAVE-INPUT</strong>\n        </p><p>\n        siv <a href=\"../core/Fetch.html\">@</a>\n        </p><p>\n        <a href=\"../tools/BracketIF.html\">[IF]</a> <br>\n        &nbsp;&nbsp; 0 siv <a href=\"../core/Store.html\">!</a> <br>\n        &nbsp;&nbsp; <a href=\"../core/RESTORE-INPUT.html\">RESTORE-INPUT</a> <br>\n        &nbsp;&nbsp; NeverExecuted <br>\n        <a href=\"../tools/BracketELSE.html\">[ELSE]</a> <br>\n        &nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Testing the ELSE part is executed</span> <br>\n        &nbsp;&nbsp; 22222 <br>\n        <a href=\"../tools/BracketTHEN.html\">[THEN]</a>\n        </p><p>\n        <span class=\"tt\">T{  -&gt; 11111&nbsp;0&nbsp;22222 }T</span> &nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">0 comes from <a href=\"../core/RESTORE-INPUT.html\">RESTORE-INPUT</a></span>\n        </p><p>\n        <span class=\"rm\">Testing with a string source</span> <br>\n        <a href=\"../core/VARIABLE.html\">VARIABLE</a> si_inc 0 si_inc <a href=\"../core/Store.html\">!</a>\n        </p><p>\n        <a href=\"../core/Colon.html\">:</a> si1 <br>\n        &nbsp;&nbsp; si_inc <a href=\"../core/Fetch.html\">@</a> <a href=\"../core/toIN.html\">&gt;IN</a> <a href=\"../core/PlusStore.html\">+!</a> <br>\n        &nbsp;&nbsp; 15 si_inc <a href=\"../core/Store.html\">!</a> <br>\n        <a href=\"../core/Semi.html\">;</a>\n        </p><p>\n        <a href=\"../core/Colon.html\">:</a> s$ <a href=\"../core/Sq.html\">S\"</a> <strong>SAVE-INPUT</strong> si1 <a href=\"../core/RESTORE-INPUT.html\">RESTORE-INPUT</a> 12345<code>\"</code> <a href=\"../core/Semi.html\">;</a>\n        </p><p>\n        <span class=\"tt\">T{ s$&nbsp;<a href=\"../core/EVALUATE.html\">EVALUATE</a>&nbsp;si_inc&nbsp;<a href=\"../core/Fetch.html\">@</a> -&gt; 0&nbsp;2345&nbsp;15 }T</span>\n        </p><p>\n        <span class=\"rm\">Testing nesting</span> <br>\n        <a href=\"../core/Colon.html\">:</a> read_a_line <br>\n        &nbsp;&nbsp; <a href=\"../core/REFILL.html\">REFILL</a> <a href=\"../core/ZeroEqual.html\">0=</a> <br>\n        &nbsp;&nbsp; <a href=\"../core/ABORTq.html\">ABORT\"</a> <a href=\"../core/REFILL.html\">REFILL</a> failed<code>\"</code> <br>\n        <a href=\"../core/Semi.html\">;</a>\n        </p><p>\n        0 si_inc <a href=\"../core/Store.html\">!</a> <br>\n        <a href=\"../double/TwoVARIABLE.html\">2VARIABLE</a> 2res -1. 2res <a href=\"../core/TwoStore.html\">2!</a>\n        </p><p>\n        <a href=\"../core/Colon.html\">:</a> si2 <br>\n        &nbsp;&nbsp; read_a_line <br>\n        &nbsp;&nbsp; read_a_line <br>\n        &nbsp;&nbsp; <strong>SAVE-INPUT</strong> <br>\n        &nbsp;&nbsp; read_a_line <br>\n        &nbsp;&nbsp; read_a_line <br>\n        &nbsp;&nbsp; s$ <a href=\"../core/EVALUATE.html\">EVALUATE</a> 2res <a href=\"../core/TwoStore.html\">2!</a> <br>\n        &nbsp;&nbsp; <a href=\"../core/RESTORE-INPUT.html\">RESTORE-INPUT</a> <br>\n        <a href=\"../core/Semi.html\">;</a>\n        </p><p>\n        <span class=\"rm\"><strong>WARNING:</strong> do not delete or insert lines of\n        text after si2 is called otherwise the next test will\n        fail</span>\n        </p><p>\n        si2 <br>\n        33333 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">This line should be ignored</span> <br>\n        2res 2@ 44444 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\"><a href=\"../core/RESTORE-INPUT.html\">RESTORE-INPUT</a> should return to this line</span>\n        </p><p>\n        55555\n        </p><p>\n        <span class=\"tt\">T{  -&gt; 0&nbsp;0&nbsp;2345&nbsp;44444&nbsp;55555 }T</span>\n        \n        \n        </p></div>\n      "
                    }
                }
            },
            "SIGN": {
                "id": "core:SIGN",
                "number": "6.1.2210",
                "name": "SIGN",
                "english": " ",
                "list": "CORE",
                "basename": "SIGN",
                "stackEffect": {
                    "html": {
                        " ": "( <em>n</em> -- )"
                    },
                    "plain": {
                        " ": "( n -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>n</em> -- )\n      <p>\n      If <em>n</em> is negative, add a minus sign to the beginning of\n      the pictured numeric output string. An ambiguous condition exists\n      if <strong>SIGN</strong> executes outside of a <a href=\"../core/num-start.html\">&lt;#</a> <a href=\"../core/num-end.html\">#&gt;</a>\n      delimited number conversion.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.2210 SIGN -->\n            <div class=\"tt\">\n<a href=\"../core/Colon.html\">:</a> GP2  <a href=\"../core/num-start.html\">&lt;#</a> -1 <strong>SIGN</strong> 0 <strong>SIGN</strong> -1 <strong>SIGN</strong> 0 0 <a href=\"../core/num-end.html\">#&gt;</a> <a href=\"../core/Sq.html\">S\"</a> --\" S= <a href=\"../core/Semi.html\">;</a> <br>\n        <span class=\"tt\">T{ GP2 -&gt; &lt;TRUE&gt; }T</span>\n        \n        \n        </div>\n      "
                    }
                }
            },
            "SMDivREM": {
                "id": "core:SM/REM",
                "number": "6.1.2214",
                "name": "SM/REM",
                "english": "s-m-slash-rem",
                "list": "CORE",
                "basename": "SMDivREM",
                "stackEffect": {
                    "html": {
                        " ": "( <em>d<sub>1</sub> n<sub>1</sub></em> -- <em>n<sub>2</sub> n<sub>3</sub></em> )"
                    },
                    "plain": {
                        " ": "( d1 n1 -- n2 n3 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>d<sub>1</sub> n<sub>1</sub></em> -- <em>n<sub>2</sub> n<sub>3</sub></em> )\n      <p>\n      Divide <em>d<sub>1</sub></em> by <em>n<sub>1</sub></em>, giving the symmetric quotient\n      <em>n<sub>3</sub></em> and the remainder <em>n<sub>2</sub></em>. Input and output stack\n      arguments are signed. An ambiguous condition exists if <em>n<sub>1</sub></em>\n      is zero or if the quotient lies outside the range of a single-cell\n      signed integer.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:div\">3.2.2.1 Integer division</a></strong>,\n      <a href=\"../core/FMDivMOD.html\">6.1.1561 FM/MOD</a>,\n      <a href=\"../core/UMDivMOD.html\">6.1.2370 UM/MOD</a>,\n      <a href=\"../rationale.html#rat:core:SM/REM\">A.6.1.2214 SM/REM</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.1.2214 SM/REM -->\n      See the previous discussion of division under <a href=\"../core/FMDivMOD.html\">FM/MOD</a>.\n      <strong>SM/REM</strong> is the symmetric-division primitive, which allows\n      programs to define the following symmetric-division operators:\n      <p>\n            </p><div class=\"quote\">\n        <div class=\"tt\">\n<a href=\"../core/Colon.html\">:</a> /-REM <a href=\"../core/p.html\">(</a> n1 n2 -- n3 n4 )\n          <a href=\"../core/toR.html\">&gt;R</a> <a href=\"../core/StoD.html\">S&gt;D</a> <a href=\"../core/Rfrom.html\">R&gt;</a> <strong>SM/REM</strong>\n          <a href=\"../core/Semi.html\">;</a>\n          <p>\n          <a href=\"../core/Colon.html\">:</a> /- <a href=\"../core/p.html\">(</a> n1 n2 -- n3 )\n          /-REM <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../core/DROP.html\">DROP</a>\n          <a href=\"../core/Semi.html\">;</a>\n          </p><p>\n          <a href=\"../core/Colon.html\">:</a> -REM <a href=\"../core/p.html\">(</a> n1 n2 -- n3 )\n          /-REM <a href=\"../core/DROP.html\">DROP</a>\n          <a href=\"../core/Semi.html\">;</a>\n          </p><p>\n          <a href=\"../core/Colon.html\">:</a> */-REM <a href=\"../core/p.html\">(</a> n1 n2 n3 -- n4 n5 )\n          <a href=\"../core/toR.html\">&gt;R</a> <a href=\"../core/MTimes.html\">M*</a> <a href=\"../core/Rfrom.html\">R&gt;</a> <strong>SM/REM</strong>\n          <a href=\"../core/Semi.html\">;</a>\n          </p><p>\n          <a href=\"../core/Colon.html\">:</a> */- <a href=\"../core/p.html\">(</a> n1 n2 n3 -- n4 )\n          */-REM <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../core/DROP.html\">DROP</a>\n          <a href=\"../core/Semi.html\">;</a>\n          \n          </p></div>\n        </div>\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.2214 SM/REM -->\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>SM/REM</strong> -&gt; &nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>SM/REM</strong> -&gt; &nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>SM/REM</strong> -&gt; &nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>SM/REM</strong> -&gt; &nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>SM/REM</strong> -&gt; &nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>SM/REM</strong> -&gt; &nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>SM/REM</strong> -&gt; &nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>SM/REM</strong> -&gt; &nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>SM/REM</strong> -&gt; &nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>SM/REM</strong> -&gt; &nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;<strong>SM/REM</strong> -&gt; &nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>SM/REM</strong> -&gt; &nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2&nbsp;<strong>SM/REM</strong> -&gt; &nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;<strong>SM/REM</strong> -&gt; &nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-3&nbsp;<strong>SM/REM</strong> -&gt; &nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-7&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;<strong>SM/REM</strong> -&gt; &nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-7&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-3&nbsp;<strong>SM/REM</strong> -&gt; -1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2 }T</span> <br>\n      <span class=\"tt\">T{ MAX-INT&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>SM/REM</strong> -&gt; &nbsp;0&nbsp;MAX-INT }T</span> <br>\n      <span class=\"tt\">T{ MIN-INT&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>SM/REM</strong> -&gt; &nbsp;0&nbsp;MIN-INT }T</span> <br>\n      <span class=\"tt\">T{ MAX-INT&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MAX-INT&nbsp;<strong>SM/REM</strong> -&gt; &nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 }T</span> <br>\n      <span class=\"tt\">T{ MIN-INT&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MIN-INT&nbsp;<strong>SM/REM</strong> -&gt; &nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1S&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;<strong>SM/REM</strong> -&gt; &nbsp;3&nbsp;MAX-INT }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;MIN-INT&nbsp;<a href=\"../core/MTimes.html\">M*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;<strong>SM/REM</strong> -&gt; &nbsp;0&nbsp;MIN-INT }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;MIN-INT&nbsp;<a href=\"../core/MTimes.html\">M*</a>&nbsp;MIN-INT&nbsp;<strong>SM/REM</strong> -&gt; &nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;MAX-INT&nbsp;<a href=\"../core/MTimes.html\">M*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;<strong>SM/REM</strong> -&gt; &nbsp;0&nbsp;MAX-INT }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;MAX-INT&nbsp;<a href=\"../core/MTimes.html\">M*</a>&nbsp;MAX-INT&nbsp;<strong>SM/REM</strong> -&gt; &nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2 }T</span> <br>\n      <span class=\"tt\">T{ MIN-INT&nbsp;MIN-INT&nbsp;<a href=\"../core/MTimes.html\">M*</a>&nbsp;MIN-INT&nbsp;<strong>SM/REM</strong> -&gt; &nbsp;0&nbsp;MIN-INT }T</span> <br>\n      <span class=\"tt\">T{ MIN-INT&nbsp;MAX-INT&nbsp;<a href=\"../core/MTimes.html\">M*</a>&nbsp;MIN-INT&nbsp;<strong>SM/REM</strong> -&gt; &nbsp;0&nbsp;MAX-INT }T</span> <br>\n      <span class=\"tt\">T{ MIN-INT&nbsp;MAX-INT&nbsp;<a href=\"../core/MTimes.html\">M*</a>&nbsp;MAX-INT&nbsp;<strong>SM/REM</strong> -&gt; &nbsp;0&nbsp;MIN-INT }T</span> <br>\n      <span class=\"tt\">T{ MAX-INT&nbsp;MAX-INT&nbsp;<a href=\"../core/MTimes.html\">M*</a>&nbsp;MAX-INT&nbsp;<strong>SM/REM</strong> -&gt; &nbsp;0&nbsp;MAX-INT }T</span>\n      \n      \n      "
                    }
                }
            },
            "SOURCE-ID": {
                "id": "core:SOURCE-ID",
                "number": "6.2.2218",
                "name": "SOURCE-ID",
                "english": "source-i-d",
                "list": "CORE EXT",
                "basename": "SOURCE-ID",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>0  |  -1 </em> )"
                    },
                    "plain": {
                        " ": "( -- 0  |  -1  )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>0  |  -1 </em> )\n      <p>\n      Identifies the input source as follows:\n      </p><div class=\"center\">\n\n        <table class=\"center\">\n        <tbody><tr valign=\"top\"><td colspan=\"2\"><hr></td></tr>\n        <tr valign=\"top\"><td class=\"c\"><strong>SOURCE-ID</strong> </td><td>Input source </td></tr>\n        <tr valign=\"top\"><td colspan=\"2\"><hr></td></tr>\n        <tr valign=\"top\"><td class=\"c\">-1\t</td><td>String (via <a href=\"../core/EVALUATE.html\">EVALUATE</a>) </td></tr>\n        <tr valign=\"top\"><td class=\"c\">0\t</td><td>User input device </td></tr>\n        <tr valign=\"top\"><td colspan=\"2\"><hr></td></tr>\n        <tr valign=\"top\"><td class=\"c\"></td></tr>\n        </tbody></table>\n        \n        </div>\n      <p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../file/SOURCE-ID.html\">11.6.1.2218 SOURCE-ID</a>.\n      \n      "
                    }
                }
            },
            "SOURCE": {
                "id": "core:SOURCE",
                "number": "6.1.2216",
                "name": "SOURCE",
                "english": " ",
                "list": "CORE",
                "basename": "SOURCE",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>c-addr u</em> )"
                    },
                    "plain": {
                        " ": "( -- c-addr u )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>c-addr u</em> )\n      <p>\n      <em>c-addr</em> is the address of, and <em>u</em> is the number of\n      characters in, the input buffer.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../rationale.html#rat:core:SOURCE\">A.6.1.2216 SOURCE</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.1.2216 SOURCE -->\n      <strong>SOURCE</strong> simplifies the process of directly accessing the\n      input buffer by hiding the differences between its location\n      for different input sources. This also gives implementors more\n      flexibility in their implementation of buffering mechanisms\n      for different input sources. The committee moved away from an\n      input buffer specification consisting of a collection of\n      individual variables.\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.2216 SOURCE -->\n            <div class=\"tt\">\n<a href=\"../core/Colon.html\">:</a> GS1 <a href=\"../core/Sq.html\">S\"</a> <strong>SOURCE</strong>\" <a href=\"../core/TwoDUP.html\">2DUP</a> <a href=\"../core/EVALUATE.html\">EVALUATE</a>\n        <a href=\"../core/toR.html\">&gt;R</a> <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../core/toR.html\">&gt;R</a> <a href=\"../core/Equal.html\">=</a> <a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/Equal.html\">=</a> <a href=\"../core/Semi.html\">;</a> <br>\n        <span class=\"tt\">T{ GS1 -&gt; &lt;TRUE&gt;&nbsp;&lt;TRUE&gt; }T</span>\n        <p>\n        <a href=\"../core/Colon.html\">:</a> GS4 <strong>SOURCE</strong> <a href=\"../core/toIN.html\">&gt;IN</a> <a href=\"../core/Store.html\">!</a> <a href=\"../core/DROP.html\">DROP</a> <a href=\"../core/Semi.html\">;</a> <br>\n        <span class=\"tt\">T{ GS4&nbsp;123&nbsp;456&nbsp;<br>\n        &nbsp;&nbsp;&nbsp; -&gt;  }T</span>\n        \n        \n        </p></div>\n      "
                    }
                }
            },
            "SPACE": {
                "id": "core:SPACE",
                "number": "6.1.2220",
                "name": "SPACE",
                "english": " ",
                "list": "CORE",
                "basename": "SPACE",
                "stackEffect": {
                    "html": {
                        " ": "( -- )"
                    },
                    "plain": {
                        " ": "( -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- )\n      <p>\n      Display one space.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.2220 SPACE -->\n      See <a href=\"../testsuite.html#test:core:EMIT\">F.6.1.1320 EMIT</a>.\n      \n      \n      "
                    }
                }
            },
            "SPACES": {
                "id": "core:SPACES",
                "number": "6.1.2230",
                "name": "SPACES",
                "english": " ",
                "list": "CORE",
                "basename": "SPACES",
                "stackEffect": {
                    "html": {
                        " ": "( <em>n</em> -- )"
                    },
                    "plain": {
                        " ": "( n -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>n</em> -- )\n      <p>\n      If <em>n</em> is greater than zero, display <em>n</em> spaces.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.2230 SPACES -->\n      See <a href=\"../testsuite.html#test:core:EMIT\">F.6.1.1320 EMIT</a>.\n      \n      \n      "
                    }
                }
            },
            "STATE": {
                "id": "core:STATE",
                "number": "6.1.2250",
                "name": "STATE",
                "english": " ",
                "list": "CORE",
                "basename": "STATE",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>a-addr</em> )"
                    },
                    "plain": {
                        " ": "( -- a-addr )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>a-addr</em> )\n      <p>\n      <em>a-addr</em> is the address of a cell containing the\n      compilation-state flag. <strong>STATE</strong> is <em>true</em> when in\n      compilation state, <em>false</em> otherwise. The <em>true</em> value\n      in <strong>STATE</strong> is non-zero, but is otherwise\n      implementation-defined. Only the following standard words alter\n      the value in <strong>STATE</strong>:\n      <a href=\"../core/Colon.html\">:</a> (colon),\n      <a href=\"../core/Semi.html\">;</a> (semicolon),\n      <a href=\"../core/ABORT.html\">ABORT</a>,\n      <a href=\"../core/QUIT.html\">QUIT</a>,\n      <a href=\"../core/ColonNONAME.html\">:NONAME</a>,\n      <a href=\"../core/Bracket.html\">[</a> (left-bracket),\n      <a href=\"../right-bracket.html\">]</a> (right-bracket).\n      </p><p>\n        \n      </p>"
                    },
                    "Note:": {
                        "name": "Note:",
                        "html": "\n\n\n      A program shall not directly alter the contents of <strong>STATE</strong>.\n      <p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:command\">3.4 The Forth text interpreter</a></strong>,\n      <a href=\"../core/Colon.html\">6.1.0450 :</a>,\n      <a href=\"../core/Semi.html\">6.1.0460 ;</a>\n      <a href=\"../core/ABORT.html\">6.1.0670 ABORT</a>,\n      <a href=\"../core/QUIT.html\">6.1.2050 QUIT</a>,\n      <a href=\"../core/Bracket.html\">6.1.2500 [</a>,\n      <a href=\"../right-bracket.html\">6.1.2540 ]</a>,\n      <a href=\"../core/ColonNONAME.html\">6.2.0455 :NONAME</a>,\n      <a href=\"../tools/STATE.html\">15.6.2.2250 STATE</a>,\n      <a href=\"../rationale.html#rat:core:STATE\">A.6.1.2250 STATE</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.1.2250 STATE -->\n      Although\n      <a href=\"../core/EVALUATE.html\">EVALUATE</a>,\n      <a href=\"../block/LOAD.html\">LOAD</a>,\n      <a href=\"../file/INCLUDE-FILE.html\">INCLUDE-FILE</a> and\n      <a href=\"../file/INCLUDED.html\">INCLUDED</a>\n      are not listed as words which alter <strong>STATE</strong>, the text\n      interpreted by any one of these words could include one or\n      more words which explicitly alter <strong>STATE</strong>.\n      <a href=\"../core/EVALUATE.html\">EVALUATE</a>,\n      <a href=\"../block/LOAD.html\">LOAD</a>,\n      <a href=\"../file/INCLUDE-FILE.html\">INCLUDE-FILE</a> and\n      <a href=\"../file/INCLUDED.html\">INCLUDED</a>\n      do not in themselves alter <strong>STATE</strong>.\n      <p>\n      <strong>STATE</strong> does not nest with text interpreter nesting. For\n      example, the code sequence:\n      </p><p>\n      &nbsp;&nbsp; <a href=\"../core/Colon.html\">:</a> <code>FOO</code> \n      <a href=\"../core/Sq.html\">S\"</a> <code>]\"</code> <a href=\"../core/EVALUATE.html\">EVALUATE</a>\n      <a href=\"../core/Semi.html\">;</a>\n      &nbsp;&nbsp;&nbsp;&nbsp;\n      <code>FOO</code>\n      </p><p>\n      will leave the system in compilation state. Similarly, after\n      <a href=\"../block/LOAD.html\">LOAD</a>ing a block containing <a href=\"../right-bracket.html\">]</a>, the system\n      will be in compilation state.\n      </p><p>\n      Note that <a href=\"../right-bracket.html\">]</a> does not affect the parse area and that the\n      only effect that <a href=\"../core/Colon.html\">:</a> has on the parse area is to parse a\n      word. This entitles a program to use these words to set the\n      state with known side-effects on the parse area. For example:\n      </p><p>\n      &nbsp;&nbsp; <a href=\"../core/Colon.html\">:</a> <code>NOP</code> \n      <a href=\"../core/Colon.html\">:</a> <a href=\"../core/POSTPONE.html\">POSTPONE</a> <a href=\"../core/Semi.html\">;</a> <a href=\"../core/IMMEDIATE.html\">IMMEDIATE</a>\n      <a href=\"../core/Semi.html\">;</a>\n      </p><p>\n      &nbsp;&nbsp; <code>NOP</code> <a href=\"../core/ALIGN.html\">ALIGN</a> <br>\n      &nbsp;&nbsp; <code>NOP</code> <a href=\"../core/ALIGNED.html\">ALIGNED</a>\n      </p><p>\n      Some non-compliant systems have <a href=\"../right-bracket.html\">]</a> invoke a\n      compiler loop in addition to setting <strong>STATE</strong>. Such a\n      system would inappropriately attempt to compile the second\n      use of <code>NOP</code>.\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.2250 STATE -->\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;GT8&nbsp;<strong>STATE</strong>&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<a href=\"../core/Semi.html\">;</a>&nbsp;<a href=\"../core/IMMEDIATE.html\">IMMEDIATE</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ GT8 -&gt; 0 }T</span> <br>\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;GT9&nbsp;GT8&nbsp;<a href=\"../core/LITERAL.html\">LITERAL</a>&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ GT9&nbsp;<a href=\"../core/ZeroEqual.html\">0=</a> -&gt; &lt;FALSE&gt; }T</span>\n      \n      \n      "
                    }
                }
            },
            "SWAP": {
                "id": "core:SWAP",
                "number": "6.1.2260",
                "name": "SWAP",
                "english": " ",
                "list": "CORE",
                "basename": "SWAP",
                "stackEffect": {
                    "html": {
                        " ": "( <em>x<sub>1</sub> x<sub>2</sub></em> -- <em>x<sub>2</sub> x<sub>1</sub></em> )"
                    },
                    "plain": {
                        " ": "( x1 x2 -- x2 x1 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>x<sub>1</sub> x<sub>2</sub></em> -- <em>x<sub>2</sub> x<sub>1</sub></em> )\n      <p>\n      Exchange the top two stack items.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.2260 SWAP -->\n      <span class=\"tt\">T{ 1&nbsp;2&nbsp;<strong>SWAP</strong> -&gt; 2&nbsp;1 }T</span>\n      \n      \n      "
                    }
                }
            },
            "Semi": {
                "id": "core:;",
                "number": "6.1.0460",
                "name": ";",
                "english": "semicolon",
                "list": "CORE",
                "basename": "Semi",
                "stackEffect": {
                    "html": {
                        "Compilation:": "( C: <em>colon-sys</em> -- )",
                        "Run-time:": "( -- )\n      ( R: <em>nest-sys</em> -- )"
                    },
                    "plain": {
                        "Compilation:": "( C: colon-sys -- )",
                        "Run-time:": "( -- )\n( R: nest-sys -- )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      ( C: <em>colon-sys</em> -- )\n      <p>\n      Append the run-time semantics below to the current definition. End\n      the current definition, allow it to be found in the dictionary and\n      enter interpretation state, consuming <em>colon-sys</em>. If the\n      data-space pointer is not aligned, reserve enough data space to\n      align it.\n      </p><p>\n        \n      </p>"
                    },
                    "Run-time:": {
                        "name": "Run-time:",
                        "html": "\n\n\n      ( -- )\n      ( R: <em>nest-sys</em> -- )\n      <p>\n      Return to the calling definition specified by <em>nest-sys</em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:command\">3.4 The Forth text interpreter</a></strong>,\n      <strong><a href=\"../usage.html#usage:compilation\">3.4.5 Compilation</a></strong>,\n      <a href=\"../rationale.html#rat:core:;\">A.6.1.0460 ;</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.1.0460 ; -->\n      Typical use:\n      <a href=\"../core/Colon.html\">:</a> <em>name</em> ... <strong>;</strong>\n      <p>\n      One function performed by both <strong>;</strong> and <a href=\"../tools/SemiCODE.html\">;CODE</a>\n      is to allow the current definition to be found in the\n      dictionary. If the current definition was created by\n      <a href=\"../core/ColonNONAME.html\">:NONAME</a> the current definition has no definition name\n      and thus cannot be found in the dictionary. If <a href=\"../core/ColonNONAME.html\">:NONAME</a>\n      is implemented the Forth compiler must maintain enough\n      information about the current definition to allow <strong>;</strong> and\n      <a href=\"../tools/SemiCODE.html\">;CODE</a> to determine whether or not any action must\n      be taken to allow it to be found.\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0460 ; -->\n      See <a href=\"../testsuite.html#test:core::\">F.6.1.0450 :</a>.\n      \n      \n      "
                    }
                }
            },
            "Seq": {
                "id": "core:Seq",
                "number": "6.2.2266",
                "name": "S\\\"",
                "english": "s-backslash-quote",
                "list": "CORE EXT",
                "basename": "Seq",
                "stackEffect": {
                    "html": {
                        "Compilation:": "( <em>\"ccc&lt;quote&gt;\"</em> -- ) <br>\n      Parse <em>ccc</em> delimited by <code>\"</code> (double-quote), using the\n      translation rules below. Append the run-time semantics given below to\n      the current definition.",
                        "Run-time:": "( -- <em>c-addr u</em> ) <br>\n      Return <em>c-addr</em> and <em>u</em> describing a string consisting of\n      the translation of the characters <em>ccc</em>.  A program shall not\n      alter the returned string."
                    },
                    "plain": {
                        "Compilation:": "( \"ccc<quote>\" -- ) \nParse ccc delimited by \" (double-quote), using the\ntranslation rules below. Append the run-time semantics given below to\nthe current definition.",
                        "Run-time:": "( -- c-addr u ) \nReturn c-addr and u describing a string consisting of\nthe translation of the characters ccc.  A program shall not\nalter the returned string."
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n ( <em>\"ccc&lt;quote&gt;\"</em> -- ) <br>\n      Parse <em>ccc</em> delimited by <code>\"</code> (double-quote), using the\n      translation rules below. Append the run-time semantics given below to\n      the current definition.\n      <p>\n        \n      </p>"
                    },
                    "Translation rules:": {
                        "name": "Translation rules:",
                        "html": "\n\n\n      Characters are processed one at a time and appended to the compiled\n      string. If the character is a `\\' character it is processed by\n      parsing and substituting one or more  characters as follows, where\n      the character after the backslash is case sensitive:\n      <p>\n      </p><table>\n      <tbody><tr valign=\"top\"><td><code>\\a</code>\t</td><td>BEL\t\t</td><td>(alert,\t\t</td><td>ASCII 7) </td></tr>\n      <tr valign=\"top\"><td><code>\\b</code>\t</td><td>BS\t\t</td><td>(backspace,\t</td><td>ASCII 8) </td></tr>\n      <tr valign=\"top\"><td><code>\\e</code>\t</td><td>ESC\t\t</td><td>(escape,\t\t</td><td>ASCII 27) </td></tr>\n      <tr valign=\"top\"><td><code>\\f</code>\t</td><td>FF\t\t</td><td>(form feed,\t</td><td>ASCII 12) </td></tr>\n      <tr valign=\"top\"><td><code>\\l</code>\t</td><td>LF\t\t</td><td>(line feed,\t</td><td>ASCII 10) </td></tr>\n      <tr valign=\"top\"><td><code>\\m</code>\t</td><td>CR/LF\t</td><td>pair\t\t\t</td><td>(ASCII 13, 10) </td></tr>\n      <tr valign=\"top\"><td><code>\\n</code>\t</td><td>newline</td><td colspan=\"2\">(implementation dependent , e.g., CR/LF, CR, LF, LF/CR) </td></tr>\n      <tr valign=\"top\"><td><code>\\q</code>\t</td><td colspan=\"2\">double-quote </td><td>(ASCII 34) </td></tr>\n      <tr valign=\"top\"><td><code>\\r</code>\t</td><td>CR\t\t</td><td>(carriage return,\t</td><td>ASCII 13) </td></tr>\n      <tr valign=\"top\"><td><code>\\t</code>\t</td><td>HT\t\t</td><td>(horizontal tab,\t</td><td>ASCII 9) </td></tr>\n      <tr valign=\"top\"><td><code>\\v</code>\t</td><td>VT\t\t</td><td>(vertical tab,\t\t</td><td>ASCII 11) </td></tr>\n      <tr valign=\"top\"><td><code>\\z</code>\t</td><td>NUL\t\t</td><td>(no character,\t\t</td><td>ASCII 0) </td></tr>\n      <tr valign=\"top\"><td><code>\\\"</code>\t</td><td colspan=\"2\">double-quote </td><td>(ASCII 34) </td></tr>\n      <tr valign=\"top\"><td colspan=\"3\"><code>\\x</code>&lt;<em>hexdigit</em>&gt;&lt;<em>hexdigit</em>&gt; </td></tr>\n      <tr valign=\"top\"><td></td><td></td><td colspan=\"2\" style=\"width: 27em\"><div>\n      \n        The resulting character is the conversion of these two hexadecimal\n        digits. An ambiguous conditions exists if <code>\\x</code> is not\n        followed by two hexadecimal characters.\n        </div> </td></tr>\n      <tr valign=\"top\"><td><code>\\\\</code> </td><td colspan=\"2\">backslash itself </td><td>(ASCII 92) \t\t</td></tr></tbody></table>\n      <p>\n      An ambiguous condition exists if a \\ is placed before any character,\n      other than those defined in here.\n      </p><p>\n        \n      </p>"
                    },
                    "Run-time:": {
                        "name": "Run-time:",
                        "html": "\n\n ( -- <em>c-addr u</em> ) <br>\n      Return <em>c-addr</em> and <em>u</em> describing a string consisting of\n      the translation of the characters <em>ccc</em>.  A program shall not\n      alter the returned string.\n      <p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:parsing\">3.4.1 Parsing</a></strong>,\n      <a href=\"../core/Cq.html\">6.2.0855 C\"</a>,\n      <a href=\"../file/Sq.html\">11.6.1.2165 S\"</a>,\n      <a href=\"../rationale.html#rat:core:Sq\">A.6.1.2165 S\"</a>.\n      \n      "
                    }
                }
            },
            "Sq": {
                "id": "core:Sq",
                "number": "6.1.2165",
                "name": "S\"",
                "english": "s-quote",
                "list": "CORE",
                "basename": "Sq",
                "stackEffect": {
                    "html": {
                        "Compilation:": "( <em>\"ccc&lt;quote&gt;\"</em> -- )",
                        "Run-time:": "( -- <em>c-addr u</em> )"
                    },
                    "plain": {
                        "Compilation:": "( \"ccc<quote>\" -- )",
                        "Run-time:": "( -- c-addr u )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      ( <em>\"ccc&lt;quote&gt;\"</em> -- )\n      <p>\n      Parse <em>ccc</em> delimited by <code>\"</code> (double-quote).\n      Append the run-time semantics given below to the current\n      definition.\n      </p><p>\n        \n      </p>"
                    },
                    "Run-time:": {
                        "name": "Run-time:",
                        "html": "\n\n\n      ( -- <em>c-addr u</em> )\n      <p>\n      Return <em>c-addr</em> and <em>u</em> describing a string\n      consisting of the characters <em>ccc</em>. A program shall\n      not alter the returned string.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:parsing\">3.4.1 Parsing</a></strong>,\n      <a href=\"../core/Cq.html\">6.2.0855 C\"</a>,\n      <a href=\"../file/Sq.html\">11.6.1.2165 S\"</a>,\n      <a href=\"../core/Seq.html\">6.2.2266 S\\\"</a>,\n      <a href=\"../rationale.html#rat:core:Sq\">A.6.1.2165 S\"</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.1.2165 S\" -->\n      Typical use:\n      <a href=\"../core/Colon.html\">:</a> <code>X</code> ...\n      <strong>S\"</strong> <em>ccc</em><code>\"</code>\n      ... <a href=\"../core/Semi.html\">;</a>\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- A.6.1.2165 S\" -->\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;GC4&nbsp;<strong>S\"</strong>&nbsp;XY\"&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt; &nbsp; }T</span> <br>\n      <span class=\"tt\">T{ GC4&nbsp;<a href=\"../core/SWAP.html\">SWAP</a>&nbsp;<a href=\"../core/DROP.html\">DROP</a>&nbsp; -&gt; 2 }T</span> <br>\n      <span class=\"tt\">T{ GC4&nbsp;<a href=\"../core/DROP.html\">DROP</a>&nbsp;<a href=\"../core/DUP.html\">DUP</a>&nbsp;<a href=\"../core/CFetch.html\">C@</a>&nbsp;<a href=\"../core/SWAP.html\">SWAP</a>&nbsp;<a href=\"../core/CHARPlus.html\">CHAR+</a>&nbsp;<a href=\"../core/CFetch.html\">C@</a> -&gt; 58&nbsp;59 }T</span>\n      <p>\n      <a href=\"../core/Colon.html\">:</a> GC5 <strong>S\"</strong> A String\"<a href=\"../core/TwoDROP.html\">2DROP</a> <a href=\"../core/Semi.html\">;</a> <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">There is no space between the \" and <a href=\"../core/TwoDROP.html\">2DROP</a></span> <br>\n      <span class=\"tt\">T{ GC5 -&gt;  }T</span>\n      \n      \n      </p>"
                    }
                }
            },
            "StoD": {
                "id": "core:StoD",
                "number": "6.1.2170",
                "name": "S>D",
                "english": "s-to-d",
                "list": "CORE",
                "basename": "StoD",
                "stackEffect": {
                    "html": {
                        " ": "( <em>n</em> -- <em>d</em> )"
                    },
                    "plain": {
                        " ": "( n -- d )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>n</em> -- <em>d</em> )\n      <p>\n      Convert the number <em>n</em> to the double-cell number <em>d</em>\n      with the same numerical value.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.2170 S>D -->\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;<strong>S&gt;D</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;0 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>S&gt;D</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;0 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;<strong>S&gt;D</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;0 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>S&gt;D</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;-1 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2&nbsp;<strong>S&gt;D</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2&nbsp;-1 }T</span> <br>\n      <span class=\"tt\">T{ MIN-INT&nbsp;<strong>S&gt;D</strong> -&gt; MIN-INT&nbsp;-1 }T</span> <br>\n      <span class=\"tt\">T{ MAX-INT&nbsp;<strong>S&gt;D</strong> -&gt; MAX-INT&nbsp;&nbsp;0 }T</span>\n      \n      \n      "
                    }
                }
            },
            "Store": {
                "id": "core:!",
                "number": "6.1.0010",
                "name": "!",
                "english": "store",
                "list": "CORE",
                "basename": "Store",
                "stackEffect": {
                    "html": {
                        " ": "( <em>x a-addr</em> -- )"
                    },
                    "plain": {
                        " ": "( x a-addr -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>x a-addr</em> -- )\n      <p>\n      Store <em>x</em> at <em>a-addr</em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:aaddr\">3.3.3.1 Address alignment</a></strong>.\n      <p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0010 ! -->\n      See <a href=\"../testsuite.html#test:core:,\">F.6.1.0150 ,</a>.\n      \n      \n      "
                    }
                }
            },
            "THEN": {
                "id": "core:THEN",
                "number": "6.1.2270",
                "name": "THEN",
                "english": " ",
                "list": "CORE",
                "basename": "THEN",
                "stackEffect": {
                    "html": {
                        "Compilation:": "( C: <em>orig</em> -- )",
                        "Run-time:": "( -- )"
                    },
                    "plain": {
                        "Compilation:": "( C: orig -- )",
                        "Run-time:": "( -- )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      ( C: <em>orig</em> -- )\n      <p>\n      Append the run-time semantics given below to the current\n      definition. Resolve the forward reference <em>orig</em> using\n      the location of the appended run-time semantics.\n      </p><p>\n        \n      </p>"
                    },
                    "Run-time:": {
                        "name": "Run-time:",
                        "html": "\n\n\n      ( -- )\n      <p>\n      Continue execution.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/ELSE.html\">6.1.1310 ELSE</a>,\n      <a href=\"../core/IF.html\">6.1.1700 IF</a>,\n      <a href=\"../rationale.html#rat:core:THEN\">A.6.1.2270 THEN</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.1.2270 THEN -->\n      Typical use:\n      <p>\n      &nbsp;&nbsp; <a href=\"../core/Colon.html\">:</a> <code>X</code> ...\n      <em>test</em> <a href=\"../core/IF.html\">IF</a> ... <strong>THEN</strong>\n      ... <a href=\"../core/Semi.html\">;</a>\n      </p><p>\n      or\n      </p><p>\n      &nbsp;&nbsp; <a href=\"../core/Colon.html\">:</a> <code>X</code> ...\n      <em>test</em> <a href=\"../core/IF.html\">IF</a> ... <a href=\"../core/ELSE.html\">ELSE</a> ... <strong>THEN</strong>\n      ... <a href=\"../core/Semi.html\">;</a>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.2270 THEN -->\n      See <a href=\"../testsuite.html#test:core:IF\">F.6.1.1700 IF</a>.\n      \n      \n      "
                    }
                }
            },
            "TO": {
                "id": "core:TO",
                "number": "6.2.2295",
                "name": "TO",
                "english": " ",
                "list": "CORE EXT",
                "basename": "TO",
                "stackEffect": {
                    "html": {
                        "Interpretation:": "( <em>i * x \"&lt;spaces&gt;name\"</em> -- )",
                        "Compilation:": "( <em>\"&lt;spaces&gt;name\"</em> -- )"
                    },
                    "plain": {
                        "Interpretation:": "( i * x \"<spaces>name\" -- )",
                        "Compilation:": "( \"<spaces>name\" -- )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      ( <em>i * x \"&lt;spaces&gt;name\"</em> -- )\n      <p>\n      Skip leading spaces and parse <em>name</em> delimited by a space.\n      Perform the \"TO <em>name</em> run-time\" semantics given in the\n      definition for the defining word of <em>name</em>.\n      An ambiguous condition exists if <em>name</em> was not defined\n      by a word with \"TO <em>name</em> run-time\" semantics.\n      </p><p>\n        \n      </p>"
                    },
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      ( <em>\"&lt;spaces&gt;name\"</em> -- )\n      <p>\n      Skip leading spaces and parse <em>name</em> delimited by a\n      space. Append the \"TO <em>name</em> run-time\" semantics given\n      in the definition for the defining word\tof <em>name</em> to the\n      current definition.\n      An ambiguous condition exists if <em>name</em> was not defined\n      by a word with \"TO <em>name</em> run-time\" semantics.\n      </p><p>\n        \n      </p>"
                    },
                    "Note:": {
                        "name": "Note:",
                        "html": "\n\n\n      An ambiguous condition exists if any of\t<a href=\"../core/POSTPONE.html\">POSTPONE</a>,\n      <a href=\"../core/BracketCOMPILE.html\">[COMPILE]</a>, <a href=\"../core/Tick.html\">'</a> or <a href=\"../core/BracketTick.html\">[']</a> are applied to\n      <strong>TO</strong>.\n      <p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/VALUE.html\">6.2.2405 VALUE</a>,\n      <a href=\"../double/TwoVALUE.html\">8.6.2.0435 2VALUE</a>,\n      <a href=\"../floating/FVALUE.html\">12.6.2.1628 FVALUE</a>,\n      <a href=\"../local/LOCAL.html\">13.6.1.0086 (LOCAL)</a>,\n      <a href=\"../rationale.html#rat:core:TO\">A.6.2.2295 TO</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.2.2295 TO -->\n      Typical use: <code>x</code> <strong>TO</strong> <em>name</em>\n      <p>\n      Some implementations of <strong>TO</strong> do not parse; instead they set\n      a mode flag that is tested by the subsequent execution of\n      <em>name</em>.  Standard programs must use <strong>TO</strong> as if it\n      parses.  Therefore <strong>TO</strong> and <em>name</em> must be\n      contiguous and on the same line in the source text.\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.2.2295 TO -->\n      See <a href=\"../testsuite.html#test:core:VALUE\">F.6.2.2405 VALUE</a>.\n      \n      \n      "
                    }
                }
            },
            "TRUE": {
                "id": "core:TRUE",
                "number": "6.2.2298",
                "name": "TRUE",
                "english": " ",
                "list": "CORE EXT",
                "basename": "TRUE",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>true</em> )"
                    },
                    "plain": {
                        " ": "( -- true )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>true</em> )\n      <p>\n      Return a <em>true</em> flag, a single-cell value with all\n      bits set.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:flags\">3.1.3.1 Flags</a></strong>,\n      <a href=\"../rationale.html#rat:core:TRUE\">A.6.2.2298 TRUE</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.2.2298 TRUE -->\n      <strong>TRUE</strong> is equivalent to the phrase\n      <code>0</code> <a href=\"../core/ZeroEqual.html\">0=</a>.\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      <span class=\"tt\">T{ <strong>TRUE</strong> -&gt; &lt;TRUE&gt; }T</span> <br>\n      <span class=\"tt\">T{ <strong>TRUE</strong> -&gt; 0&nbsp;INVERT }T</span> <br>\n      \n      \n      "
                    }
                }
            },
            "TUCK": {
                "id": "core:TUCK",
                "number": "6.2.2300",
                "name": "TUCK",
                "english": " ",
                "list": "CORE EXT",
                "basename": "TUCK",
                "stackEffect": {
                    "html": {
                        " ": "( <em>x<sub>1</sub> x<sub>2</sub></em> -- <em>x<sub>2</sub> x<sub>1</sub> x<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( x1 x2 -- x2 x1 x2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>x<sub>1</sub> x<sub>2</sub></em> -- <em>x<sub>2</sub> x<sub>1</sub> x<sub>2</sub></em> )\n      <p>\n      Copy the first (top) stack item below the second stack item.\n      \n      </p>"
                    }
                }
            },
            "TYPE": {
                "id": "core:TYPE",
                "number": "6.1.2310",
                "name": "TYPE",
                "english": " ",
                "list": "CORE",
                "basename": "TYPE",
                "stackEffect": {
                    "html": {
                        " ": "( <em>c-addr u</em> -- )"
                    },
                    "plain": {
                        " ": "( c-addr u -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>c-addr u</em> -- )\n      <p>\n      If <em>u</em> is greater than zero, display the character string\n      specified by <em>c-addr</em> and <em>u</em>.\n      </p><p>\n      When passed a character in a character string whose\n      character-defining bits have a value between hex 20 and 7E\n      inclusive, the corresponding standard character, specified\n      by <strong><a href=\"../usage.html#usage:ASCII\">3.1.2.1 Graphic characters</a></strong>, is displayed.\n      Because different output devices can respond differently to\n      control characters, programs that use control characters to\n      perform specific functions have an environmental dependency.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/EMIT.html\">6.1.1320 EMIT</a>.\n      <p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.2310 TYPE -->\n      See <a href=\"../testsuite.html#test:core:EMIT\">F.6.1.1320 EMIT</a>.\n      \n      \n      "
                    }
                }
            },
            "Tick": {
                "id": "core:'",
                "number": "6.1.0070",
                "name": "'",
                "english": "tick",
                "list": "CORE",
                "basename": "Tick",
                "stackEffect": {
                    "html": {
                        " ": "( <em>\"&lt;spaces&gt;name\"</em> -- <em>xt</em> )"
                    },
                    "plain": {
                        " ": "( \"<spaces>name\" -- xt )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>\"&lt;spaces&gt;name\"</em> -- <em>xt</em> )\n      <p>\n      Skip leading space delimiters. Parse <em>name</em> delimited by\n      a space. Find <em>name</em> and return <em>xt</em>, the execution\n      token for <em>name</em>. An ambiguous condition exists if\n      <em>name</em> is not found. When interpreting,\n      <code>' xyz EXECUTE</code> is equivalent to <code>xyz</code>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../rationale.html#rat:interpret\">A.3.4.3.2 Interpretation semantics</a></strong>,\n      <a href=\"../rationale.html#rat:core:FIND\">A.6.1.1550 FIND</a>.\n        \n      "
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.1.0070 ' -->\n      Typical use: ... <strong>'</strong> <em>name</em>.\n      <p>\n      Many Forth systems use a state-smart tick. Many do not.\n      Forth-2012 follows the usage of Forth 94.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0070 ' -->\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;GT1&nbsp;123&nbsp;<a href=\"../core/Semi.html\">;</a>&nbsp;&nbsp; -&gt; &nbsp;&nbsp;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ <strong>'</strong>&nbsp;GT1&nbsp;<a href=\"../core/EXECUTE.html\">EXECUTE</a> -&gt; 123 }T</span>\n      \n      \n      "
                    }
                }
            },
            "Times": {
                "id": "core:*",
                "number": "6.1.0090",
                "name": "*",
                "english": "star",
                "list": "CORE",
                "basename": "Times",
                "stackEffect": {
                    "html": {
                        " ": "( <em>n<sub>1</sub> | u<sub>1</sub> n<sub>2</sub> | u<sub>2</sub></em> -- <em>n<sub>3</sub> | u<sub>3</sub></em> )"
                    },
                    "plain": {
                        " ": "( n1 | u1 n2 | u2 -- n3 | u3 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>n<sub>1</sub> | u<sub>1</sub> n<sub>2</sub> | u<sub>2</sub></em> -- <em>n<sub>3</sub> | u<sub>3</sub></em> )\n      <p>\n      Multiply <em>n<sub>1</sub> | u<sub>1</sub></em> by <em>n<sub>2</sub> | u<sub>2</sub></em> giving the product\n      <em>n<sub>3</sub> | u<sub>3</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0090 * -->\n      <span class=\"tt\">T{ &nbsp;0&nbsp;&nbsp;0&nbsp;<strong>*</strong> -&gt; &nbsp;0 }T</span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> TEST IDENTITIE\\S <br>\n      <span class=\"tt\">T{ &nbsp;0&nbsp;&nbsp;1&nbsp;<strong>*</strong> -&gt; &nbsp;0 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;1&nbsp;&nbsp;0&nbsp;<strong>*</strong> -&gt; &nbsp;0 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;1&nbsp;&nbsp;2&nbsp;<strong>*</strong> -&gt; &nbsp;2 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;2&nbsp;&nbsp;1&nbsp;<strong>*</strong> -&gt; &nbsp;2 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;3&nbsp;&nbsp;3&nbsp;<strong>*</strong> -&gt; &nbsp;9 }T</span> <br>\n      <span class=\"tt\">T{ -3&nbsp;&nbsp;3&nbsp;<strong>*</strong> -&gt; -9 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;3&nbsp;-3&nbsp;<strong>*</strong> -&gt; -9 }T</span> <br>\n      <span class=\"tt\">T{ -3&nbsp;-3&nbsp;<strong>*</strong> -&gt; &nbsp;9 }T</span>\n      <p>\n      <span class=\"tt\">T{ MID-UINT+1&nbsp;1&nbsp;<a href=\"../core/RSHIFT.html\">RSHIFT</a>&nbsp;2&nbsp;<strong>*</strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -&gt; MID-UINT+1 }T</span> <br>\n      <span class=\"tt\">T{ MID-UINT+1&nbsp;2&nbsp;<a href=\"../core/RSHIFT.html\">RSHIFT</a>&nbsp;4&nbsp;<strong>*</strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -&gt; MID-UINT+1 }T</span> <br>\n      <span class=\"tt\">T{ MID-UINT+1&nbsp;1&nbsp;<a href=\"../core/RSHIFT.html\">RSHIFT</a>&nbsp;MID-UINT+1&nbsp;<a href=\"../core/OR.html\">OR</a>&nbsp;2&nbsp;<strong>*</strong> -&gt; MID-UINT+1 }T</span> <br>\n      \n      \n      </p>"
                    }
                }
            },
            "TimesDiv": {
                "id": "core:*/",
                "number": "6.1.0100",
                "name": "*/",
                "english": "star-slash",
                "list": "CORE",
                "basename": "TimesDiv",
                "stackEffect": {
                    "html": {
                        " ": "( <em>n<sub>1</sub> n<sub>2</sub> n<sub>3</sub></em> -- <em>n<sub>4</sub></em> )"
                    },
                    "plain": {
                        " ": "( n1 n2 n3 -- n4 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>n<sub>1</sub> n<sub>2</sub> n<sub>3</sub></em> -- <em>n<sub>4</sub></em> )\n      <p>\n      Multiply <em>n<sub>1</sub></em> by <em>n<sub>2</sub></em> producing the intermediate\n      double-cell result <em>d</em>. Divide <em>d</em> by <em>n<sub>3</sub></em> giving the\n      single-cell quotient <em>n<sub>4</sub></em>. An ambiguous condition exists\n      if <em>n<sub>3</sub></em> is zero or if the quotient <em>n<sub>4</sub></em> lies\n      outside the range of a signed number. If <em>d</em> and <em>n<sub>3</sub></em>\n      differ in sign, the implementation-defined result returned will\n      be the same as that returned by either the phrase\n      <a href=\"../core/toR.html\">&gt;R</a> <a href=\"../core/MTimes.html\">M*</a> <a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/FMDivMOD.html\">FM/MOD</a> <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../core/DROP.html\">DROP</a>\n      or the phrase\n      <a href=\"../core/toR.html\">&gt;R</a> <a href=\"../core/MTimes.html\">M*</a> <a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/SMDivREM.html\">SM/REM</a> <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../core/DROP.html\">DROP</a>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:div\">3.2.2.1 Integer division</a></strong>.\n      <p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0100 */ -->\n            <div class=\"tt\">\nIFFLOORED &nbsp;&nbsp;\t<a href=\"../core/Colon.html\">:</a> T*/ T*/MOD <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../core/DROP.html\">DROP</a> <a href=\"../core/Semi.html\">;</a> <br>\n        IFSYM &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t<a href=\"../core/Colon.html\">:</a> T*/ T*/MOD <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../core/DROP.html\">DROP</a> <a href=\"../core/Semi.html\">;</a>\n        <p>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>*/</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;T*/ }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>*/</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;T*/ }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>*/</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;T*/ }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>*/</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;T*/ }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>*/</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;T*/ }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>*/</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;T*/ }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>*/</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;T*/ }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>*/</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;T*/ }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>*/</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;T*/ }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>*/</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;T*/ }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;<strong>*/</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;T*/ }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>*/</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;T*/ }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2&nbsp;<strong>*/</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2&nbsp;T*/ }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;<strong>*/</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;T*/ }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-3&nbsp;<strong>*/</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-3&nbsp;T*/ }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-7&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;<strong>*/</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-7&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;T*/ }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-7&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-3&nbsp;<strong>*/</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-7&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-3&nbsp;T*/ }T</span> <br>\n        <span class=\"tt\">T{ MAX-INT&nbsp;2&nbsp;MAX-INT&nbsp;<strong>*/</strong> -&gt; MAX-INT&nbsp;2&nbsp;MAX-INT&nbsp;T*/ }T</span> <br>\n        <span class=\"tt\">T{ MIN-INT&nbsp;2&nbsp;MIN-INT&nbsp;<strong>*/</strong> -&gt; MIN-INT&nbsp;2&nbsp;MIN-INT&nbsp;T*/ }T</span>\n        \n        \n        </p></div>\n      "
                    }
                }
            },
            "TimesDivMOD": {
                "id": "core:*/MOD",
                "number": "6.1.0110",
                "name": "*/MOD",
                "english": "star-slash-mod",
                "list": "CORE",
                "basename": "TimesDivMOD",
                "stackEffect": {
                    "html": {
                        " ": "( <em>n<sub>1</sub> n<sub>2</sub> n<sub>3</sub></em> -- <em>n<sub>4</sub> n<sub>5</sub></em> )"
                    },
                    "plain": {
                        " ": "( n1 n2 n3 -- n4 n5 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>n<sub>1</sub> n<sub>2</sub> n<sub>3</sub></em> -- <em>n<sub>4</sub> n<sub>5</sub></em> )\n      <p>\n      Multiply <em>n<sub>1</sub></em> by <em>n<sub>2</sub></em> producing the intermediate\n      double-cell result <em>d</em>. Divide <em>d</em> by <em>n<sub>3</sub></em> producing the\n      single-cell remainder <em>n<sub>4</sub></em> and the single-cell quotient\n      <em>n<sub>5</sub></em>. An ambiguous condition exists if <em>n<sub>3</sub></em> is\n      zero, or if the quotient <em>n<sub>5</sub></em> lies outside the range of a\n      single-cell signed integer. If <em>d</em> and <em>n<sub>3</sub></em> differ in\n      sign, the implementation-defined result returned will be the\n      same as that returned by either the phrase\n      <a href=\"../core/toR.html\">&gt;R</a> <a href=\"../core/MTimes.html\">M*</a> <a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/FMDivMOD.html\">FM/MOD</a> or the phrase\n      <a href=\"../core/toR.html\">&gt;R</a> <a href=\"../core/MTimes.html\">M*</a> <a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/SMDivREM.html\">SM/REM</a>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:div\">3.2.2.1 Integer division</a></strong>.\n      <p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0110 */MOD -->\n            <div class=\"tt\">\nIFFLOORED &nbsp;&nbsp;\t<a href=\"../core/Colon.html\">:</a> T*/MOD <a href=\"../core/toR.html\">&gt;R</a> <a href=\"../core/MTimes.html\">M*</a> <a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/FMDivMOD.html\">FM/MOD</a> <a href=\"../core/Semi.html\">;</a> <br>\n        IFSYM &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t<a href=\"../core/Colon.html\">:</a> T*/MOD <a href=\"../core/toR.html\">&gt;R</a> <a href=\"../core/MTimes.html\">M*</a> <a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/SMDivREM.html\">SM/REM</a> <a href=\"../core/Semi.html\">;</a>\n        <p>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>*/MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;T*/MOD }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>*/MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;T*/MOD }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>*/MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;T*/MOD }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>*/MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;T*/MOD }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>*/MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;T*/MOD }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>*/MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;T*/MOD }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>*/MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;T*/MOD }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>*/MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;T*/MOD }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>*/MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;T*/MOD }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>*/MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;T*/MOD }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;<strong>*/MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;T*/MOD }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>*/MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;T*/MOD }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2&nbsp;<strong>*/MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2&nbsp;T*/MOD }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;<strong>*/MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;T*/MOD }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-3&nbsp;<strong>*/MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-3&nbsp;T*/MOD }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-7&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;<strong>*/MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-7&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;T*/MOD }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-7&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-3&nbsp;<strong>*/MOD</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-7&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-3&nbsp;T*/MOD }T</span> <br>\n        <span class=\"tt\">T{ MAX-INT&nbsp;2&nbsp;MAX-INT&nbsp;<strong>*/MOD</strong> -&gt; MAX-INT&nbsp;2&nbsp;MAX-INT&nbsp;T*/MOD }T</span> <br>\n        <span class=\"tt\">T{ MIN-INT&nbsp;2&nbsp;MIN-INT&nbsp;<strong>*/MOD</strong> -&gt; MIN-INT&nbsp;2&nbsp;MIN-INT&nbsp;T*/MOD }T</span>\n        \n        \n        </p></div>\n      "
                    }
                }
            },
            "TwoDROP": {
                "id": "core:2DROP",
                "number": "6.1.0370",
                "name": "2DROP",
                "english": "two-drop",
                "list": "CORE",
                "basename": "TwoDROP",
                "stackEffect": {
                    "html": {
                        " ": "( <em>x<sub>1</sub> x<sub>2</sub></em> -- )"
                    },
                    "plain": {
                        " ": "( x1 x2 -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>x<sub>1</sub> x<sub>2</sub></em> -- )\n      <p>\n      Drop cell pair <em>x<sub>1</sub> x<sub>2</sub></em> from the stack.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0370 2DROP -->\n      <span class=\"tt\">T{ 1&nbsp;2&nbsp;<strong>2DROP</strong> -&gt;  }T</span>\n      \n      \n      "
                    }
                }
            },
            "TwoDUP": {
                "id": "core:2DUP",
                "number": "6.1.0380",
                "name": "2DUP",
                "english": "two-dupe",
                "list": "CORE",
                "basename": "TwoDUP",
                "stackEffect": {
                    "html": {
                        " ": "( <em>x<sub>1</sub> x<sub>2</sub></em> -- <em>x<sub>1</sub> x<sub>2</sub> x<sub>1</sub> x<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( x1 x2 -- x1 x2 x1 x2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>x<sub>1</sub> x<sub>2</sub></em> -- <em>x<sub>1</sub> x<sub>2</sub> x<sub>1</sub> x<sub>2</sub></em> )\n      <p>\n      Duplicate cell pair <em>x<sub>1</sub> x<sub>2</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0380 2DUP -->\n      <span class=\"tt\">T{ 1&nbsp;2&nbsp;<strong>2DUP</strong> -&gt; 1&nbsp;2&nbsp;1&nbsp;2 }T</span>\n      \n      \n      "
                    }
                }
            },
            "TwoDiv": {
                "id": "core:2/",
                "number": "6.1.0330",
                "name": "2/",
                "english": "two-slash",
                "list": "CORE",
                "basename": "TwoDiv",
                "stackEffect": {
                    "html": {
                        " ": "( <em>x<sub>1</sub></em> -- <em>x<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( x1 -- x2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>x<sub>1</sub></em> -- <em>x<sub>2</sub></em> )\n      <p>\n      <em>x<sub>2</sub></em> is the result of shifting <em>x<sub>1</sub></em> one bit toward\n      the least-significant bit, leaving the most-significant bit\n      unchanged.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0330 2/ -->\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0S&nbsp;<strong>2/</strong> -&gt; &nbsp;&nbsp;0S }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>2/</strong> -&gt; &nbsp;&nbsp;&nbsp;0 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4000&nbsp;<strong>2/</strong> -&gt; 2000 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1S&nbsp;<strong>2/</strong> -&gt; &nbsp;&nbsp;1S }T</span> <a href=\"../core/bs.html\">\\</a> MSB PROPOGATED <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;1S&nbsp;1&nbsp;<a href=\"../core/XOR.html\">XOR</a>&nbsp;<strong>2/</strong> -&gt; &nbsp;&nbsp;1S }T</span> <br>\n      <span class=\"tt\">T{ MSB&nbsp;<strong>2/</strong>&nbsp;MSB&nbsp;<a href=\"../core/AND.html\">AND</a> -&gt; &nbsp;MSB }T</span>\n      \n      \n      "
                    }
                }
            },
            "TwoFetch": {
                "id": "core:2@",
                "number": "6.1.0350",
                "name": "2@",
                "english": "two-fetch",
                "list": "CORE",
                "basename": "TwoFetch",
                "stackEffect": {
                    "html": {
                        " ": "( <em>a-addr</em> -- <em>x<sub>1</sub> x<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( a-addr -- x1 x2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>a-addr</em> -- <em>x<sub>1</sub> x<sub>2</sub></em> )\n      <p>\n      Fetch the cell pair <em>x<sub>1</sub> x<sub>2</sub></em> stored at <em>a-addr</em>.\n      <em>x<sub>2</sub></em> is stored at <em>a-addr</em> and <em>x<sub>1</sub></em> at the\n      next consecutive cell. It is equivalent to the sequence\n      <a href=\"../core/DUP.html\">DUP</a> <a href=\"../core/CELLPlus.html\">CELL+</a> <a href=\"../core/Fetch.html\">@</a> <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../core/Fetch.html\">@</a>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:aaddr\">3.3.3.1 Address alignment</a></strong>,\n      <a href=\"../core/TwoStore.html\">6.1.0310 2!</a>.\n      <p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0350 2@ -->\n      See <a href=\"../testsuite.html#test:core:,\">F.6.1.0150 ,</a>.\n      \n      \n      "
                    }
                }
            },
            "TwoOVER": {
                "id": "core:2OVER",
                "number": "6.1.0400",
                "name": "2OVER",
                "english": "two-over",
                "list": "CORE",
                "basename": "TwoOVER",
                "stackEffect": {
                    "html": {
                        " ": "( <em>x<sub>1</sub> x<sub>2</sub> x<sub>3</sub> x<sub>4</sub></em> -- <em>x<sub>1</sub> x<sub>2</sub> x<sub>3</sub> x<sub>4</sub> x<sub>1</sub> x<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( x1 x2 x3 x4 -- x1 x2 x3 x4 x1 x2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>x<sub>1</sub> x<sub>2</sub> x<sub>3</sub> x<sub>4</sub></em> -- <em>x<sub>1</sub> x<sub>2</sub> x<sub>3</sub> x<sub>4</sub> x<sub>1</sub> x<sub>2</sub></em> )\n      <p>\n      Copy cell pair <em>x<sub>1</sub> x<sub>2</sub></em> to the top of the stack.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0400 2OVER -->\n      <span class=\"tt\">T{ 1&nbsp;2&nbsp;3&nbsp;4&nbsp;<strong>2OVER</strong> -&gt; 1&nbsp;2&nbsp;3&nbsp;4&nbsp;1&nbsp;2 }T</span>\n      \n      \n      "
                    }
                }
            },
            "TwoRFetch": {
                "id": "core:2R@",
                "number": "6.2.0415",
                "name": "2R@",
                "english": "two-r-fetch",
                "list": "CORE EXT",
                "basename": "TwoRFetch",
                "stackEffect": {
                    "html": {
                        "Execution:": "( -- <em>x<sub>1</sub> x<sub>2</sub></em> )\n      ( R: <em>x<sub>1</sub> x<sub>2</sub></em> -- <em>x<sub>1</sub> x<sub>2</sub></em> )"
                    },
                    "plain": {
                        "Execution:": "( -- x1 x2 )\n( R: x1 x2 -- x1 x2 )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Execution:": {
                        "name": "Execution:",
                        "html": "\n\n\n      ( -- <em>x<sub>1</sub> x<sub>2</sub></em> )\n      ( R: <em>x<sub>1</sub> x<sub>2</sub></em> -- <em>x<sub>1</sub> x<sub>2</sub></em> )\n      <p>\n      Copy cell pair <em>x<sub>1</sub> x<sub>2</sub></em> from the return stack.\n      Semantically equivalent to <a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/TwoDUP.html\">2DUP</a>\n      <a href=\"../core/toR.html\">&gt;R</a> <a href=\"../core/toR.html\">&gt;R</a> <a href=\"../core/SWAP.html\">SWAP</a>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:returnstack\">3.2.3.3 Return stack</a></strong>,\n      <a href=\"../core/toR.html\">6.1.0580 &gt;R</a>,\n      <a href=\"../core/Rfrom.html\">6.1.2060 R&gt;</a>,\n      <a href=\"../core/RFetch.html\">6.1.2070 R@</a>,\n      <a href=\"../core/TwotoR.html\">6.2.0340 2&gt;R</a>,\n      <a href=\"../core/TwoRfrom.html\">6.2.0410 2R&gt;</a>.\n      \n      "
                    }
                }
            },
            "TwoRfrom": {
                "id": "core:2Rfrom",
                "number": "6.2.0410",
                "name": "2R>",
                "english": "two-r-from",
                "list": "CORE EXT",
                "basename": "TwoRfrom",
                "stackEffect": {
                    "html": {
                        "Execution:": "( -- <em>x<sub>1</sub> x<sub>2</sub></em> )\n      ( R: <em>x<sub>1</sub> x<sub>2</sub></em> -- )"
                    },
                    "plain": {
                        "Execution:": "( -- x1 x2 )\n( R: x1 x2 -- )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Execution:": {
                        "name": "Execution:",
                        "html": "\n\n\n      ( -- <em>x<sub>1</sub> x<sub>2</sub></em> )\n      ( R: <em>x<sub>1</sub> x<sub>2</sub></em> -- )\n      <p>\n      Transfer cell pair <em>x<sub>1</sub> x<sub>2</sub></em> from the return stack.\n      Semantically equivalent to <a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/SWAP.html\">SWAP</a>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:returnstack\">3.2.3.3 Return stack</a></strong>,\n      <a href=\"../core/toR.html\">6.1.0580 &gt;R</a>\n      <a href=\"../core/Rfrom.html\">6.1.2060 R&gt;</a>\n      <a href=\"../core/RFetch.html\">6.1.2070 R@</a>\n      <a href=\"../core/TwotoR.html\">6.2.0340 2&gt;R</a>,\n      <a href=\"../core/TwoRFetch.html\">6.2.0415 2R@</a>,\n      <a href=\"../rationale.html#rat:core:2Rfrom\">A.6.2.0410 2R&gt;</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.2.0410 2R> -->\n      Note that <strong>2R&gt;</strong> is not equivalent to <a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/Rfrom.html\">R&gt;</a>.\n      Instead, it mirrors the action of <a href=\"../core/TwotoR.html\">2&gt;R</a>\n      (see <a href=\"core.html#rat:core:2toR\">A.6.2.0340</a>).\n      \n      \n      "
                    }
                }
            },
            "TwoSWAP": {
                "id": "core:2SWAP",
                "number": "6.1.0430",
                "name": "2SWAP",
                "english": "two-swap",
                "list": "CORE",
                "basename": "TwoSWAP",
                "stackEffect": {
                    "html": {
                        " ": "( <em>x<sub>1</sub> x<sub>2</sub> x<sub>3</sub> x<sub>4</sub></em> -- <em>x<sub>3</sub> x<sub>4</sub> x<sub>1</sub> x<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( x1 x2 x3 x4 -- x3 x4 x1 x2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>x<sub>1</sub> x<sub>2</sub> x<sub>3</sub> x<sub>4</sub></em> -- <em>x<sub>3</sub> x<sub>4</sub> x<sub>1</sub> x<sub>2</sub></em> )\n      <p>\n      Exchange the top two cell pairs.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0430 2SWAP -->\n      <span class=\"tt\">T{ 1&nbsp;2&nbsp;3&nbsp;4&nbsp;<strong>2SWAP</strong> -&gt; 3&nbsp;4&nbsp;1&nbsp;2 }T</span>\n      \n      \n      "
                    }
                }
            },
            "TwoStore": {
                "id": "core:2!",
                "number": "6.1.0310",
                "name": "2!",
                "english": "two-store",
                "list": "CORE",
                "basename": "TwoStore",
                "stackEffect": {
                    "html": {
                        " ": "( <em>x<sub>1</sub> x<sub>2</sub> a-addr</em> -- )"
                    },
                    "plain": {
                        " ": "( x1 x2 a-addr -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>x<sub>1</sub> x<sub>2</sub> a-addr</em> -- )\n      <p>\n      Store the cell pair <em>x<sub>1</sub> x<sub>2</sub></em> at <em>a-addr</em>, with\n      <em>x<sub>2</sub></em> at <em>a-addr</em> and <em>x<sub>1</sub></em> at the next\n      consecutive cell. It is equivalent to the sequence\n      <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../core/OVER.html\">OVER</a> <a href=\"../core/Store.html\">!</a> <a href=\"../core/CELLPlus.html\">CELL+</a> <a href=\"../core/Store.html\">!</a>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:aaddr\">3.3.3.1 Address alignment</a></strong>.\n      <p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0310 2! -->\n      See <a href=\"../testsuite.html#test:core:,\">F.6.1.0150 ,</a>.\n      \n      \n      "
                    }
                }
            },
            "TwoTimes": {
                "id": "core:2*",
                "number": "6.1.0320",
                "name": "2*",
                "english": "two-star",
                "list": "CORE",
                "basename": "TwoTimes",
                "stackEffect": {
                    "html": {
                        " ": "( <em>x<sub>1</sub></em> -- <em>x<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( x1 -- x2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>x<sub>1</sub></em> -- <em>x<sub>2</sub></em> )\n      <p>\n      <em>x<sub>2</sub></em> is the result of shifting <em>x<sub>1</sub></em> one bit toward\n      the most-significant bit, filling the vacated least-significant\n      bit with zero.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0320 2* -->\n      <span class=\"tt\">T{ &nbsp;&nbsp;0S&nbsp;<strong>2*</strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -&gt; &nbsp;&nbsp;0S }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;1&nbsp;<strong>2*</strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -&gt; &nbsp;&nbsp;&nbsp;2 }T</span> <br>\n      <span class=\"tt\">T{ 4000&nbsp;<strong>2*</strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -&gt; 8000 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;1S&nbsp;<strong>2*</strong>&nbsp;1&nbsp;<a href=\"../core/XOR.html\">XOR</a> -&gt; &nbsp;&nbsp;1S }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;MSB&nbsp;<strong>2*</strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -&gt; &nbsp;&nbsp;0S }T</span>\n      \n      \n      "
                    }
                }
            },
            "TwotoR": {
                "id": "core:2toR",
                "number": "6.2.0340",
                "name": "2>R",
                "english": "two-to-r",
                "list": "CORE EXT",
                "basename": "TwotoR",
                "stackEffect": {
                    "html": {
                        "Execution:": "( <em>x<sub>1</sub> x<sub>2</sub></em> -- )\n      ( R: -- <em>x<sub>1</sub> x<sub>2</sub></em> )"
                    },
                    "plain": {
                        "Execution:": "( x1 x2 -- )\n( R: -- x1 x2 )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Execution:": {
                        "name": "Execution:",
                        "html": "\n\n\n      ( <em>x<sub>1</sub> x<sub>2</sub></em> -- )\n      ( R: -- <em>x<sub>1</sub> x<sub>2</sub></em> )\n      <p>\n      Transfer cell pair <em>x<sub>1</sub> x<sub>2</sub></em> to the return stack.\n      Semantically equivalent to <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../core/toR.html\">&gt;R</a> <a href=\"../core/toR.html\">&gt;R</a>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:returnstack\">3.2.3.3 Return stack</a></strong>,\n      <a href=\"../core/toR.html\">6.1.0580 &gt;R</a>,\n      <a href=\"../core/Rfrom.html\">6.1.2060 R&gt;</a>,\n      <a href=\"../core/RFetch.html\">6.1.2070 R@</a>,\n      <a href=\"../core/TwoRfrom.html\">6.2.0410 2R&gt;</a>,\n      <a href=\"../core/TwoRFetch.html\">6.2.0415 2R@</a>,\n      <a href=\"../rationale.html#rat:core:2toR\">A.6.2.0340 2&gt;R</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.2.0340 2>R -->\n      The primary advantage of <strong>2&gt;R</strong> is that it puts the top\n      stack entry on the top of the return stack. For instance, a\n      double-cell number may be transferred to the return stack and\n      still have the most significant cell accessible on the top of\n      the return stack.\n      \n      \n      "
                    }
                }
            },
            "UDotR": {
                "id": "core:U.R",
                "number": "6.2.2330",
                "name": "U.R",
                "english": "u-dot-r",
                "list": "CORE EXT",
                "basename": "UDotR",
                "stackEffect": {
                    "html": {
                        " ": "( <em>u n</em> -- )"
                    },
                    "plain": {
                        " ": "( u n -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>u n</em> -- )\n      <p>\n      Display <em>u</em> right aligned in a field <em>n</em> characters\n      wide. If the number of characters required to display <em>u</em>\n      is greater than <em>n</em>, all digits are displayed with no leading\n      spaces in a field as wide as necessary.\n      \n      </p>"
                    }
                }
            },
            "UMDivMOD": {
                "id": "core:UM/MOD",
                "number": "6.1.2370",
                "name": "UM/MOD",
                "english": "u-m-slash-mod",
                "list": "CORE",
                "basename": "UMDivMOD",
                "stackEffect": {
                    "html": {
                        " ": "( <em>ud u<sub>1</sub></em> -- <em>u<sub>2</sub> u<sub>3</sub></em> )"
                    },
                    "plain": {
                        " ": "( ud u1 -- u2 u3 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>ud u<sub>1</sub></em> -- <em>u<sub>2</sub> u<sub>3</sub></em> )\n      <p>\n      Divide <em>ud</em> by <em>u<sub>1</sub></em>, giving the quotient <em>u<sub>3</sub></em>\n      and the remainder <em>u<sub>2</sub></em>. All values and arithmetic are\n      unsigned. An ambiguous condition exists if <em>u<sub>1</sub></em> is zero or\n      if the quotient lies outside the range of a single-cell unsigned\n      integer.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:div\">3.2.2.1 Integer division</a></strong>,\n      <a href=\"../core/FMDivMOD.html\">6.1.1561 FM/MOD</a>,\n      <a href=\"../core/SMDivREM.html\">6.1.2214 SM/REM</a>.\n      <p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.2370 UM/MOD -->\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>UM/MOD</strong> -&gt; 0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>UM/MOD</strong> -&gt; 0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;<strong>UM/MOD</strong> -&gt; 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;<strong>UM/MOD</strong> -&gt; 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 }T</span> <br>\n      <span class=\"tt\">T{ MAX-UINT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;<a href=\"../core/UMTimes.html\">UM*</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;<strong>UM/MOD</strong> -&gt; 0&nbsp;MAX-UINT }T</span> <br>\n      <span class=\"tt\">T{ MAX-UINT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;<a href=\"../core/UMTimes.html\">UM*</a>&nbsp;MAX-UINT&nbsp;<strong>UM/MOD</strong> -&gt; 0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2 }T</span> <br>\n      <span class=\"tt\">T{ MAX-UINT&nbsp;MAX-UINT&nbsp;<a href=\"../core/UMTimes.html\">UM*</a>&nbsp;MAX-UINT&nbsp;<strong>UM/MOD</strong> -&gt; 0&nbsp;MAX-UINT }T</span>\n      \n      \n      "
                    }
                }
            },
            "UMTimes": {
                "id": "core:UM*",
                "number": "6.1.2360",
                "name": "UM*",
                "english": "u-m-star",
                "list": "CORE",
                "basename": "UMTimes",
                "stackEffect": {
                    "html": {
                        " ": "( <em>u<sub>1</sub> u<sub>2</sub></em> -- <em>ud</em> )"
                    },
                    "plain": {
                        " ": "( u1 u2 -- ud )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>u<sub>1</sub> u<sub>2</sub></em> -- <em>ud</em> )\n      <p>\n      Multiply <em>u<sub>1</sub></em> by <em>u<sub>2</sub></em>, giving the unsigned double-cell\n      product <em>ud</em>. All values and arithmetic are unsigned.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.2360 UM* -->\n      <span class=\"tt\">T{ 0&nbsp;0&nbsp;<strong>UM*</strong> -&gt; 0&nbsp;0 }T</span> <br>\n      <span class=\"tt\">T{ 0&nbsp;1&nbsp;<strong>UM*</strong> -&gt; 0&nbsp;0 }T</span> <br>\n      <span class=\"tt\">T{ 1&nbsp;0&nbsp;<strong>UM*</strong> -&gt; 0&nbsp;0 }T</span> <br>\n      <span class=\"tt\">T{ 1&nbsp;2&nbsp;<strong>UM*</strong> -&gt; 2&nbsp;0 }T</span> <br>\n      <span class=\"tt\">T{ 2&nbsp;1&nbsp;<strong>UM*</strong> -&gt; 2&nbsp;0 }T</span> <br>\n      <span class=\"tt\">T{ 3&nbsp;3&nbsp;<strong>UM*</strong> -&gt; 9&nbsp;0 }T</span>\n      <p>\n      <span class=\"tt\">T{ MID-UINT+1&nbsp;1&nbsp;<a href=\"../core/RSHIFT.html\">RSHIFT</a>&nbsp;2&nbsp;<strong>UM*</strong> -&gt; &nbsp;MID-UINT+1&nbsp;0 }T</span> <br>\n      <span class=\"tt\">T{ MID-UINT+1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;<strong>UM*</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;1 }T</span> <br>\n      <span class=\"tt\">T{ MID-UINT+1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;<strong>UM*</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;2 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1S&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;<strong>UM*</strong> -&gt; 1S&nbsp;1&nbsp;<a href=\"../core/LSHIFT.html\">LSHIFT</a>&nbsp;1 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;MAX-UINT&nbsp;&nbsp;&nbsp;MAX-UINT&nbsp;<strong>UM*</strong> -&gt; &nbsp;&nbsp;&nbsp;1&nbsp;1&nbsp;<a href=\"../core/INVERT.html\">INVERT</a> }T</span>\n      \n      \n      </p>"
                    }
                }
            },
            "UNLOOP": {
                "id": "core:UNLOOP",
                "number": "6.1.2380",
                "name": "UNLOOP",
                "english": " ",
                "list": "CORE",
                "basename": "UNLOOP",
                "stackEffect": {
                    "html": {
                        "Execution:": "( -- )\n      ( R: <em>loop-sys</em> -- )"
                    },
                    "plain": {
                        "Execution:": "( -- )\n( R: loop-sys -- )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Execution:": {
                        "name": "Execution:",
                        "html": "\n\n\n      ( -- )\n      ( R: <em>loop-sys</em> -- )\n      <p>\n      Discard the loop-control parameters for the current nesting\n      level. An <strong>UNLOOP</strong> is required for each nesting level\n      before the definition may be <a href=\"../core/EXIT.html\">EXIT</a>ed. An ambiguous\n      condition exists if the loop-control parameters are unavailable.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:returnstack\">3.2.3.3 Return stack</a></strong>,\n      <a href=\"../rationale.html#rat:core:UNLOOP\">A.6.1.2380 UNLOOP</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.1.2380 UNLOOP -->\n      Typical use:\n            <div class=\"quote\">\n\n        <a href=\"../core/Colon.html\">:</a> <code>X</code> ... <br>\n        &nbsp;&nbsp; <em>limit</em> <em>first</em> <a href=\"../core/DO.html\">DO</a> <br>\n        &nbsp;&nbsp;   ... <em>test</em> <a href=\"../core/IF.html\">IF</a>\n        ... <strong>UNLOOP</strong> <a href=\"../core/EXIT.html\">EXIT</a> <a href=\"../core/THEN.html\">THEN</a> ... <br>\n        &nbsp;&nbsp; <a href=\"../core/LOOP.html\">LOOP</a> ... <br>\n        <a href=\"../core/Semi.html\">;</a>\n        \n        </div>\n      <p>\n      <strong>UNLOOP</strong> allows the use of <a href=\"../core/EXIT.html\">EXIT</a> within the context\n      of <a href=\"../core/DO.html\">DO</a> ... <a href=\"../core/LOOP.html\">LOOP</a> and related do-loop constructs.\n      <strong>UNLOOP</strong> as a function has been called <code>UNDO</code>.\n      <strong>UNLOOP</strong> is more indicative of the action: nothing gets\n      undone — we simply stop doing it.\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.2380 UNLOOP -->\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;GD6&nbsp;<a href=\"../core/p.html\">(</a>&nbsp;PAT:&nbsp;{0&nbsp;0},{0&nbsp;0}{1&nbsp;0}{1&nbsp;1},{0&nbsp;0}{1&nbsp;0}{1&nbsp;1}{2&nbsp;0}{2&nbsp;1}{2&nbsp;2}&nbsp;)&nbsp;<br>\n      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;<a href=\"../core/SWAP.html\">SWAP</a>&nbsp;0&nbsp;<a href=\"../core/DO.html\">DO</a>&nbsp;<br>\n      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/I.html\">I</a>&nbsp;<a href=\"../core/OnePlus.html\">1+</a>&nbsp;0&nbsp;<a href=\"../core/DO.html\">DO</a>&nbsp;<br>\n      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/I.html\">I</a>&nbsp;<a href=\"../core/J.html\">J</a>&nbsp;<a href=\"../core/Plus.html\">+</a>&nbsp;3&nbsp;<a href=\"../core/Equal.html\">=</a>&nbsp;<a href=\"../core/IF.html\">IF</a>\n      <a href=\"../core/I.html\">I</a>&nbsp;<strong>UNLOOP</strong>&nbsp;<a href=\"../core/I.html\">I</a>&nbsp;<strong>UNLOOP</strong>&nbsp;<a href=\"../core/EXIT.html\">EXIT</a>&nbsp;<a href=\"../core/THEN.html\">THEN</a>&nbsp;<a href=\"../core/OnePlus.html\">1+</a>&nbsp;<br>\n      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/LOOP.html\">LOOP</a>&nbsp;<br>\n      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/LOOP.html\">LOOP</a>&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ 1&nbsp;GD6 -&gt; 1 }T</span> <br>\n      <span class=\"tt\">T{ 2&nbsp;GD6 -&gt; 3 }T</span> <br>\n      <span class=\"tt\">T{ 3&nbsp;GD6 -&gt; 4&nbsp;1&nbsp;2 }T</span>\n      \n      \n      "
                    }
                }
            },
            "UNTIL": {
                "id": "core:UNTIL",
                "number": "6.1.2390",
                "name": "UNTIL",
                "english": " ",
                "list": "CORE",
                "basename": "UNTIL",
                "stackEffect": {
                    "html": {
                        "Compilation:": "( C: <em>dest</em> -- )",
                        "Run-time:": "( <em>x</em> -- )"
                    },
                    "plain": {
                        "Compilation:": "( C: dest -- )",
                        "Run-time:": "( x -- )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      ( C: <em>dest</em> -- )\n      <p>\n      Append the run-time semantics given below to the current\n      definition, resolving the backward reference <em>dest</em>.\n      </p><p>\n        \n      </p>"
                    },
                    "Run-time:": {
                        "name": "Run-time:",
                        "html": "\n\n\n      ( <em>x</em> -- )\n      <p>\n      If all bits of <em>x</em> are zero, continue execution at the\n      location specified by <em>dest</em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/BEGIN.html\">6.1.0760 BEGIN</a>,\n      <a href=\"../rationale.html#rat:core:UNTIL\">A.6.1.2390 UNTIL</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.1.2390 UNTIL -->\n      Typical use:\n      <a href=\"../core/Colon.html\">:</a> <code>X</code> ...\n      <a href=\"../core/BEGIN.html\">BEGIN</a> ... <em>test</em> <strong>UNTIL</strong>\n      ... <a href=\"../core/Semi.html\">;</a>\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.2390 UNTIL -->\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;GI4&nbsp;<a href=\"../core/BEGIN.html\">BEGIN</a>&nbsp;<a href=\"../core/DUP.html\">DUP</a>&nbsp;<a href=\"../core/OnePlus.html\">1+</a>&nbsp;<a href=\"../core/DUP.html\">DUP</a>&nbsp;5&nbsp;<a href=\"../core/more.html\">&gt;</a>&nbsp;<strong>UNTIL</strong>&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ 3&nbsp;GI4 -&gt; 3&nbsp;4&nbsp;5&nbsp;6 }T</span> <br>\n      <span class=\"tt\">T{ 5&nbsp;GI4 -&gt; 5&nbsp;6 }T</span> <br>\n      <span class=\"tt\">T{ 6&nbsp;GI4 -&gt; 6&nbsp;7 }T</span>\n      \n      \n      "
                    }
                }
            },
            "UNUSED": {
                "id": "core:UNUSED",
                "number": "6.2.2395",
                "name": "UNUSED",
                "english": " ",
                "list": "CORE EXT",
                "basename": "UNUSED",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>u</em> )"
                    },
                    "plain": {
                        " ": "( -- u )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>u</em> )\n      <p>\n      <em>u</em> is the amount of space remaining in the region addressed\n      by <a href=\"../core/HERE.html\">HERE</a>, in address units.\n      \n      </p>"
                    }
                }
            },
            "Ud": {
                "id": "core:Ud",
                "number": "6.1.2320",
                "name": "U.",
                "english": "u-dot",
                "list": "CORE",
                "basename": "Ud",
                "stackEffect": {
                    "html": {
                        " ": "( <em>u</em> -- )"
                    },
                    "plain": {
                        " ": "( u -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>u</em> -- )\n      <p>\n      Display <em>u</em> in free field format.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.2320 U. -->\n      See <a href=\"../testsuite.html#test:core:EMIT\">F.6.1.1320 EMIT</a>.\n      \n      \n      "
                    }
                }
            },
            "Uless": {
                "id": "core:Uless",
                "number": "6.1.2340",
                "name": "U<",
                "english": "u-less-than",
                "list": "CORE",
                "basename": "Uless",
                "stackEffect": {
                    "html": {
                        " ": "( <em>u<sub>1</sub> u<sub>2</sub></em> -- <em>flag</em> )"
                    },
                    "plain": {
                        " ": "( u1 u2 -- flag )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>u<sub>1</sub> u<sub>2</sub></em> -- <em>flag</em> )\n      <p>\n      <em>flag</em> is true if and only if <em>u<sub>1</sub></em> is less than\n      <em>u<sub>2</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/less.html\">6.1.0480 &lt;</a>.\n      <p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.2340 U< -->\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>U&lt;</strong> -&gt; &lt;TRUE&gt;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;<strong>U&lt;</strong> -&gt; &lt;TRUE&gt;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;MID-UINT&nbsp;<strong>U&lt;</strong> -&gt; &lt;TRUE&gt;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;MAX-UINT&nbsp;<strong>U&lt;</strong> -&gt; &lt;TRUE&gt;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ MID-UINT&nbsp;MAX-UINT&nbsp;<strong>U&lt;</strong> -&gt; &lt;TRUE&gt;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;<strong>U&lt;</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>U&lt;</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;<strong>U&lt;</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>U&lt;</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ MID-UINT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;<strong>U&lt;</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ MAX-UINT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;<strong>U&lt;</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ MAX-UINT&nbsp;MID-UINT&nbsp;<strong>U&lt;</strong> -&gt; &lt;FALSE&gt; }T</span>\n      \n      \n      "
                    }
                }
            },
            "Umore": {
                "id": "core:Umore",
                "number": "6.2.2350",
                "name": "U>",
                "english": "u-greater-than",
                "list": "CORE EXT",
                "basename": "Umore",
                "stackEffect": {
                    "html": {
                        " ": "( <em>u<sub>1</sub> u<sub>2</sub></em> -- <em>flag</em> )"
                    },
                    "plain": {
                        " ": "( u1 u2 -- flag )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>u<sub>1</sub> u<sub>2</sub></em> -- <em>flag</em> )\n      <p>\n      <em>flag</em> is true if and only if <em>u<sub>1</sub></em> is greater than\n      <em>u<sub>2</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/more.html\">6.1.0540 &gt;</a>.\n      \n      "
                    }
                }
            },
            "VALUE": {
                "id": "core:VALUE",
                "number": "6.2.2405",
                "name": "VALUE",
                "english": " ",
                "list": "CORE EXT",
                "basename": "VALUE",
                "stackEffect": {
                    "html": {
                        " ": "( <em>x \"&lt;spaces&gt;name\"</em> -- )",
                        "name Execution:": "( -- <em>x</em> )",
                        "TO name Run-time:": "( <em>x</em> -- )"
                    },
                    "plain": {
                        " ": "( x \"<spaces>name\" -- )",
                        "name Execution:": "( -- x )",
                        "TO name Run-time:": "( x -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>x \"&lt;spaces&gt;name\"</em> -- )\n      <p>\n      Skip leading space delimiters. Parse <em>name</em> delimited by\n      a space. Create a definition for <em>name</em> with the execution\n      semantics defined below, with an initial value equal to <em>x</em>.\n      </p><p>\n      <em>name</em> is referred to as a \"value\".\n      </p><p>\n        \n      </p>"
                    },
                    "name Execution:": {
                        "name": "name Execution:",
                        "html": "\n\n\n      ( -- <em>x</em> )\n      <p>\n      Place <em>x</em> on the stack. The value of <em>x</em> is that\n      given when <em>name</em> was created, until the phrase <em>x</em>\n      <a href=\"../core/TO.html\">TO</a> <em>name</em> is executed, causing a new value of\n      <em>x</em> to be assigned to <em>name</em>.\n      </p><p>\n        \n      </p>"
                    },
                    "TO name Run-time:": {
                        "name": "TO name Run-time:",
                        "html": "\n\n\n      ( <em>x</em> -- )\n      <p>\n      Assign the value <em>x</em> to <em>name</em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:parsing\">3.4.1 Parsing</a></strong>,\n      <a href=\"../core/TO.html\">6.2.2295 TO</a>,\n      <a href=\"../rationale.html#rat:core:VALUE\">A.6.2.2405 VALUE</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.2.2405 VALUE -->\n      Typical use:\n            <div class=\"quote\">\n        <div class=\"tt\">\n0 <strong>VALUE</strong> data\n          <p>\n          <a href=\"../core/Colon.html\">:</a> EXCHANGE <a href=\"../core/p.html\">(</a> n1 -- n2 )\n          data <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../core/TO.html\">TO</a> data\n          <a href=\"../core/Semi.html\">;</a>\n          \n          </p></div>\n        </div>\n      <code>EXCHANGE</code> leaves <em>n<sub>1</sub></em> in <code>data</code> and\n      returns the prior value <em>n<sub>2</sub></em>.\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.2.2405 VALUE -->\n      <span class=\"tt\">T{ &nbsp;111&nbsp;VALUE&nbsp;v1 -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ -999&nbsp;VALUE&nbsp;v2 -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ v1 -&gt; &nbsp;111 }T</span> <br>\n      <span class=\"tt\">T{ v2 -&gt; -999 }T</span> <br>\n      <span class=\"tt\">T{ 222&nbsp;TO&nbsp;v1 -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ v1 -&gt; 222 }T</span>\n      <p>\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;vd1&nbsp;v1&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ vd1 -&gt; 222 }T</span>\n      </p><p>\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;vd2&nbsp;<a href=\"../core/TO.html\">TO</a>&nbsp;v2&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ v2 -&gt; -999 }T</span> <br>\n      <span class=\"tt\">T{ -333&nbsp;vd2 -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ v2 -&gt; -333 }T</span> <br>\n      <span class=\"tt\">T{ v1 -&gt; &nbsp;222 }T</span>\n      \n      \n      </p>"
                    }
                }
            },
            "VARIABLE": {
                "id": "core:VARIABLE",
                "number": "6.1.2410",
                "name": "VARIABLE",
                "english": " ",
                "list": "CORE",
                "basename": "VARIABLE",
                "stackEffect": {
                    "html": {
                        " ": "( <em>\"&lt;spaces&gt;name\"</em> -- )",
                        "name Execution:": "( -- <em>a-addr</em> )"
                    },
                    "plain": {
                        " ": "( \"<spaces>name\" -- )",
                        "name Execution:": "( -- a-addr )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>\"&lt;spaces&gt;name\"</em> -- )\n      <p>\n      Skip leading space delimiters. Parse <em>name</em> delimited by\n      a space. Create a definition for <em>name</em> with the execution\n      semantics defined below. Reserve one cell of data space at an\n      aligned address.\n      </p><p>\n      <em>name</em> is referred to as a \"variable\".\n      </p><p>\n        \n      </p>"
                    },
                    "name Execution:": {
                        "name": "name Execution:",
                        "html": "\n\n\n      ( -- <em>a-addr</em> )\n      <p>\n      <em>a-addr</em> is the address of the reserved cell. A program\n      is responsible for initializing the contents of the reserved\n      cell.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:parsing\">3.4.1 Parsing</a></strong>,\n      <a href=\"../rationale.html#rat:core:VARIABLE\">A.6.1.2410 VARIABLE</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.1.2410 VARIABLE -->\n      Typical use:\n      <strong>VARIABLE</strong> <code>XYZ</code>\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.2410 VARIABLE -->\n      <span class=\"tt\">T{ <strong>VARIABLE</strong>&nbsp;V1 -&gt; &nbsp;&nbsp;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;123&nbsp;V1&nbsp;<a href=\"../core/Store.html\">!</a> -&gt; &nbsp;&nbsp;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;V1&nbsp;<a href=\"../core/Fetch.html\">@</a> -&gt; 123 }T</span>\n      \n      \n      "
                    }
                }
            },
            "WHILE": {
                "id": "core:WHILE",
                "number": "6.1.2430",
                "name": "WHILE",
                "english": " ",
                "list": "CORE",
                "basename": "WHILE",
                "stackEffect": {
                    "html": {
                        "Compilation:": "( C: <em>dest</em> -- <em>orig dest</em> )",
                        "Run-time:": "( <em>x</em> -- )"
                    },
                    "plain": {
                        "Compilation:": "( C: dest -- orig dest )",
                        "Run-time:": "( x -- )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      ( C: <em>dest</em> -- <em>orig dest</em> )\n      <p>\n      Put the location of a new unresolved forward reference\n      <em>orig</em> onto the control flow stack, under the existing\n      <em>dest</em>. Append the run-time semantics given below to the\n      current definition. The semantics are incomplete until\n      <em>orig</em> and <em>dest</em> are resolved (e.g., by\n      <a href=\"../core/REPEAT.html\">REPEAT</a>).\n      </p><p>\n        \n      </p>"
                    },
                    "Run-time:": {
                        "name": "Run-time:",
                        "html": "\n\n\n      ( <em>x</em> -- )\n      <p>\n      If all bits of <em>x</em> are zero, continue execution at the\n      location specified by the resolution of <em>orig</em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../rationale.html#rat:core:WHILE\">A.6.1.2430 WHILE</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.1.2430 WHILE -->\n      Typical use:\n      <a href=\"../core/Colon.html\">:</a> <code>X</code> ...\n      <a href=\"../core/BEGIN.html\">BEGIN</a> ...\n      <em>test</em> <strong>WHILE</strong>\n      ... <a href=\"../core/REPEAT.html\">REPEAT</a>\n      ... <a href=\"../core/Semi.html\">;</a>\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.2430 WHILE -->\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;GI3&nbsp;<a href=\"../core/BEGIN.html\">BEGIN</a>&nbsp;<a href=\"../core/DUP.html\">DUP</a>&nbsp;5&nbsp;<a href=\"../core/less.html\">&lt;</a>&nbsp;<strong>WHILE</strong>&nbsp;<a href=\"../core/DUP.html\">DUP</a>&nbsp;<a href=\"../core/OnePlus.html\">1+</a>&nbsp;<a href=\"../core/REPEAT.html\">REPEAT</a>&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ 0&nbsp;GI3 -&gt; 0&nbsp;1&nbsp;2&nbsp;3&nbsp;4&nbsp;5 }T</span> <br>\n      <span class=\"tt\">T{ 4&nbsp;GI3 -&gt; 4&nbsp;5 }T</span> <br>\n      <span class=\"tt\">T{ 5&nbsp;GI3 -&gt; 5 }T</span> <br>\n      <span class=\"tt\">T{ 6&nbsp;GI3 -&gt; 6 }T</span>\n      <p>\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;GI5&nbsp;<a href=\"../core/BEGIN.html\">BEGIN</a>&nbsp;<a href=\"../core/DUP.html\">DUP</a>&nbsp;2&nbsp;<a href=\"../core/more.html\">&gt;</a>&nbsp;<strong>WHILE</strong>&nbsp;<br>\n      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/DUP.html\">DUP</a>&nbsp;5&nbsp;<a href=\"../core/less.html\">&lt;</a>&nbsp;<strong>WHILE</strong>&nbsp;<a href=\"../core/DUP.html\">DUP</a>&nbsp;<a href=\"../core/OnePlus.html\">1+</a>&nbsp;<a href=\"../core/REPEAT.html\">REPEAT</a>&nbsp;<br>\n      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;123&nbsp;<a href=\"../core/ELSE.html\">ELSE</a>&nbsp;345&nbsp;<a href=\"../core/THEN.html\">THEN</a>&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ 1&nbsp;GI5 -&gt; 1&nbsp;345 }T</span> <br>\n      <span class=\"tt\">T{ 2&nbsp;GI5 -&gt; 2&nbsp;345 }T</span> <br>\n      <span class=\"tt\">T{ 3&nbsp;GI5 -&gt; 3&nbsp;4&nbsp;5&nbsp;123 }T</span> <br>\n      <span class=\"tt\">T{ 4&nbsp;GI5 -&gt; 4&nbsp;5&nbsp;123 }T</span> <br>\n      <span class=\"tt\">T{ 5&nbsp;GI5 -&gt; 5&nbsp;123 }T</span>\n      \n      \n      </p>"
                    }
                }
            },
            "WITHIN": {
                "id": "core:WITHIN",
                "number": "6.2.2440",
                "name": "WITHIN",
                "english": " ",
                "list": "CORE EXT",
                "basename": "WITHIN",
                "stackEffect": {
                    "html": {
                        " ": "( <em>n<sub>1</sub> | u<sub>1</sub> n<sub>2</sub> | u<sub>2</sub> n<sub>3</sub> | u<sub>3</sub></em> -- <em>flag</em> )"
                    },
                    "plain": {
                        " ": "( n1 | u1 n2 | u2 n3 | u3 -- flag )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>n<sub>1</sub> | u<sub>1</sub> n<sub>2</sub> | u<sub>2</sub> n<sub>3</sub> | u<sub>3</sub></em> -- <em>flag</em> )\n      <p>\n      Perform a comparison of a test value <em>n<sub>1</sub> | u<sub>1</sub></em> with a\n      lower limit <em>n<sub>2</sub> | u<sub>2</sub></em> and an upper limit\n      <em>n<sub>3</sub> | u<sub>3</sub></em>, returning <em>true</em> if either\n      (<em>n<sub>2</sub> | u<sub>2</sub></em> &lt;  <em>n<sub>3</sub> | u<sub>3</sub></em> and\n      (<em>n<sub>2</sub> | u<sub>2</sub></em> &lt;= <em>n<sub>1</sub> | u<sub>1</sub></em> and\n      <em>n<sub>1</sub> | u<sub>1</sub></em> &lt;  <em>n<sub>3</sub> | u<sub>3</sub></em>)) or\n      (<em>n<sub>2</sub> | u<sub>2</sub></em> &gt;  <em>n<sub>3</sub> | u<sub>3</sub></em> and\n      (<em>n<sub>2</sub> | u<sub>2</sub></em> &lt;= <em>n<sub>1</sub> | u<sub>1</sub></em> or\n      <em>n<sub>1</sub> | u<sub>1</sub></em> &lt;  <em>n<sub>3</sub> | u<sub>3</sub></em>)) is true, returning\n      <em>false</em> otherwise. An ambiguous condition exists\n      <em>n<sub>1</sub> | u<sub>1</sub></em>, <em>n<sub>2</sub> | u<sub>2</sub></em>, and <em>n<sub>3</sub> | u<sub>3</sub></em> are not\n      all the same type.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../rationale.html#rat:core:WITHIN\">A.6.2.2440 WITHIN</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.2.2440 WITHIN -->\n      We describe <strong>WITHIN</strong> without mentioning circular number\n      spaces (an undefined term) or providing the code. Here is a\n      number line with the overflow point (<em>o</em>) at the far right and\n      the underflow point (<em>u</em>) at the far left:\n      <div class=\"center\">\n\n        <em>u</em>---------------<em>o</em>\n        \n        </div>\n      There are two cases to consider: either the\n      <em>n<sub>2</sub> | u<sub>2</sub>... n<sub>3</sub> | u<sub>3</sub></em> range straddles the overflow/underflow\n      points or it does not. Lets examine the non-straddle case\n      first:\n      <div class=\"center\">\n\n        <em>u</em>-----[.....)-----<em>o</em>\n        \n        </div>\n      The [ denotes <em>n<sub>2</sub> | u<sub>2</sub></em>, the ) denotes <em>n<sub>3</sub> | u<sub>3</sub></em>,\n      and the dots and [ are numbers <strong>WITHIN</strong> the range.\n      <em>n<sub>3</sub> | u<sub>3</sub></em> is greater than <em>n<sub>2</sub> | u<sub>2</sub></em>, so the\n      following tests will determine if <em>n<sub>1</sub> | u<sub>1</sub></em> is\n      <strong>WITHIN</strong> <em>n<sub>2</sub> | u<sub>2</sub></em> and <em>n<sub>3</sub> | u<sub>3</sub></em>:\n      <div class=\"center\">\n\n        <em>n<sub>2</sub> | u<sub>2</sub></em> <em>&lt;=</em> <em>n<sub>1</sub> | u<sub>1</sub></em> and <em>n<sub>1</sub> | u<sub>1</sub></em> &lt; <em>n<sub>3</sub> | u<sub>3</sub></em>.\n        \n        </div>\n      In the case where the comparison range straddles the\n      overflow/underflow points:\n      <div class=\"center\">\n\n        <em>u</em>.....)-----[.....<em>o</em>\n        \n        </div>\n      <em>n<sub>3</sub> | u<sub>3</sub></em> is less than <em>n<sub>2</sub> | u<sub>2</sub></em> and the following\n      tests will determine if <em>n<sub>1</sub> | u<sub>1</sub></em> is <strong>WITHIN</strong>\n      <em>n<sub>2</sub> | u<sub>2</sub></em> and <em>n<sub>3</sub> | u<sub>3</sub></em>:\n      <div class=\"center\">\n\n        <em>n<sub>2</sub> | u<sub>2</sub></em> <em>&lt;=</em> <em>n<sub>1</sub> | u<sub>1</sub></em> or <em>n<sub>1</sub> | u<sub>1</sub></em> &lt; <em>n<sub>3</sub> | u<sub>3</sub></em>.\n        \n        </div>\n      <strong>WITHIN</strong> must work for both signed and unsigned arguments.\n      One obvious implementation does not work:\n            <div class=\"quote\">\n        <div class=\"tt\">\n<a href=\"../core/Colon.html\">:</a> <strong>WITHIN</strong> <a href=\"../core/p.html\">(</a> test low high -- flag ) <br>\n          &nbsp;&nbsp; <a href=\"../core/toR.html\">&gt;R</a> <a href=\"../core/OVER.html\">OVER</a> <a href=\"../core/less.html\">&lt;</a> <a href=\"../core/ZeroEqual.html\">0=</a> <a href=\"../core/p.html\">(</a> test flag1 )\n          <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/less.html\">&lt;</a> <a href=\"../core/p.html\">(</a> flag1 flag2 )\n          <a href=\"../core/AND.html\">AND</a> <br>\n          <a href=\"../core/Semi.html\">;</a>\n          \n          </div>\n        </div>\n      Assume two's-complement arithmetic on a 16-bit machine, and\n      consider the following test:\n      <p>\n      &nbsp;&nbsp; <code>33000   32000   34000   WITHIN</code>\n      </p><p>\n      The above implementation returns <em>false</em> for that test,\n      even though the unsigned number 33000 is clearly within the\n      range {{32000 ... 34000}}.\n      </p><p>\n      The problem is that, in the incorrect implementation, the\n      signed comparison <a href=\"../core/less.html\">&lt;</a> gives the wrong answer when 32000\n      is compared to 33000, because when those numbers are treated\n      as signed numbers, 33000 is treated as negative 32536, while\n      32000 remains positive.\n      </p><p>\n      Replacing <a href=\"../core/less.html\">&lt;</a> with <a href=\"../core/Uless.html\">U&lt;</a> in the above implementation\n      makes it work with unsigned numbers, but causes problems with\n      certain signed number ranges; in particular, the test:\n            </p><div class=\"quote\">\n        <div class=\"tt\">\n1   -5   5   WITHIN\n          \n          </div>\n        </div>\n      would give an incorrect answer.\n      <p>\n      For two's-complement machines that ignore arithmetic overflow\n      (most machines), the following implementation works in all\n      cases:\n            </p><div class=\"quote\">\n        <div class=\"tt\">\n<a href=\"../core/Colon.html\">:</a> <strong>WITHIN</strong> <a href=\"../core/p.html\">(</a> test low high -- flag )\t \n          <a href=\"../core/OVER.html\">OVER</a> <a href=\"../core/Minus.html\">-</a> <a href=\"../core/toR.html\">&gt;R</a> <a href=\"../core/Minus.html\">-</a> <a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/Uless.html\">U&lt;</a>  \n          <a href=\"../core/Semi.html\">;</a>\n          \n          </div>\n        </div>\n      \n      \n      "
                    }
                }
            },
            "WORD": {
                "id": "core:WORD",
                "number": "6.1.2450",
                "name": "WORD",
                "english": " ",
                "list": "CORE",
                "basename": "WORD",
                "stackEffect": {
                    "html": {
                        " ": "( <em>char \"&lt;chars&gt;ccc&lt;char&gt;\"</em> -- <em>c-addr</em> )"
                    },
                    "plain": {
                        " ": "( char \"<chars>ccc<char>\" -- c-addr )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>char \"&lt;chars&gt;ccc&lt;char&gt;\"</em> -- <em>c-addr</em> )\n      <p>\n      Skip leading delimiters. Parse characters <em>ccc</em> delimited\n      by <em>char</em>.  An ambiguous condition exists if the length of\n      the parsed string is greater than the implementation-defined\n      length of a counted string.\n      </p><p>\n      <em>c-addr</em> is the address of a transient region containing\n      the parsed word as a counted string. If the parse area was\n      empty or contained no characters other than the delimiter, the\n      resulting string has a zero length.\n      A program may replace characters within the string.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:transient\">3.3.3.6 Other transient regions</a></strong>,\n      <strong><a href=\"../usage.html#usage:parsing\">3.4.1 Parsing</a></strong>,\n      <a href=\"../rationale.html#rat:core:WORD\">A.6.1.2450 WORD</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.1.2450 WORD -->\n      Typical use: <em>char</em> <strong>WORD</strong> <em>ccc</em>&lt;<em>char</em>&gt;\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.2450 WORD -->\n            <div class=\"tt\">\n<a href=\"../core/Colon.html\">:</a> GS3 <strong>WORD</strong> <a href=\"../core/COUNT.html\">COUNT</a> <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../core/CFetch.html\">C@</a> <a href=\"../core/Semi.html\">;</a> <br>\n        <span class=\"tt\">T{ <a href=\"../core/BL.html\">BL</a>&nbsp;GS3&nbsp;HELLO -&gt; 5&nbsp;<a href=\"../core/CHAR.html\">CHAR</a>&nbsp;H }T</span> <br>\n        <span class=\"tt\">T{ <a href=\"../core/CHAR.html\">CHAR</a>&nbsp;\"&nbsp;GS3&nbsp;GOODBYE\" -&gt; 7&nbsp;<a href=\"../core/CHAR.html\">CHAR</a>&nbsp;G }T</span> <br>\n        <span class=\"tt\">T{ BL&nbsp;GS3&nbsp;<br>\n        &nbsp;&nbsp;&nbsp;<a href=\"../core/DROP.html\">DROP</a> -&gt; 0 }T</span>  <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Blank lines return zero-length strings</span>\n        \n        \n        </div>\n      "
                    }
                }
            },
            "XOR": {
                "id": "core:XOR",
                "number": "6.1.2490",
                "name": "XOR",
                "english": "x-or",
                "list": "CORE",
                "basename": "XOR",
                "stackEffect": {
                    "html": {
                        " ": "( <em>x<sub>1</sub> x<sub>2</sub></em> -- <em>x<sub>3</sub></em> )"
                    },
                    "plain": {
                        " ": "( x1 x2 -- x3 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>x<sub>1</sub> x<sub>2</sub></em> -- <em>x<sub>3</sub></em> )\n      <p>\n      <em>x<sub>3</sub></em> is the bit-by-bit exclusive-or of <em>x<sub>1</sub></em> with\n      <em>x<sub>2</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.2490 XOR -->\n      <span class=\"tt\">T{ 0S&nbsp;0S&nbsp;<strong>XOR</strong> -&gt; 0S }T</span> <br>\n      <span class=\"tt\">T{ 0S&nbsp;1S&nbsp;<strong>XOR</strong> -&gt; 1S }T</span> <br>\n      <span class=\"tt\">T{ 1S&nbsp;0S&nbsp;<strong>XOR</strong> -&gt; 1S }T</span> <br>\n      <span class=\"tt\">T{ 1S&nbsp;1S&nbsp;<strong>XOR</strong> -&gt; 0S }T</span>\n      \n      \n      "
                    }
                }
            },
            "ZeroEqual": {
                "id": "core:0=",
                "number": "6.1.0270",
                "name": "0=",
                "english": "zero-equals",
                "list": "CORE",
                "basename": "ZeroEqual",
                "stackEffect": {
                    "html": {
                        " ": "( <em>x</em> -- <em>flag</em> )"
                    },
                    "plain": {
                        " ": "( x -- flag )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>x</em> -- <em>flag</em> )\n      <p>\n      <em>flag</em> is true if and only if <em>x</em> is equal to zero.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0270 0= -->\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;<strong>0=</strong> -&gt; &lt;TRUE&gt;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>0=</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;<strong>0=</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>0=</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ MAX-UINT&nbsp;<strong>0=</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ MIN-INT&nbsp;&nbsp;<strong>0=</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ MAX-INT&nbsp;&nbsp;<strong>0=</strong> -&gt; &lt;FALSE&gt; }T</span>\n      \n      \n      "
                    }
                }
            },
            "Zeroless": {
                "id": "core:0less",
                "number": "6.1.0250",
                "name": "0<",
                "english": "zero-less",
                "list": "CORE",
                "basename": "Zeroless",
                "stackEffect": {
                    "html": {
                        " ": "( <em>n</em> -- <em>flag</em> )"
                    },
                    "plain": {
                        " ": "( n -- flag )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>n</em> -- <em>flag</em> )\n      <p>\n      <em>flag</em> is true if and only if <em>n</em> is less than zero.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0250 0< -->\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;<strong>0&lt;</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>0&lt;</strong> -&gt; &lt;TRUE&gt;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ MIN-INT&nbsp;<strong>0&lt;</strong> -&gt; &lt;TRUE&gt;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>0&lt;</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ MAX-INT&nbsp;<strong>0&lt;</strong> -&gt; &lt;FALSE&gt; }T</span>\n      \n      \n      "
                    }
                }
            },
            "Zeromore": {
                "id": "core:0more",
                "number": "6.2.0280",
                "name": "0>",
                "english": "zero-greater",
                "list": "CORE EXT",
                "basename": "Zeromore",
                "stackEffect": {
                    "html": {
                        " ": "( <em>n</em> -- <em>flag</em> )"
                    },
                    "plain": {
                        " ": "( n -- flag )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>n</em> -- <em>flag</em> )\n      <p>\n      <em>flag</em> is true if and only if <em>n</em> is greater than\n      zero.\n      \n      </p>"
                    }
                }
            },
            "Zerone": {
                "id": "core:0ne",
                "number": "6.2.0260",
                "name": "0<>",
                "english": "zero-not-equals",
                "list": "CORE EXT",
                "basename": "Zerone",
                "stackEffect": {
                    "html": {
                        " ": "( <em>x</em> -- <em>flag</em> )"
                    },
                    "plain": {
                        " ": "( x -- flag )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>x</em> -- <em>flag</em> )\n      <p>\n      <em>flag</em> is true if and only if <em>x</em> is not equal to\n      zero.\n      \n      </p>"
                    }
                }
            },
            "bs": {
                "id": "core:bs",
                "number": "6.2.2535",
                "name": "\\",
                "english": "backslash",
                "list": "CORE EXT",
                "basename": "bs",
                "stackEffect": {
                    "html": {
                        "Execution:": "( <em>\"ccc&lt;eol&gt;\"</em> -- )"
                    },
                    "plain": {
                        "Execution:": "( \"ccc<eol>\" -- )"
                    }
                },
                "sections": {
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      Perform the execution semantics given below.\n      <p>\n        \n      </p>"
                    },
                    "Execution:": {
                        "name": "Execution:",
                        "html": "\n\n\n      ( <em>\"ccc&lt;eol&gt;\"</em> -- )\n      <p>\n      Parse and discard the remainder of the parse area.\n      <strong>\\</strong> is an immediate word.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../block/bs.html\">7.6.2.2535 \\</a>,\n      <a href=\"../rationale.html#rat:core:bs\">A.6.2.2535 \\</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.2.2535 \\ -->\n      Typical use:\n            <div class=\"quote\">\n        <div class=\"tt\">\n5 <a href=\"../core/CONSTANT.html\">CONSTANT</a> THAT\n            <strong>\\</strong>   <span class=\"rm\">This is a comment about THAT</span>\n          \n          </div>\n        </div>\n      \n      \n      "
                    }
                }
            },
            "d": {
                "id": "core:d",
                "number": "6.1.0180",
                "name": ".",
                "english": "dot",
                "list": "CORE",
                "basename": "d",
                "stackEffect": {
                    "html": {
                        " ": "( <em>n</em> -- )"
                    },
                    "plain": {
                        " ": "( n -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>n</em> -- )\n      <p>\n      Display <em>n</em> in free field format.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:digits\">3.2.1.2 Digit conversion</a></strong>,\n      <strong><a href=\"../usage.html#usage:dot\">3.2.1.3 Free-field number display</a></strong>.\n      <p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0180 . -->\n      See <a href=\"../testsuite.html#test:core:EMIT\">F.6.1.1320 EMIT</a>.\n      \n      \n      "
                    }
                }
            },
            "less": {
                "id": "core:less",
                "number": "6.1.0480",
                "name": "<",
                "english": "less-than",
                "list": "CORE",
                "basename": "less",
                "stackEffect": {
                    "html": {
                        " ": "( <em>n<sub>1</sub> n<sub>2</sub></em> -- <em>flag</em> )"
                    },
                    "plain": {
                        " ": "( n1 n2 -- flag )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>n<sub>1</sub> n<sub>2</sub></em> -- <em>flag</em> )\n      <p>\n      <em>flag</em> is true if and only if <em>n<sub>1</sub></em> is less than\n      <em>n<sub>2</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/Uless.html\">6.1.2340 U&lt;</a>.\n      <p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0480 < -->\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>&lt;</strong> -&gt; &lt;TRUE&gt;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;<strong>&lt;</strong> -&gt; &lt;TRUE&gt;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;<strong>&lt;</strong> -&gt; &lt;TRUE&gt;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>&lt;</strong> -&gt; &lt;TRUE&gt;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ MIN-INT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;<strong>&lt;</strong> -&gt; &lt;TRUE&gt;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ MIN-INT&nbsp;MAX-INT&nbsp;<strong>&lt;</strong> -&gt; &lt;TRUE&gt;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;MAX-INT&nbsp;<strong>&lt;</strong> -&gt; &lt;TRUE&gt;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;<strong>&lt;</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>&lt;</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;<strong>&lt;</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>&lt;</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>&lt;</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>&lt;</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;MIN-INT&nbsp;<strong>&lt;</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ MAX-INT&nbsp;MIN-INT&nbsp;<strong>&lt;</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ MAX-INT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;<strong>&lt;</strong> -&gt; &lt;FALSE&gt; }T</span>\n      \n      \n      "
                    }
                }
            },
            "more": {
                "id": "core:more",
                "number": "6.1.0540",
                "name": ">",
                "english": "greater-than",
                "list": "CORE",
                "basename": "more",
                "stackEffect": {
                    "html": {
                        " ": "( <em>n<sub>1</sub> n<sub>2</sub></em> -- <em>flag</em> )"
                    },
                    "plain": {
                        " ": "( n1 n2 -- flag )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>n<sub>1</sub> n<sub>2</sub></em> -- <em>flag</em> )\n      <p>\n      <em>flag</em> is true if and only if <em>n<sub>1</sub></em> is greater than <em>n<sub>2</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/Umore.html\">6.2.2350 U&gt;</a>.\n      <p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0540 > -->\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>&gt;</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;<strong>&gt;</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;<strong>&gt;</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>&gt;</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ MIN-INT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;<strong>&gt;</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ MIN-INT&nbsp;MAX-INT&nbsp;<strong>&gt;</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;MAX-INT&nbsp;<strong>&gt;</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;<strong>&gt;</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>&gt;</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;<strong>&gt;</strong> -&gt; &lt;TRUE&gt;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;<strong>&gt;</strong> -&gt; &lt;TRUE&gt;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>&gt;</strong> -&gt; &lt;TRUE&gt;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;<strong>&gt;</strong> -&gt; &lt;TRUE&gt;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;MIN-INT&nbsp;<strong>&gt;</strong> -&gt; &lt;TRUE&gt;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ MAX-INT&nbsp;MIN-INT&nbsp;<strong>&gt;</strong> -&gt; &lt;TRUE&gt;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ MAX-INT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;<strong>&gt;</strong> -&gt; &lt;TRUE&gt;&nbsp; }T</span>\n      \n      \n      "
                    }
                }
            },
            "ne": {
                "id": "core:ne",
                "number": "6.2.0500",
                "name": "<>",
                "english": "not-equals",
                "list": "CORE EXT",
                "basename": "ne",
                "stackEffect": {
                    "html": {
                        " ": "( <em>x<sub>1</sub> x<sub>2</sub></em> -- <em>flag</em> )"
                    },
                    "plain": {
                        " ": "( x1 x2 -- flag )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>x<sub>1</sub> x<sub>2</sub></em> -- <em>flag</em> )\n      <p>\n      <em>flag</em> is true if and only if <em>x<sub>1</sub></em> is not bit-for-bit\n      the same as <em>x<sub>2</sub></em>.\n      \n      </p>"
                    }
                }
            },
            "num-end": {
                "id": "core:num-end",
                "number": "6.1.0040",
                "name": "#>",
                "english": "number-sign-greater",
                "list": "CORE",
                "basename": "num-end",
                "stackEffect": {
                    "html": {
                        " ": "( <em>xd</em> -- <em>c-addr u</em> )"
                    },
                    "plain": {
                        " ": "( xd -- c-addr u )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>xd</em> -- <em>c-addr u</em> )\n      <p>\n      Drop <em>xd</em>. Make the pictured numeric output string\n      available as a character string. <em>c-addr</em> and <em>u</em>\n      specify the resulting character string. A program may replace\n      characters within the string.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/num.html\">6.1.0030 #</a>,\n      <a href=\"../core/numS.html\">6.1.0050 #S</a>,\n      <a href=\"../core/num-start.html\">6.1.0490 &lt;#</a>.\n      <p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0040 #> -->\n      See <a href=\"../testsuite.html#test:core:num\">F.6.1.0030 #</a>,\n      <a href=\"../testsuite.html#test:core:numS\">F.6.1.0050 #S</a>,\n      <a href=\"../testsuite.html#test:core:HOLD\">F.6.1.1670 HOLD</a> and\n      <a href=\"../testsuite.html#test:core:SIGN\">F.6.1.2210 SIGN</a>.\n      \n      \n      "
                    }
                }
            },
            "num-start": {
                "id": "core:num-start",
                "number": "6.1.0490",
                "name": "<#",
                "english": "less-number-sign",
                "list": "CORE",
                "basename": "num-start",
                "stackEffect": {
                    "html": {
                        " ": "( -- )"
                    },
                    "plain": {
                        " ": "( -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- )\n      <p>\n      Initialize the pictured numeric output conversion process.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/num.html\">6.1.0030 #</a>,\n      <a href=\"../core/num-end.html\">6.1.0040 #&gt;</a>,\n      <a href=\"../core/numS.html\">6.1.0050 #S</a>.\n      <p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0490 <# -->\n      See <a href=\"../testsuite.html#test:core:num\">F.6.1.0030 #</a>,\n      <a href=\"../testsuite.html#test:core:numS\">F.6.1.0050 #S</a>,\n      <a href=\"../testsuite.html#test:core:HOLD\">F.6.1.1670 HOLD</a>,\n      <a href=\"../testsuite.html#test:core:SIGN\">F.6.1.2210 SIGN</a>.\n      \n      \n      "
                    }
                }
            },
            "num": {
                "id": "core:num",
                "number": "6.1.0030",
                "name": "#",
                "english": "number-sign",
                "list": "CORE",
                "basename": "num",
                "stackEffect": {
                    "html": {
                        " ": "( <em>ud<sub>1</sub></em> -- <em>ud<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( ud1 -- ud2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>ud<sub>1</sub></em> -- <em>ud<sub>2</sub></em> )\n      <p>\n      Divide <em>ud<sub>1</sub></em> by the number in <a href=\"../core/BASE.html\">BASE</a> giving the\n      quotient <em>ud<sub>2</sub></em> and the remainder <em>n</em>. (<em>n</em> is\n      the least significant digit of <em>ud<sub>1</sub></em>.) Convert <em>n</em>\n      to external form and add the resulting character to the beginning\n      of the pictured numeric output string. An ambiguous condition\n      exists if <strong>#</strong> executes outside of a \n      <a href=\"../core/num-start.html\">&lt;#</a> <a href=\"../core/num-end.html\">#&gt;</a> delimited number conversion.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/num-end.html\">6.1.0040 #&gt;</a>,\n      <a href=\"../core/numS.html\">6.1.0050 #S</a>,\n      <a href=\"../core/num-start.html\">6.1.0490 &lt;#</a>.\n      <p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0030 # -->\n      <code><a href=\"../core/Colon.html\">:</a> GP3  <a href=\"../core/num-start.html\">&lt;#</a> 1 0 <strong>#</strong> <strong>#</strong> <a href=\"../core/num-end.html\">#&gt;</a> <a href=\"../core/Sq.html\">S\"</a> 01\" S= <a href=\"../core/Semi.html\">;</a></code> <br>\n      <span class=\"tt\">T{ GP3 -&gt; &lt;TRUE&gt; }T</span>\n      \n      \n      "
                    }
                }
            },
            "numS": {
                "id": "core:numS",
                "number": "6.1.0050",
                "name": "#S",
                "english": "number-sign-s",
                "list": "CORE",
                "basename": "numS",
                "stackEffect": {
                    "html": {
                        " ": "( <em>ud<sub>1</sub></em> -- <em>ud<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( ud1 -- ud2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>ud<sub>1</sub></em> -- <em>ud<sub>2</sub></em> )\n      <p>\n      Convert one digit of <em>ud<sub>1</sub></em> according to the rule for\n      <a href=\"../core/num.html\">#</a>. Continue conversion until the quotient is zero.\n      <em>ud<sub>2</sub></em> is zero. An ambiguous condition exists if\n      <strong>#S</strong> executes outside of a <a href=\"../core/num-start.html\">&lt;#</a> <a href=\"../core/num-end.html\">#&gt;</a>\n      delimited number conversion.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/num.html\">6.1.0030 #</a>,\n      <a href=\"../core/num-end.html\">6.1.0040 #&gt;</a>,\n      <a href=\"../core/num-start.html\">6.1.0490 &lt;#</a>.\n      <p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0050 #S -->\n            <div class=\"tt\">\n<code><a href=\"../core/Colon.html\">:</a> GP4  <a href=\"../core/num-start.html\">&lt;#</a> 1 0 <strong>#S</strong> <a href=\"../core/num-end.html\">#&gt;</a> <a href=\"../core/Sq.html\">S\"</a> 1\" S= <a href=\"../core/Semi.html\">;</a></code> <br>\n        <span class=\"tt\">T{ GP4 -&gt; &lt;TRUE&gt; }T</span>\n        <p>\n        <a href=\"../core/Colon.html\">:</a> GP5 <br>\n        &nbsp;&nbsp; <a href=\"../core/BASE.html\">BASE</a> <a href=\"../core/Fetch.html\">@</a> &lt;TRUE&gt; <br>\n        &nbsp;&nbsp; MAX-BASE <a href=\"../core/OnePlus.html\">1+</a> 2 <a href=\"../core/DO.html\">DO</a>\t\t&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> FOR EACH POSSIBLE BASE <br>\n        &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/I.html\">I</a> <a href=\"../core/BASE.html\">BASE</a> <a href=\"../core/Store.html\">!</a>\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> TBD: ASSUMES BASE WORKS <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/I.html\">I</a> 0 <a href=\"../core/num-start.html\">&lt;#</a> <strong>#S</strong> <a href=\"../core/num-end.html\">#&gt;</a> <a href=\"../core/Sq.html\">S\"</a> 10\" S= <a href=\"../core/AND.html\">AND</a> <br>\n        &nbsp;&nbsp;    <a href=\"../core/LOOP.html\">LOOP</a> <br>\n        &nbsp;&nbsp;    <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../core/BASE.html\">BASE</a> <a href=\"../core/Store.html\">!</a> <a href=\"../core/Semi.html\">;</a> <br>\n        <span class=\"tt\">T{ GP5 -&gt; &lt;TRUE&gt; }T</span>\n        </p><p>\n        <a href=\"../core/Colon.html\">:</a> GP6 <br>\n        &nbsp;&nbsp;\t<a href=\"../core/BASE.html\">BASE</a> <a href=\"../core/Fetch.html\">@</a> <a href=\"../core/toR.html\">&gt;R</a>  2 <a href=\"../core/BASE.html\">BASE</a> <a href=\"../core/Store.html\">!</a> <br>\n        &nbsp;&nbsp;\tMAX-UINT MAX-UINT <a href=\"../core/num-start.html\">&lt;#</a> <strong>#S</strong> <a href=\"../core/num-end.html\">#&gt;</a>\t&nbsp;&nbsp;\t\t<a href=\"../core/bs.html\">\\</a> MAXIMUM UD TO BINARY <br>\n        &nbsp;&nbsp;\t<a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/BASE.html\">BASE</a> <a href=\"../core/Store.html\">!</a>\t\t\t\t\t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t<a href=\"../core/bs.html\">\\</a> S: C-ADDR U <br>\n        &nbsp;&nbsp;\t<a href=\"../core/DUP.html\">DUP</a> #BITS-UD <a href=\"../core/Equal.html\">=</a> <a href=\"../core/SWAP.html\">SWAP</a> <br>\n        &nbsp;&nbsp;\t0 <a href=\"../core/DO.html\">DO</a>\t\t\t\t\t\t\t\t\t\t\t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t<a href=\"../core/bs.html\">\\</a> S: C-ADDR FLAG <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;\t\t<a href=\"../core/OVER.html\">OVER</a> <a href=\"../core/CFetch.html\">C@</a> <a href=\"../core/BracketCHAR.html\">[CHAR]</a> 1 <a href=\"../core/Equal.html\">=</a> <a href=\"../core/AND.html\">AND</a>\t&nbsp;&nbsp;&nbsp;\t<a href=\"../core/bs.html\">\\</a> ALL ONES <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;\t\t<a href=\"../core/toR.html\">&gt;R</a> <a href=\"../core/CHARPlus.html\">CHAR+</a> <a href=\"../core/Rfrom.html\">R&gt;</a> <br>\n        &nbsp;&nbsp;\t<a href=\"../core/LOOP.html\">LOOP</a> <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../core/DROP.html\">DROP</a> <a href=\"../core/Semi.html\">;</a> <br>\n        <span class=\"tt\">T{ GP6 -&gt; &lt;TRUE&gt; }T</span>\n        </p><p>\n        <a href=\"../core/Colon.html\">:</a> GP7 <br>\n        &nbsp;&nbsp;\t<a href=\"../core/BASE.html\">BASE</a> <a href=\"../core/Fetch.html\">@</a> <a href=\"../core/toR.html\">&gt;R</a>\t\tMAX-BASE <a href=\"../core/BASE.html\">BASE</a> <a href=\"../core/Store.html\">!</a> <br>\n        &nbsp;&nbsp;\t&lt;TRUE&gt; <br>\n        &nbsp;&nbsp;\tA 0 <a href=\"../core/DO.html\">DO</a> <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;\t\t<a href=\"../core/I.html\">I</a> 0 <a href=\"../core/num-start.html\">&lt;#</a> <strong>#S</strong> <a href=\"../core/num-end.html\">#&gt;</a> <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;\t\t1 <a href=\"../core/Equal.html\">=</a> <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../core/CFetch.html\">C@</a> <a href=\"../core/I.html\">I</a> 30 <a href=\"../core/Plus.html\">+</a> <a href=\"../core/Equal.html\">=</a> <a href=\"../core/AND.html\">AND</a> <a href=\"../core/AND.html\">AND</a> <br>\n        &nbsp;&nbsp;\t<a href=\"../core/LOOP.html\">LOOP</a> <br>\n        &nbsp;&nbsp;\tMAX-BASE A <a href=\"../core/DO.html\">DO</a> <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;\t\t<a href=\"../core/I.html\">I</a> 0 <a href=\"../core/num-start.html\">&lt;#</a> <strong>#S</strong> <a href=\"../core/num-end.html\">#&gt;</a> <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;\t\t1 <a href=\"../core/Equal.html\">=</a> <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../core/CFetch.html\">C@</a> 41 <a href=\"../core/I.html\">I</a> A <a href=\"../core/Minus.html\">-</a> <a href=\"../core/Plus.html\">+</a> <a href=\"../core/Equal.html\">=</a> <a href=\"../core/AND.html\">AND</a> <a href=\"../core/AND.html\">AND</a> <br>\n        &nbsp;&nbsp;\t<a href=\"../core/LOOP.html\">LOOP</a> <br>\n        &nbsp;&nbsp;\t<a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/BASE.html\">BASE</a> <a href=\"../core/Store.html\">!</a> <a href=\"../core/Semi.html\">;</a> <br>\n        <span class=\"tt\">T{ GP7 -&gt; &lt;TRUE&gt; }T</span>\n        \n        \n        </p></div>\n      "
                    }
                }
            },
            "p": {
                "id": "core:p",
                "number": "6.1.0080",
                "name": "(",
                "english": "paren",
                "list": "CORE",
                "basename": "p",
                "stackEffect": {
                    "html": {
                        "Execution:": "( <em>\"ccc&lt;paren&gt;\"</em> -- )"
                    },
                    "plain": {
                        "Execution:": "( \"ccc<paren>\" -- )"
                    }
                },
                "sections": {
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      Perform the execution semantics given below.\n      <p>\n        \n      </p>"
                    },
                    "Execution:": {
                        "name": "Execution:",
                        "html": "\n\n\n      ( <em>\"ccc&lt;paren&gt;\"</em> -- )\n      <p>\n      Parse <em>ccc</em> delimited by <code>)</code>\n      (right parenthesis).\n      <strong>(</strong> is an immediate word.\n      </p><p>\n      The number of characters in <em>ccc</em> may be zero to the\n      number of characters in the parse area.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:parsing\">3.4.1 Parsing</a></strong>,\n      <strong><a href=\"../file/p.html\">11.6.1.0080 (</a></strong>,\n      <a href=\"../rationale.html#rat:core:p\">A.6.1.0080 (</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.1.0080 ( -->\n      Typical use: ... <strong>(</strong> <em>ccc</em><code>)</code> ...\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">There is no space either side of the ).</span><br>\n      \n      <span class=\"tt\">T{ <strong>(</strong>&nbsp;A&nbsp;comment)1234 -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;pc1&nbsp;<strong>(</strong>&nbsp;A&nbsp;comment)1234&nbsp;<a href=\"../core/Semi.html\">;</a>&nbsp;pc1 -&gt; 1234 }T</span>\n      \n      \n      "
                    }
                }
            },
            "qDO": {
                "id": "core:qDO",
                "number": "6.2.0620",
                "name": "?DO",
                "english": "question-do",
                "list": "CORE EXT",
                "basename": "qDO",
                "stackEffect": {
                    "html": {
                        "Compilation:": "( C: -- <em>do-sys</em> )",
                        "Run-time:": "( <em>n<sub>1</sub> | u<sub>1</sub> n<sub>2</sub> | u<sub>2</sub></em> -- )\n      ( R: -- <em>loop-sys</em> )"
                    },
                    "plain": {
                        "Compilation:": "( C: -- do-sys )",
                        "Run-time:": "( n1 | u1 n2 | u2 -- )\n( R: -- loop-sys )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      ( C: -- <em>do-sys</em> )\n      <p>\n      Put <em>do-sys</em> onto the control-flow stack. Append the\n      run-time semantics given below to the current definition. The\n      semantics are incomplete until resolved by a consumer of\n      <em>do-sys</em> such as <a href=\"../core/LOOP.html\">LOOP</a>.\n      </p><p>\n        \n      </p>"
                    },
                    "Run-time:": {
                        "name": "Run-time:",
                        "html": "\n\n\n      ( <em>n<sub>1</sub> | u<sub>1</sub> n<sub>2</sub> | u<sub>2</sub></em> -- )\n      ( R: -- <em>loop-sys</em> )\n      <p>\n      If <em>n<sub>1</sub> | u<sub>1</sub></em> is equal to <em>n<sub>2</sub> | u<sub>2</sub></em>, continue\n      execution at the location given by the consumer of\n      <em>do-sys</em>. Otherwise set up loop control parameters with\n      index <em>n<sub>2</sub> | u<sub>2</sub></em> and limit <em>n<sub>1</sub> | u<sub>1</sub></em> and continue\n      executing immediately following <strong>?DO</strong>. Anything already\n      on the return stack becomes unavailable until the loop\n      control parameters are discarded. An ambiguous condition\n      exists if <em>n<sub>1</sub> | u<sub>1</sub></em> and <em>n<sub>2</sub> | u<sub>2</sub></em> are not both of\n      the same type.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:controlstack\">3.2.3.2 Control-flow stack</a></strong>,\n      <a href=\"../core/PlusLOOP.html\">6.1.0140 +LOOP</a>,\n      <a href=\"../core/DO.html\">6.1.1240 DO</a>,\n      <a href=\"../core/I.html\">6.1.1680 I</a>, <br>\n      <a href=\"../core/LEAVE.html\">6.1.1760 LEAVE</a>,\n      <a href=\"../core/LOOP.html\">6.1.1800 LOOP</a>,\n      <a href=\"../core/UNLOOP.html\">6.1.2380 UNLOOP</a>,\n      <a href=\"../rationale.html#rat:core:qDO\">A.6.2.0620 ?DO</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.2.0620 ?DO -->\n      Typical use:\n      <p>\n      &nbsp;&nbsp; <a href=\"../core/Colon.html\">:</a> <code>X</code> ... <strong>?DO</strong> ... <a href=\"../core/LOOP.html\">LOOP</a> ... <a href=\"../core/Semi.html\">;</a>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n      <div class=\"tt\">\n<a href=\"../core/DECIMAL.html\">DECIMAL</a>\n        <p>\n        <a href=\"../core/Colon.html\">:</a> qd <strong>?DO</strong> <a href=\"../core/I.html\">I</a> <a href=\"../core/LOOP.html\">LOOP</a> <a href=\"../core/Semi.html\">;</a> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;789&nbsp;&nbsp;&nbsp;789&nbsp;qd -&gt;  }T</span> <br>\n        <span class=\"tt\">T{ -9876&nbsp;-9876&nbsp;qd -&gt;  }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;qd -&gt; 0&nbsp;1&nbsp;2&nbsp;3&nbsp;4 }T</span>\n        </p><p>\n        <a href=\"../core/Colon.html\">:</a> qd1 <strong>?DO</strong> <a href=\"../core/I.html\">I</a> 10 <a href=\"../core/PlusLOOP.html\">+LOOP</a> <a href=\"../core/Semi.html\">;</a> <br>\n        <span class=\"tt\">T{ 50&nbsp;1&nbsp;qd1 -&gt; 1&nbsp;11&nbsp;21&nbsp;31&nbsp;41 }T</span> <br>\n        <span class=\"tt\">T{ 50&nbsp;0&nbsp;qd1 -&gt; 0&nbsp;10&nbsp;20&nbsp;30&nbsp;40 }T</span>\n        </p><p>\n        <a href=\"../core/Colon.html\">:</a> qd2 <strong>?DO</strong> <a href=\"../core/I.html\">I</a> 3 <a href=\"../core/more.html\">&gt;</a> <a href=\"../core/IF.html\">IF</a> <a href=\"../core/LEAVE.html\">LEAVE</a> <a href=\"../core/ELSE.html\">ELSE</a> <a href=\"../core/I.html\">I</a> <a href=\"../core/THEN.html\">THEN</a> <a href=\"../core/LOOP.html\">LOOP</a> <a href=\"../core/Semi.html\">;</a> <br>\n        <span class=\"tt\">T{ 5&nbsp;-1&nbsp;qd2 -&gt; -1&nbsp;0&nbsp;1&nbsp;2&nbsp;3 }T</span>\n        </p><p>\n        <a href=\"../core/Colon.html\">:</a> qd3 <strong>?DO</strong> <a href=\"../core/I.html\">I</a> 1 <a href=\"../core/PlusLOOP.html\">+LOOP</a> <a href=\"../core/Semi.html\">;</a> <br>\n        <span class=\"tt\">T{ 4&nbsp;&nbsp;4&nbsp;qd3 -&gt;  }T</span> <br>\n        <span class=\"tt\">T{ 4&nbsp;&nbsp;1&nbsp;qd3 -&gt; &nbsp;1&nbsp;2&nbsp;3 }T</span> <br>\n        <span class=\"tt\">T{ 2&nbsp;-1&nbsp;qd3 -&gt; -1&nbsp;0&nbsp;1 }T</span>\n        </p><p>\n        <a href=\"../core/Colon.html\">:</a> qd4 <strong>?DO</strong> <a href=\"../core/I.html\">I</a> -1 <a href=\"../core/PlusLOOP.html\">+LOOP</a> <a href=\"../core/Semi.html\">;</a> <br>\n        <span class=\"tt\">T{ &nbsp;4&nbsp;4&nbsp;qd4 -&gt;  }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;1&nbsp;4&nbsp;qd4 -&gt; 4&nbsp;3&nbsp;2&nbsp;&nbsp;1 }T</span> <br>\n        <span class=\"tt\">T{ -1&nbsp;2&nbsp;qd4 -&gt; 2&nbsp;1&nbsp;0&nbsp;-1 }T</span>\n        </p><p>\n        <a href=\"../core/Colon.html\">:</a> qd5 <strong>?DO</strong> <a href=\"../core/I.html\">I</a> -10 <a href=\"../core/PlusLOOP.html\">+LOOP</a> <a href=\"../core/Semi.html\">;</a> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;1&nbsp;50&nbsp;qd5 -&gt; 50&nbsp;40&nbsp;30&nbsp;20&nbsp;10&nbsp;&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;0&nbsp;50&nbsp;qd5 -&gt; 50&nbsp;40&nbsp;30&nbsp;20&nbsp;10&nbsp;0 }T</span> <br>\n        <span class=\"tt\">T{ -25&nbsp;10&nbsp;qd5 -&gt; 10&nbsp;0&nbsp;-10&nbsp;-20&nbsp;&nbsp;&nbsp;&nbsp; }T</span>\n        </p><p>\n        <a href=\"../core/VARIABLE.html\">VARIABLE</a> qditerations <br>\n        <a href=\"../core/VARIABLE.html\">VARIABLE</a> qdincrement\n        </p><p>\n        <a href=\"../core/Colon.html\">:</a> qd6 <a href=\"../core/p.html\">(</a> limit start increment -- )\n        &nbsp;&nbsp; qdincrement <a href=\"../core/Store.html\">!</a> <br>\n        &nbsp;&nbsp; 0 qditerations <a href=\"../core/Store.html\">!</a> <br>\n        &nbsp;&nbsp; <strong>?DO</strong> <br>\n        &nbsp;&nbsp;&nbsp;&nbsp; 1 qditerations <a href=\"../core/PlusStore.html\">+!</a> <br>\n        &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/I.html\">I</a> <br>\n        &nbsp;&nbsp;&nbsp;&nbsp; qditerations <a href=\"../core/Fetch.html\">@</a>  6 <a href=\"../core/Equal.html\">=</a> <a href=\"../core/IF.html\">IF</a> <a href=\"../core/LEAVE.html\">LEAVE</a> <a href=\"../core/THEN.html\">THEN</a> <br>\n        &nbsp;&nbsp;&nbsp;&nbsp; qdincrement <a href=\"../core/Fetch.html\">@</a> <br>\n        &nbsp;&nbsp; <a href=\"../core/PlusLOOP.html\">+LOOP</a> qditerations <a href=\"../core/Fetch.html\">@</a> <br>\n        <a href=\"../core/Semi.html\">;</a>\n        </p><p>\n        <span class=\"tt\">T{ &nbsp;4&nbsp;&nbsp;4&nbsp;-1&nbsp;qd6 -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;1&nbsp;&nbsp;4&nbsp;-1&nbsp;qd6 -&gt; &nbsp;4&nbsp;&nbsp;3&nbsp;&nbsp;2&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;4&nbsp;&nbsp;1&nbsp;-1&nbsp;qd6 -&gt; &nbsp;1&nbsp;&nbsp;0&nbsp;-1&nbsp;-2&nbsp;-3&nbsp;-4&nbsp;6&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;4&nbsp;&nbsp;1&nbsp;&nbsp;0&nbsp;qd6 -&gt; &nbsp;1&nbsp;&nbsp;1&nbsp;&nbsp;1&nbsp;&nbsp;1&nbsp;&nbsp;1&nbsp;&nbsp;1&nbsp;6&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;0&nbsp;&nbsp;0&nbsp;&nbsp;0&nbsp;qd6 -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;1&nbsp;&nbsp;4&nbsp;&nbsp;0&nbsp;qd6 -&gt; &nbsp;4&nbsp;&nbsp;4&nbsp;&nbsp;4&nbsp;&nbsp;4&nbsp;&nbsp;4&nbsp;&nbsp;4&nbsp;6&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;1&nbsp;&nbsp;4&nbsp;&nbsp;1&nbsp;qd6 -&gt; &nbsp;4&nbsp;&nbsp;5&nbsp;&nbsp;6&nbsp;&nbsp;7&nbsp;&nbsp;8&nbsp;&nbsp;9&nbsp;6&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;4&nbsp;&nbsp;1&nbsp;&nbsp;1&nbsp;qd6 -&gt; &nbsp;1&nbsp;&nbsp;2&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;4&nbsp;&nbsp;4&nbsp;&nbsp;1&nbsp;qd6 -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;2&nbsp;-1&nbsp;-1&nbsp;qd6 -&gt; -1&nbsp;-2&nbsp;-3&nbsp;-4&nbsp;-5&nbsp;-6&nbsp;6&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ -1&nbsp;&nbsp;2&nbsp;-1&nbsp;qd6 -&gt; &nbsp;2&nbsp;&nbsp;1&nbsp;&nbsp;0&nbsp;-1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;2&nbsp;-1&nbsp;&nbsp;0&nbsp;qd6 -&gt; -1&nbsp;-1&nbsp;-1&nbsp;-1&nbsp;-1&nbsp;-1&nbsp;6&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ -1&nbsp;&nbsp;2&nbsp;&nbsp;0&nbsp;qd6 -&gt; &nbsp;2&nbsp;&nbsp;2&nbsp;&nbsp;2&nbsp;&nbsp;2&nbsp;&nbsp;2&nbsp;&nbsp;2&nbsp;6&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ -1&nbsp;&nbsp;2&nbsp;&nbsp;1&nbsp;qd6 -&gt; &nbsp;2&nbsp;&nbsp;3&nbsp;&nbsp;4&nbsp;&nbsp;5&nbsp;&nbsp;6&nbsp;&nbsp;7&nbsp;6&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;2&nbsp;-1&nbsp;&nbsp;1&nbsp;qd6 -&gt; -1&nbsp;&nbsp;0&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp; }T</span>\n        \n        \n        </p></div>\n      "
                    }
                }
            },
            "qDUP": {
                "id": "core:qDUP",
                "number": "6.1.0630",
                "name": "?DUP",
                "english": "question-dupe",
                "list": "CORE",
                "basename": "qDUP",
                "stackEffect": {
                    "html": {
                        " ": "( <em>x</em> -- <em>0  |  x x</em> )"
                    },
                    "plain": {
                        " ": "( x -- 0  |  x x )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>x</em> -- <em>0  |  x x</em> )\n      <p>\n      Duplicate <em>x</em> if it is non-zero.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0630 ?DUP -->\n      <span class=\"tt\">T{ -1&nbsp;<strong>?DUP</strong> -&gt; -1&nbsp;-1 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;0&nbsp;<strong>?DUP</strong> -&gt; &nbsp;0&nbsp;&nbsp;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;1&nbsp;<strong>?DUP</strong> -&gt; &nbsp;1&nbsp;&nbsp;1 }T</span>\n      \n      \n      "
                    }
                }
            },
            "toBODY": {
                "id": "core:toBODY",
                "number": "6.1.0550",
                "name": ">BODY",
                "english": "to-body",
                "list": "CORE",
                "basename": "toBODY",
                "stackEffect": {
                    "html": {
                        " ": "( <em>xt</em> -- <em>a-addr</em> )"
                    },
                    "plain": {
                        " ": "( xt -- a-addr )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>xt</em> -- <em>a-addr</em> )\n      <p>\n      <em>a-addr</em> is the data-field address corresponding to\n      <em>xt</em>. An ambiguous condition exists if <em>xt</em> is not\n      for a word defined via <a href=\"../core/CREATE.html\">CREATE</a>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:dataspace\">3.3.3 Data space</a></strong>,\n      <a href=\"../rationale.html#rat:core:toBODY\">A.6.1.0550 &gt;BODY</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.1.0550 >BODY -->\n      <em>a-addr</em> is the address that <a href=\"../core/HERE.html\">HERE</a> would have\n      returned had it been executed immediately after the execution\n      of the <a href=\"../core/CREATE.html\">CREATE</a> that defined <em>xt</em>.\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0550 >BODY -->\n      <span class=\"tt\">T{ &nbsp;<a href=\"../core/CREATE.html\">CREATE</a>&nbsp;CR0 -&gt; &nbsp;&nbsp;&nbsp;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ <a href=\"../core/Tick.html\">'</a>&nbsp;CR0&nbsp;<strong>&gt;BODY</strong> -&gt; <a href=\"../core/HERE.html\">HERE</a> }T</span>\n      \n      \n      "
                    }
                }
            },
            "toIN": {
                "id": "core:toIN",
                "number": "6.1.0560",
                "name": ">IN",
                "english": "to-in",
                "list": "CORE",
                "basename": "toIN",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>a-addr</em> )"
                    },
                    "plain": {
                        " ": "( -- a-addr )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>a-addr</em> )\n      <p>\n      <em>a-addr</em> is the address of a cell containing the offset in\n      characters from the start of the input buffer to the start of\n      the parse area.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0560 >IN -->\n            <div class=\"tt\">\n<a href=\"../core/VARIABLE.html\">VARIABLE</a> SCANS <br>\n        <a href=\"../core/Colon.html\">:</a> RESCAN?  -1 SCANS <a href=\"../core/PlusStore.html\">+!</a> SCANS <a href=\"../core/Fetch.html\">@</a> <a href=\"../core/IF.html\">IF</a> 0 <strong>&gt;IN</strong> <a href=\"../core/Store.html\">!</a> <a href=\"../core/THEN.html\">THEN</a> <a href=\"../core/Semi.html\">;</a>\n        <p>\n        <span class=\"tt\">T{ &nbsp;&nbsp;2&nbsp;SCANS&nbsp;<a href=\"../core/Store.html\">!</a>&nbsp;<br>\n        \n        345&nbsp;RESCAN?&nbsp;<br>\n         -&gt; 345&nbsp;345 }T</span>\n        </p><p>\n        <a href=\"../core/Colon.html\">:</a> GS2  5 SCANS <a href=\"../core/Store.html\">!</a> <a href=\"../core/Sq.html\">S\"</a> 123 RESCAN?\" <a href=\"../core/EVALUATE.html\">EVALUATE</a> <a href=\"../core/Semi.html\">;</a> <br>\n        <span class=\"tt\">T{ GS2 -&gt; 123&nbsp;123&nbsp;123&nbsp;123&nbsp;123 }T</span>\n        </p><p>\n        <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">These tests must start on a new line</span> <br>\n        <a href=\"../core/DECIMAL.html\">DECIMAL</a> <br>\n        T{ 123456 <a href=\"../core/DEPTH.html\">DEPTH</a> <a href=\"../core/OVER.html\">OVER</a> 9 <a href=\"../core/less.html\">&lt;</a> 35 <a href=\"../core/AND.html\">AND</a> <a href=\"../core/Plus.html\">+</a> 3 <a href=\"../core/Plus.html\">+</a> <strong>&gt;IN</strong> <a href=\"../core/Store.html\">!</a> <br>\n        -&gt; 123456 23456 3456 456 56 6 }T <br>\n        T{ 14145 8115 <a href=\"../core/qDUP.html\">?DUP</a> <a href=\"../core/ZeroEqual.html\">0=</a> 34 <a href=\"../core/AND.html\">AND</a> <strong>&gt;IN</strong> <a href=\"../core/PlusStore.html\">+!</a> <a href=\"../core/TUCK.html\">TUCK</a> <a href=\"../core/MOD.html\">MOD</a> 14 <strong>&gt;IN</strong> <a href=\"../core/Store.html\">!</a> GCD calculation <br>\n        -&gt; 15 }T\n        \n        \n        </p></div>\n      "
                    }
                }
            },
            "toNUMBER": {
                "id": "core:toNUMBER",
                "number": "6.1.0570",
                "name": ">NUMBER",
                "english": "to-number",
                "list": "CORE",
                "basename": "toNUMBER",
                "stackEffect": {
                    "html": {
                        " ": "( <em>ud<sub>1</sub> c-addr<sub>1</sub> u<sub>1</sub></em> -- <em>ud<sub>2</sub> c-addr<sub>2</sub> u<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( ud1 c-addr1 u1 -- ud2 c-addr2 u2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>ud<sub>1</sub> c-addr<sub>1</sub> u<sub>1</sub></em> -- <em>ud<sub>2</sub> c-addr<sub>2</sub> u<sub>2</sub></em> )\n      <p>\n      <em>ud<sub>2</sub></em> is the unsigned result of converting the characters\n      within the string specified by <em>c-addr<sub>1</sub> u<sub>1</sub></em> into digits,\n      using the number in <a href=\"../core/BASE.html\">BASE</a>, and adding each into <em>ud<sub>1</sub></em>\n      after multiplying <em>ud<sub>1</sub></em> by the number in <a href=\"../core/BASE.html\">BASE</a>.\n      Conversion continues left-to-right until a character that is not\n      convertible, including any \"+\" or \"-\", is encountered or the\n      string is entirely converted.\n      <em>c-addr<sub>2</sub></em> is the location of the first unconverted character\n      or the first character past the end of the string if the string was\n      entirely converted. <em>u<sub>2</sub></em> is the number of unconverted\n      characters in the string. An ambiguous condition exists if\n      <em>ud<sub>2</sub></em> overflows during the conversion.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:digits\">3.2.1.2 Digit conversion</a></strong>.\n      <p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0570 >NUMBER -->\n            <div class=\"tt\">\n<a href=\"../core/CREATE.html\">CREATE</a> GN-BUF 0 <a href=\"../core/CComma.html\">C,</a> <br>\n        <a href=\"../core/Colon.html\">:</a> GN-STRING\t GN-BUF 1 <a href=\"../core/Semi.html\">;</a> <br>\n        <a href=\"../core/Colon.html\">:</a> GN-CONSUMED GN-BUF <a href=\"../core/CHARPlus.html\">CHAR+</a> 0 <a href=\"../core/Semi.html\">;</a> <br>\n        <a href=\"../core/Colon.html\">:</a> GN'\t\t <a href=\"../core/BracketCHAR.html\">[CHAR]</a> ' <a href=\"../core/WORD.html\">WORD</a> <a href=\"../core/CHARPlus.html\">CHAR+</a> <a href=\"../core/CFetch.html\">C@</a> GN-BUF <a href=\"../core/CStore.html\">C!</a>  GN-STRING <a href=\"../core/Semi.html\">;</a>\n        <p>\n        <span class=\"tt\">T{ 0&nbsp;0&nbsp;GN'&nbsp;0'&nbsp;<strong>&gt;NUMBER</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;0&nbsp;GN-CONSUMED }T</span> <br>\n        <span class=\"tt\">T{ 0&nbsp;0&nbsp;GN'&nbsp;1'&nbsp;<strong>&gt;NUMBER</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;0&nbsp;GN-CONSUMED }T</span> <br>\n        <span class=\"tt\">T{ 1&nbsp;0&nbsp;GN'&nbsp;1'&nbsp;<strong>&gt;NUMBER</strong> -&gt; BASE&nbsp;@&nbsp;1+&nbsp;0&nbsp;GN-CONSUMED }T</span> <br>\n        <a href=\"../core/bs.html\">\\</a> FOLLOWING SHOULD FAIL TO CONVERT <br>\n        <span class=\"tt\">T{ 0&nbsp;0&nbsp;GN'&nbsp;-'&nbsp;<strong>&gt;NUMBER</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;0&nbsp;GN-STRING&nbsp;&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ 0&nbsp;0&nbsp;GN'&nbsp;+'&nbsp;<strong>&gt;NUMBER</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;0&nbsp;GN-STRING&nbsp;&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ 0&nbsp;0&nbsp;GN'&nbsp;.'&nbsp;<strong>&gt;NUMBER</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;0&nbsp;GN-STRING&nbsp;&nbsp; }T</span>\n        </p><p>\n        <a href=\"../core/Colon.html\">:</a> &gt;NUMBER-BASED <br>\n        &nbsp;&nbsp; <a href=\"../core/BASE.html\">BASE</a> <a href=\"../core/Fetch.html\">@</a> <a href=\"../core/toR.html\">&gt;R</a> <a href=\"../core/BASE.html\">BASE</a> <a href=\"../core/Store.html\">!</a> <strong>&gt;NUMBER</strong> <a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/BASE.html\">BASE</a> <a href=\"../core/Store.html\">!</a> <a href=\"../core/Semi.html\">;</a>\n        </p><p>\n        <span class=\"tt\">T{ 0&nbsp;0&nbsp;GN'&nbsp;2'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10&nbsp;&gt;NUMBER-BASED -&gt; &nbsp;2&nbsp;0&nbsp;GN-CONSUMED }T</span> <br>\n        <span class=\"tt\">T{ 0&nbsp;0&nbsp;GN'&nbsp;2'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&gt;NUMBER-BASED -&gt; &nbsp;0&nbsp;0&nbsp;GN-STRING&nbsp;&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ 0&nbsp;0&nbsp;GN'&nbsp;F'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10&nbsp;&gt;NUMBER-BASED -&gt; &nbsp;F&nbsp;0&nbsp;GN-CONSUMED }T</span> <br>\n        <span class=\"tt\">T{ 0&nbsp;0&nbsp;GN'&nbsp;G'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10&nbsp;&gt;NUMBER-BASED -&gt; &nbsp;0&nbsp;0&nbsp;GN-STRING&nbsp;&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ 0&nbsp;0&nbsp;GN'&nbsp;G'&nbsp;MAX-BASE&nbsp;&gt;NUMBER-BASED -&gt; 10&nbsp;0&nbsp;GN-CONSUMED }T</span> <br>\n        <span class=\"tt\">T{ 0&nbsp;0&nbsp;GN'&nbsp;Z'&nbsp;MAX-BASE&nbsp;&gt;NUMBER-BASED -&gt; 23&nbsp;0&nbsp;GN-CONSUMED }T</span>\n        </p><p>\n        <a href=\"../core/Colon.html\">:</a> GN1 <a href=\"../core/p.html\">(</a> UD BASE -- UD' LEN ) <br>\n        &nbsp;&nbsp;\t<a href=\"../core/bs.html\">\\</a> UD SHOULD EQUAL UD' AND LEN SHOULD BE ZERO. <br>\n        &nbsp;&nbsp;\t<a href=\"../core/BASE.html\">BASE</a> <a href=\"../core/Fetch.html\">@</a> <a href=\"../core/toR.html\">&gt;R</a> <a href=\"../core/BASE.html\">BASE</a> <a href=\"../core/Store.html\">!</a> <br>\n        &nbsp;&nbsp;\t<a href=\"../core/num-start.html\">&lt;#</a> <a href=\"../core/numS.html\">#S</a> <a href=\"../core/num-end.html\">#&gt;</a> <br>\n        &nbsp;&nbsp;\t0 0 <a href=\"../core/TwoSWAP.html\">2SWAP</a> <strong>&gt;NUMBER</strong> <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../core/DROP.html\">DROP</a> &nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> RETURN LENGTH ONLY <br>\n        &nbsp;&nbsp;\t<a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/BASE.html\">BASE</a> <a href=\"../core/Store.html\">!</a> <a href=\"../core/Semi.html\">;</a>\n        </p><p>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;GN1 -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;0&nbsp;0 }T</span> <br>\n        <span class=\"tt\">T{ MAX-UINT&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;GN1 -&gt; MAX-UINT&nbsp;&nbsp;&nbsp;0&nbsp;0 }T</span> <br>\n        <span class=\"tt\">T{ MAX-UINT&nbsp;DUP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;GN1 -&gt; MAX-UINT&nbsp;DUP&nbsp;0 }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;0&nbsp;MAX-BASE&nbsp;GN1 -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;0&nbsp;0 }T</span> <br>\n        <span class=\"tt\">T{ MAX-UINT&nbsp;&nbsp;&nbsp;0&nbsp;MAX-BASE&nbsp;GN1 -&gt; MAX-UINT&nbsp;&nbsp;&nbsp;0&nbsp;0 }T</span> <br>\n        <span class=\"tt\">T{ MAX-UINT&nbsp;DUP&nbsp;MAX-BASE&nbsp;GN1 -&gt; MAX-UINT&nbsp;DUP&nbsp;0 }T</span>\n        \n        \n        </p></div>\n      "
                    }
                }
            },
            "toR": {
                "id": "core:toR",
                "number": "6.1.0580",
                "name": ">R",
                "english": "to-r",
                "list": "CORE",
                "basename": "toR",
                "stackEffect": {
                    "html": {
                        "Execution:": "( <em>x</em> -- )\n      ( R: -- <em>x</em> )"
                    },
                    "plain": {
                        "Execution:": "( x -- )\n( R: -- x )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Execution:": {
                        "name": "Execution:",
                        "html": "\n\n\n      ( <em>x</em> -- )\n      ( R: -- <em>x</em> )\n      <p>\n      Move <em>x</em> to the return stack.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:returnstack\">3.2.3.3 Return stack</a></strong>,\n      <a href=\"../core/Rfrom.html\">6.1.2060 R&gt;</a>,\n      <a href=\"../core/RFetch.html\">6.1.2070 R@</a>,\n      <a href=\"../core/TwotoR.html\">6.2.0340 2&gt;R</a>,\n      <a href=\"../core/TwoRfrom.html\">6.2.0410 2R&gt;</a>,\n      <a href=\"../core/TwoRFetch.html\">6.2.0415 2R@</a>.\n      <p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0580 >R -->\n      <span class=\"tt\">T{ :&nbsp;GR1&nbsp;<strong>&gt;R</strong>&nbsp;<a href=\"../core/Rfrom.html\">R&gt;</a>&nbsp;; -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ :&nbsp;GR2&nbsp;<strong>&gt;R</strong>&nbsp;<a href=\"../core/RFetch.html\">R@</a>&nbsp;<a href=\"../core/Rfrom.html\">R&gt;</a>&nbsp;<a href=\"../core/DROP.html\">DROP</a>&nbsp;; -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ 123&nbsp;GR1 -&gt; 123 }T</span> <br>\n      <span class=\"tt\">T{ 123&nbsp;GR2 -&gt; 123 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;1S&nbsp;GR1 -&gt; &nbsp;1S }T</span> &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/p.html\">(</a> <span class=\"rm\">Return stack holds cells</span> )\n      \n      \n      "
                    }
                }
            }
        }
    },
    "double": {
        "name": "double",
        "words": {
            "DABS": {
                "id": "double:DABS",
                "number": "8.6.1.1160",
                "name": "DABS",
                "english": "d-abs",
                "list": "DOUBLE",
                "basename": "DABS",
                "stackEffect": {
                    "html": {
                        " ": "( <em>d</em> -- <em>ud</em> )"
                    },
                    "plain": {
                        " ": "( d -- ud )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>d</em> -- <em>ud</em> )\n      <p>\n      <em>ud</em> is the absolute value of <em>d</em>.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;<strong>DABS</strong> -&gt; 1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1.&nbsp;<strong>DABS</strong> -&gt; 1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ MAX-2INT&nbsp;<strong>DABS</strong> -&gt; MAX-2INT }T</span> <br>\n      <span class=\"tt\">T{ MIN-2INT&nbsp;1.&nbsp;<a href=\"../double/DPlus.html\">D+</a>&nbsp;<strong>DABS</strong> -&gt; MAX-2INT }T</span>\n      \n      \n      "
                    }
                }
            },
            "DDotR": {
                "id": "double:D.R",
                "number": "8.6.1.1070",
                "name": "D.R",
                "english": "d-dot-r",
                "list": "DOUBLE",
                "basename": "DDotR",
                "stackEffect": {
                    "html": {
                        " ": "( <em>d n</em> -- )"
                    },
                    "plain": {
                        " ": "( d n -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>d n</em> -- )\n      <p>\n      Display <em>d</em> right aligned in a field <em>n</em> characters\n      wide. If the number of characters required to display <em>d</em>\n      is greater than <em>n</em>, all digits are displayed with no\n      leading spaces in a field as wide as necessary.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../rationale.html#rat:double:D.R\">A.8.6.1.1070 D.R</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.8.6.1.1070 D.R -->\n      In <strong>D.R</strong>, the \"R\" is short for RIGHT.\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n      <div class=\"tt\">\n\n        MAX-2INT 71 73 <a href=\"../double/MTimesDiv.html\">M*/</a> <a href=\"../double/TwoCONSTANT.html\">2CONSTANT</a> dbl1 <br>\n        MIN-2INT 73 79 <a href=\"../double/MTimesDiv.html\">M*/</a> <a href=\"../double/TwoCONSTANT.html\">2CONSTANT</a> dbl2\n        <p>\n        <a href=\"../core/Colon.html\">:</a> d&gt;ascii  <a href=\"../core/p.html\">(</a> d -- caddr u ) <br>\n        &nbsp;&nbsp; <a href=\"../core/DUP.html\">DUP</a> <a href=\"../core/toR.html\">&gt;R</a> <a href=\"../core/num-start.html\">&lt;#</a> <a href=\"../double/DABS.html\">DABS</a> <a href=\"../core/numS.html\">#S</a> <a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/SIGN.html\">SIGN</a> <a href=\"../core/num-end.html\">#&gt;</a> &nbsp;&nbsp; <a href=\"../core/p.html\">(</a> -- caddr1 u ) <br>\n        &nbsp;&nbsp; <a href=\"../core/HERE.html\">HERE</a> <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../core/TwoDUP.html\">2DUP</a> <a href=\"../core/TwotoR.html\">2&gt;R</a> <a href=\"../core/CHARS.html\">CHARS</a> <a href=\"../core/DUP.html\">DUP</a> <a href=\"../core/ALLOT.html\">ALLOT</a> <a href=\"../core/MOVE.html\">MOVE</a> <a href=\"../core/TwoRfrom.html\">2R&gt;</a> <br>\n        <a href=\"../core/Semi.html\">;</a>\n        </p><p>\n        dbl1 d&gt;ascii <a href=\"../double/TwoCONSTANT.html\">2CONSTANT</a> \"dbl1\" <br>\n        dbl2 d&gt;ascii <a href=\"../double/TwoCONSTANT.html\">2CONSTANT</a> \"dbl2\"\n        </p><p>\n        <a href=\"../core/Colon.html\">:</a> DoubleOutput <br>\n        &nbsp;&nbsp; <a href=\"../core/CR.html\">CR</a> <a href=\"../core/Dotq.html\">.\"</a> You should see lines duplicated:\" <a href=\"../core/CR.html\">CR</a> <br>\n        &nbsp;&nbsp;  5 <a href=\"../core/SPACES.html\">SPACES</a> \"dbl1\" <a href=\"../core/TYPE.html\">TYPE</a> <a href=\"../core/CR.html\">CR</a> <br>\n        &nbsp;&nbsp;  5 <a href=\"../core/SPACES.html\">SPACES</a>  dbl1  <a href=\"../double/Dd.html\">D.</a> <a href=\"../core/CR.html\">CR</a> <br>\n        &nbsp;&nbsp;  8 <a href=\"../core/SPACES.html\">SPACES</a> \"dbl1\" <a href=\"../core/DUP.html\">DUP</a> <a href=\"../core/toR.html\">&gt;R</a> <a href=\"../core/TYPE.html\">TYPE</a> <a href=\"../core/CR.html\">CR</a> <br>\n        &nbsp;&nbsp;  5 <a href=\"../core/SPACES.html\">SPACES</a>  dbl1  <a href=\"../core/Rfrom.html\">R&gt;</a> 3 <a href=\"../core/Plus.html\">+</a> <strong>D.R</strong> <a href=\"../core/CR.html\">CR</a> <br>\n        &nbsp;&nbsp;  5 <a href=\"../core/SPACES.html\">SPACES</a> \"dbl2\" <a href=\"../core/TYPE.html\">TYPE</a> <a href=\"../core/CR.html\">CR</a> <br>\n        &nbsp;&nbsp;  5 <a href=\"../core/SPACES.html\">SPACES</a>  dbl2  <a href=\"../double/Dd.html\">D.</a> <a href=\"../core/CR.html\">CR</a> <br>\n        &nbsp;&nbsp; 10 <a href=\"../core/SPACES.html\">SPACES</a> \"dbl2\" <a href=\"../core/DUP.html\">DUP</a> <a href=\"../core/toR.html\">&gt;R</a> <a href=\"../core/TYPE.html\">TYPE</a> <a href=\"../core/CR.html\">CR</a> <br>\n        &nbsp;&nbsp;  5 <a href=\"../core/SPACES.html\">SPACES</a>  dbl2  <a href=\"../core/Rfrom.html\">R&gt;</a> 5 <a href=\"../core/Plus.html\">+</a> <strong>D.R</strong> <a href=\"../core/CR.html\">CR</a> <br>\n        <a href=\"../core/Semi.html\">;</a>\n        </p><p>\n        <span class=\"tt\">T{ DoubleOutput -&gt;  }T</span>\n        \n        \n        </p></div>\n      "
                    }
                }
            },
            "DEqual": {
                "id": "double:D=",
                "number": "8.6.1.1120",
                "name": "D=",
                "english": "d-equals",
                "list": "DOUBLE",
                "basename": "DEqual",
                "stackEffect": {
                    "html": {
                        " ": "( <em>xd<sub>1</sub> xd<sub>2</sub></em> -- <em>flag</em> )"
                    },
                    "plain": {
                        " ": "( xd1 xd2 -- flag )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>xd<sub>1</sub> xd<sub>2</sub></em> -- <em>flag</em> )\n      <p>\n      <em>flag</em> is true if and only if <em>xd<sub>1</sub></em> is bit-for-bit\n      the same as <em>xd<sub>2</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1.&nbsp;<strong>D=</strong> -&gt; &lt;TRUE&gt;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.&nbsp;<strong>D=</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;<strong>D=</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1.&nbsp;<strong>D=</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.&nbsp;<strong>D=</strong> -&gt; &lt;TRUE&gt;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;<strong>D=</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1.&nbsp;<strong>D=</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.&nbsp;<strong>D=</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;<strong>D=</strong> -&gt; &lt;TRUE&gt;&nbsp; }T</span>\n      <p>\n      <span class=\"tt\">T{ &nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;-1&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;-1&nbsp;<strong>D=</strong> -&gt; &lt;TRUE&gt;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;-1&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;0&nbsp;<strong>D=</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;-1&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;1&nbsp;<strong>D=</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;-1&nbsp;<strong>D=</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;0&nbsp;<strong>D=</strong> -&gt; &lt;TRUE&gt;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;1&nbsp;<strong>D=</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;-1&nbsp;<strong>D=</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;0&nbsp;<strong>D=</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;1&nbsp;<strong>D=</strong> -&gt; &lt;TRUE&gt;&nbsp; }T</span>\n      </p><p>\n      <span class=\"tt\">T{ MAX-2INT&nbsp;MIN-2INT&nbsp;<strong>D=</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ MAX-2INT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.&nbsp;<strong>D=</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ MAX-2INT&nbsp;MAX-2INT&nbsp;<strong>D=</strong> -&gt; &lt;TRUE&gt;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ MAX-2INT&nbsp;HI-2INT&nbsp;&nbsp;<strong>D=</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ MAX-2INT&nbsp;MIN-2INT&nbsp;<strong>D=</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ MIN-2INT&nbsp;MIN-2INT&nbsp;<strong>D=</strong> -&gt; &lt;TRUE&gt;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ MIN-2INT&nbsp;LO-2INT&nbsp;&nbsp;<strong>D=</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ MIN-2INT&nbsp;MAX-2INT&nbsp;<strong>D=</strong> -&gt; &lt;FALSE&gt; }T</span>\n      \n      \n      </p>"
                    }
                }
            },
            "DMAX": {
                "id": "double:DMAX",
                "number": "8.6.1.1210",
                "name": "DMAX",
                "english": "d-max",
                "list": "DOUBLE",
                "basename": "DMAX",
                "stackEffect": {
                    "html": {
                        " ": "( <em>d<sub>1</sub> d<sub>2</sub></em> -- <em>d<sub>3</sub></em> )"
                    },
                    "plain": {
                        " ": "( d1 d2 -- d3 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>d<sub>1</sub> d<sub>2</sub></em> -- <em>d<sub>3</sub></em> )\n      <p>\n      <em>d<sub>3</sub></em> is the greater of <em>d<sub>1</sub></em> and <em>d<sub>2</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;<strong>DMAX</strong> -&gt; &nbsp;2.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.&nbsp;<strong>DMAX</strong> -&gt; &nbsp;1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1.&nbsp;<strong>DMAX</strong> -&gt; &nbsp;1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;<strong>DMAX</strong> -&gt; &nbsp;1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;<strong>DMAX</strong> -&gt; &nbsp;1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1.&nbsp;<strong>DMAX</strong> -&gt; &nbsp;0.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;<strong>DMAX</strong> -&gt; &nbsp;1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2.&nbsp;<strong>DMAX</strong> -&gt; -1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }T</span>\n      <p>\n      <span class=\"tt\">T{ MAX-2INT&nbsp;&nbsp;HI-2INT&nbsp;<strong>DMAX</strong> -&gt; MAX-2INT }T</span> <br>\n      <span class=\"tt\">T{ MAX-2INT&nbsp;MIN-2INT&nbsp;<strong>DMAX</strong> -&gt; MAX-2INT }T</span> <br>\n      <span class=\"tt\">T{ MIN-2INT&nbsp;MAX-2INT&nbsp;<strong>DMAX</strong> -&gt; MAX-2INT }T</span> <br>\n      <span class=\"tt\">T{ MIN-2INT&nbsp;&nbsp;LO-2INT&nbsp;<strong>DMAX</strong> -&gt; LO-2INT&nbsp; }T</span>\n      </p><p>\n      <span class=\"tt\">T{ MAX-2INT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;<strong>DMAX</strong> -&gt; MAX-2INT }T</span> <br>\n      <span class=\"tt\">T{ MAX-2INT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1.&nbsp;<strong>DMAX</strong> -&gt; MAX-2INT }T</span> <br>\n      <span class=\"tt\">T{ MIN-2INT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;<strong>DMAX</strong> -&gt; &nbsp;1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ MIN-2INT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1.&nbsp;<strong>DMAX</strong> -&gt; -1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }T</span>\n      \n      \n      </p>"
                    }
                }
            },
            "DMIN": {
                "id": "double:DMIN",
                "number": "8.6.1.1220",
                "name": "DMIN",
                "english": "d-min",
                "list": "DOUBLE",
                "basename": "DMIN",
                "stackEffect": {
                    "html": {
                        " ": "( <em>d<sub>1</sub> d<sub>2</sub></em> -- <em>d<sub>3</sub></em> )"
                    },
                    "plain": {
                        " ": "( d1 d2 -- d3 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>d<sub>1</sub> d<sub>2</sub></em> -- <em>d<sub>3</sub></em> )\n      <p>\n      <em>d<sub>3</sub></em> is the lesser of <em>d<sub>1</sub></em> and <em>d<sub>2</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;<strong>DMIN</strong> -&gt; &nbsp;1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.&nbsp;<strong>DMIN</strong> -&gt; &nbsp;0.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1.&nbsp;<strong>DMIN</strong> -&gt; -1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;<strong>DMIN</strong> -&gt; &nbsp;1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;<strong>DMIN</strong> -&gt; &nbsp;0.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1.&nbsp;<strong>DMIN</strong> -&gt; -1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;<strong>DMIN</strong> -&gt; -1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2.&nbsp;<strong>DMIN</strong> -&gt; -2.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }T</span>\n      <p>\n      <span class=\"tt\">T{ MAX-2INT&nbsp;&nbsp;HI-2INT&nbsp;<strong>DMIN</strong> -&gt; HI-2INT&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ MAX-2INT&nbsp;MIN-2INT&nbsp;<strong>DMIN</strong> -&gt; MIN-2INT }T</span> <br>\n      <span class=\"tt\">T{ MIN-2INT&nbsp;MAX-2INT&nbsp;<strong>DMIN</strong> -&gt; MIN-2INT }T</span> <br>\n      <span class=\"tt\">T{ MIN-2INT&nbsp;&nbsp;LO-2INT&nbsp;<strong>DMIN</strong> -&gt; MIN-2INT }T</span>\n      </p><p>\n      <span class=\"tt\">T{ MAX-2INT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;<strong>DMIN</strong> -&gt; &nbsp;1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ MAX-2INT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1.&nbsp;<strong>DMIN</strong> -&gt; -1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ MIN-2INT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;<strong>DMIN</strong> -&gt; MIN-2INT }T</span> <br>\n      <span class=\"tt\">T{ MIN-2INT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1.&nbsp;<strong>DMIN</strong> -&gt; MIN-2INT }T</span>\n      \n      \n      </p>"
                    }
                }
            },
            "DMinus": {
                "id": "double:D-",
                "number": "8.6.1.1050",
                "name": "D-",
                "english": "d-minus",
                "list": "DOUBLE",
                "basename": "DMinus",
                "stackEffect": {
                    "html": {
                        " ": "( <em>d<sub>1</sub> | ud<sub>1</sub> d<sub>2</sub> | ud<sub>2</sub></em> -- <em>d<sub>3</sub> | ud<sub>3</sub></em> )"
                    },
                    "plain": {
                        " ": "( d1 | ud1 d2 | ud2 -- d3 | ud3 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>d<sub>1</sub> | ud<sub>1</sub> d<sub>2</sub> | ud<sub>2</sub></em> -- <em>d<sub>3</sub> | ud<sub>3</sub></em> )\n      <p>\n      Subtract <em>d<sub>2</sub> | ud<sub>2</sub></em> from <em>d<sub>1</sub> | ud<sub>1</sub></em>, giving the\n      difference <em>d<sub>3</sub> | ud<sub>3</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      <span class=\"tt\">T{ &nbsp;0.&nbsp;&nbsp;5.&nbsp;<strong>D-</strong> -&gt; -5. }T</span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> small integers <br>\n      <span class=\"tt\">T{ &nbsp;5.&nbsp;&nbsp;0.&nbsp;<strong>D-</strong> -&gt; &nbsp;5. }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;0.&nbsp;-5.&nbsp;<strong>D-</strong> -&gt; &nbsp;5. }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;1.&nbsp;&nbsp;2.&nbsp;<strong>D-</strong> -&gt; -1. }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;1.&nbsp;-2.&nbsp;<strong>D-</strong> -&gt; &nbsp;3. }T</span> <br>\n      <span class=\"tt\">T{ -1.&nbsp;&nbsp;2.&nbsp;<strong>D-</strong> -&gt; -3. }T</span> <br>\n      <span class=\"tt\">T{ -1.&nbsp;-2.&nbsp;<strong>D-</strong> -&gt; &nbsp;1. }T</span> <br>\n      <span class=\"tt\">T{ -1.&nbsp;-1.&nbsp;<strong>D-</strong> -&gt; &nbsp;0. }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;0&nbsp;&nbsp;0&nbsp;&nbsp;0&nbsp;&nbsp;5&nbsp;<strong>D-</strong> -&gt; &nbsp;0&nbsp;-5 }T</span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> mid-range integers <br>\n      <span class=\"tt\">T{ -1&nbsp;&nbsp;5&nbsp;&nbsp;0&nbsp;&nbsp;0&nbsp;<strong>D-</strong> -&gt; -1&nbsp;&nbsp;5 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;0&nbsp;&nbsp;0&nbsp;-1&nbsp;-5&nbsp;<strong>D-</strong> -&gt; &nbsp;1&nbsp;&nbsp;4 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;0&nbsp;-5&nbsp;&nbsp;0&nbsp;&nbsp;0&nbsp;<strong>D-</strong> -&gt; &nbsp;0&nbsp;-5 }T</span> <br>\n      <span class=\"tt\">T{ -1&nbsp;&nbsp;1&nbsp;&nbsp;0&nbsp;&nbsp;2&nbsp;<strong>D-</strong> -&gt; -1&nbsp;-1 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;0&nbsp;&nbsp;1&nbsp;-1&nbsp;-2&nbsp;<strong>D-</strong> -&gt; &nbsp;1&nbsp;&nbsp;2 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;0&nbsp;-1&nbsp;&nbsp;0&nbsp;&nbsp;2&nbsp;<strong>D-</strong> -&gt; &nbsp;0&nbsp;-3 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;0&nbsp;-1&nbsp;&nbsp;0&nbsp;-2&nbsp;<strong>D-</strong> -&gt; &nbsp;0&nbsp;&nbsp;1 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;0&nbsp;&nbsp;0&nbsp;&nbsp;0&nbsp;&nbsp;1&nbsp;<strong>D-</strong> -&gt; &nbsp;0&nbsp;-1 }T</span>\n      <p>\n      <span class=\"tt\">T{ MIN-INT&nbsp;0&nbsp;<a href=\"../core/TwoDUP.html\">2DUP</a>&nbsp;<strong>D-</strong> -&gt; 0. }T</span> <br>\n      <span class=\"tt\">T{ MIN-INT&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a>&nbsp;MAX-INT&nbsp;0<strong>D-</strong> -&gt; 1&nbsp;1s }T</span> <br>\n      <span class=\"tt\">T{ MAX-2INT&nbsp;max-2INT&nbsp;<strong>D-</strong> -&gt; 0. }T</span> &nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> large integers <br>\n      <span class=\"tt\">T{ MIN-2INT&nbsp;min-2INT&nbsp;<strong>D-</strong> -&gt; 0. }T</span> <br>\n      <span class=\"tt\">T{ MAX-2INT&nbsp;&nbsp;hi-2INT&nbsp;<strong>D-</strong> -&gt; lo-2INT&nbsp;<a href=\"../double/DNEGATE.html\">DNEGATE</a> }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;HI-2INT&nbsp;&nbsp;lo-2INT&nbsp;<strong>D-</strong> -&gt; max-2INT }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;LO-2INT&nbsp;&nbsp;hi-2INT&nbsp;<strong>D-</strong> -&gt; min-2INT&nbsp;1.&nbsp;<a href=\"../double/DPlus.html\">D+</a> }T</span> <br>\n      <span class=\"tt\">T{ MIN-2INT&nbsp;min-2INT&nbsp;<strong>D-</strong> -&gt; 0. }T</span> <br>\n      <span class=\"tt\">T{ MIN-2INT&nbsp;&nbsp;lo-2INT&nbsp;<strong>D-</strong> -&gt; lo-2INT }T</span>\n      \n      \n      </p>"
                    }
                }
            },
            "DNEGATE": {
                "id": "double:DNEGATE",
                "number": "8.6.1.1230",
                "name": "DNEGATE",
                "english": "d-negate",
                "list": "DOUBLE",
                "basename": "DNEGATE",
                "stackEffect": {
                    "html": {
                        " ": "( <em>d<sub>1</sub></em> -- <em>d<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( d1 -- d2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>d<sub>1</sub></em> -- <em>d<sub>2</sub></em> )\n      <p>\n      <em>d<sub>2</sub></em> is the negation of <em>d<sub>1</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      <span class=\"tt\">T{ &nbsp;&nbsp;0. <strong>DNEGATE</strong> -&gt; &nbsp;0. }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;1. <strong>DNEGATE</strong> -&gt; -1. }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;-1. <strong>DNEGATE</strong> -&gt; &nbsp;1. }T</span> <br>\n      <span class=\"tt\">T{ max-2int&nbsp;<strong>DNEGATE</strong> -&gt; min-2int&nbsp;<a href=\"../core/SWAP.html\">SWAP</a>&nbsp;<a href=\"../core/OnePlus.html\">1+</a>&nbsp;<a href=\"../core/SWAP.html\">SWAP</a> }T</span> <br>\n      <span class=\"tt\">T{ min-2int&nbsp;<a href=\"../core/SWAP.html\">SWAP</a>&nbsp;<a href=\"../core/OnePlus.html\">1+</a>&nbsp;<a href=\"../core/SWAP.html\">SWAP</a>&nbsp;<strong>DNEGATE</strong> -&gt; max-2int }T</span>\n      \n      \n      "
                    }
                }
            },
            "DPlus": {
                "id": "double:D+",
                "number": "8.6.1.1040",
                "name": "D+",
                "english": "d-plus",
                "list": "DOUBLE",
                "basename": "DPlus",
                "stackEffect": {
                    "html": {
                        " ": "( <em>d<sub>1</sub> | ud<sub>1</sub> d<sub>2</sub> | ud<sub>2</sub></em> -- <em>d<sub>3</sub> | ud<sub>3</sub></em> )"
                    },
                    "plain": {
                        " ": "( d1 | ud1 d2 | ud2 -- d3 | ud3 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>d<sub>1</sub> | ud<sub>1</sub> d<sub>2</sub> | ud<sub>2</sub></em> -- <em>d<sub>3</sub> | ud<sub>3</sub></em> )\n      <p>\n      Add <em>d<sub>2</sub> | ud<sub>2</sub></em> to <em>d<sub>1</sub> | ud<sub>1</sub></em>, giving the sum\n      <em>d<sub>3</sub> | ud<sub>3</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      <span class=\"tt\">T{ &nbsp;0.&nbsp;&nbsp;5.&nbsp;<strong>D+</strong> -&gt; &nbsp;5. }T</span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> small integers <br>\n      <span class=\"tt\">T{ -5.&nbsp;&nbsp;0.&nbsp;<strong>D+</strong> -&gt; -5. }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;1.&nbsp;&nbsp;2.&nbsp;<strong>D+</strong> -&gt; &nbsp;3. }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;1.&nbsp;-2.&nbsp;<strong>D+</strong> -&gt; -1. }T</span> <br>\n      <span class=\"tt\">T{ -1.&nbsp;&nbsp;2.&nbsp;<strong>D+</strong> -&gt; &nbsp;1. }T</span> <br>\n      <span class=\"tt\">T{ -1.&nbsp;-2.&nbsp;<strong>D+</strong> -&gt; -3. }T</span> <br>\n      <span class=\"tt\">T{ -1.&nbsp;&nbsp;1.&nbsp;<strong>D+</strong> -&gt; &nbsp;0. }T</span>\n      <p>\n      <span class=\"tt\">T{ &nbsp;0&nbsp;&nbsp;0&nbsp;&nbsp;0&nbsp;&nbsp;5&nbsp;<strong>D+</strong> -&gt; &nbsp;0&nbsp;&nbsp;5 }T</span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> mid range integers <br>\n      <span class=\"tt\">T{ -1&nbsp;&nbsp;5&nbsp;&nbsp;0&nbsp;&nbsp;0&nbsp;<strong>D+</strong> -&gt; -1&nbsp;&nbsp;5 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;0&nbsp;&nbsp;0&nbsp;&nbsp;0&nbsp;-5&nbsp;<strong>D+</strong> -&gt; &nbsp;0&nbsp;-5 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;0&nbsp;-5&nbsp;-1&nbsp;&nbsp;0&nbsp;<strong>D+</strong> -&gt; -1&nbsp;-5 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;0&nbsp;&nbsp;1&nbsp;&nbsp;0&nbsp;&nbsp;2&nbsp;<strong>D+</strong> -&gt; &nbsp;0&nbsp;&nbsp;3 }T</span> <br>\n      <span class=\"tt\">T{ -1&nbsp;&nbsp;1&nbsp;&nbsp;0&nbsp;-2&nbsp;<strong>D+</strong> -&gt; -1&nbsp;-1 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;0&nbsp;-1&nbsp;&nbsp;0&nbsp;&nbsp;2&nbsp;<strong>D+</strong> -&gt; &nbsp;0&nbsp;&nbsp;1 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;0&nbsp;-1&nbsp;-1&nbsp;-2&nbsp;<strong>D+</strong> -&gt; -1&nbsp;-3 }T</span> <br>\n      <span class=\"tt\">T{ -1&nbsp;-1&nbsp;&nbsp;0&nbsp;&nbsp;1&nbsp;<strong>D+</strong> -&gt; -1&nbsp;&nbsp;0 }T</span>\n      </p><p>\n      <span class=\"tt\">T{ MIN-INT&nbsp;0&nbsp;<a href=\"../core/TwoDUP.html\">2DUP</a>&nbsp;<strong>D+</strong> -&gt; 0&nbsp;1 }T</span> <br>\n      <span class=\"tt\">T{ MIN-INT&nbsp;<a href=\"../core/StoD.html\">S&gt;D</a>&nbsp;MIN-INT&nbsp;0&nbsp;<strong>D+</strong> -&gt; 0&nbsp;0 }T</span>\n      </p><p>\n      <span class=\"tt\">T{ &nbsp;HI-2INT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1. <strong>D+</strong> -&gt; 0&nbsp;HI-INT&nbsp;<a href=\"../core/OnePlus.html\">1+</a> }T</span> &nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> large double integers <br>\n      <span class=\"tt\">T{ &nbsp;HI-2INT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/TwoDUP.html\">2DUP</a>&nbsp;<strong>D+</strong> -&gt; 1S&nbsp;<a href=\"../core/OneMinus.html\">1-</a>&nbsp;MAX-INT }T</span> <br>\n      <span class=\"tt\">T{ MAX-2INT&nbsp;MIN-2INT&nbsp;<strong>D+</strong> -&gt; -1. }T</span> <br>\n      <span class=\"tt\">T{ MAX-2INT&nbsp;&nbsp;LO-2INT&nbsp;<strong>D+</strong> -&gt; HI-2INT }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;LO-2INT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/TwoDUP.html\">2DUP</a>&nbsp;<strong>D+</strong> -&gt; MIN-2INT }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;HI-2INT&nbsp;MIN-2INT&nbsp;<strong>D+</strong>&nbsp;1. <strong>D+</strong> -&gt; LO-2INT }T</span>\n      \n      \n      </p>"
                    }
                }
            },
            "DTwoDiv": {
                "id": "double:D2/",
                "number": "8.6.1.1100",
                "name": "D2/",
                "english": "d-two-slash",
                "list": "DOUBLE",
                "basename": "DTwoDiv",
                "stackEffect": {
                    "html": {
                        " ": "( <em>xd<sub>1</sub></em> -- <em>xd<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( xd1 -- xd2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>xd<sub>1</sub></em> -- <em>xd<sub>2</sub></em> )\n      <p>\n      <em>xd<sub>2</sub></em> is the result of shifting <em>xd<sub>1</sub></em> one bit\n      toward the least-significant bit, leaving the most-significant\n      bit unchanged.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.&nbsp;<strong>D2/</strong> -&gt; 0.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;<strong>D2/</strong> -&gt; 0.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;1&nbsp;<strong>D2/</strong> -&gt; MIN-INT&nbsp;0 }T</span> <br>\n      <span class=\"tt\">T{ MAX-2INT&nbsp;<strong>D2/</strong> -&gt; HI-2INT&nbsp;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1.&nbsp;<strong>D2/</strong> -&gt; -1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ MIN-2INT&nbsp;<strong>D2/</strong> -&gt; LO-2INT&nbsp;&nbsp; }T</span>\n      \n      \n      "
                    }
                }
            },
            "DTwoTimes": {
                "id": "double:D2*",
                "number": "8.6.1.1090",
                "name": "D2*",
                "english": "d-two-star",
                "list": "DOUBLE",
                "basename": "DTwoTimes",
                "stackEffect": {
                    "html": {
                        " ": "( <em>xd<sub>1</sub></em> -- <em>xd<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( xd1 -- xd2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>xd<sub>1</sub></em> -- <em>xd<sub>2</sub></em> )\n      <p>\n      <em>xd<sub>2</sub></em> is the result of shifting <em>xd<sub>1</sub></em> one bit\n      toward the most-significant bit, filling the vacated\n      least-significant bit with zero.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.&nbsp;<strong>D2*</strong> -&gt; 0.&nbsp;<strong>D2*</strong> }T</span> <br>\n      <span class=\"tt\">T{ MIN-INT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;<strong>D2*</strong> -&gt; 0&nbsp;1 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HI-2INT&nbsp;<strong>D2*</strong> -&gt; MAX-2INT&nbsp;1.&nbsp;<a href=\"../double/DMinus.html\">D-</a> }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LO-2INT&nbsp;<strong>D2*</strong> -&gt; MIN-2INT }T</span>\n      \n      \n      "
                    }
                }
            },
            "DUless": {
                "id": "double:DUless",
                "number": "8.6.2.1270",
                "name": "DU<",
                "english": "d-u-less",
                "list": "DOUBLE EXT",
                "basename": "DUless",
                "stackEffect": {
                    "html": {
                        " ": "( <em>ud<sub>1</sub> ud<sub>2</sub></em> -- <em>flag</em> )"
                    },
                    "plain": {
                        " ": "( ud1 ud2 -- flag )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>ud<sub>1</sub> ud<sub>2</sub></em> -- <em>flag</em> )\n      <p>\n      <em>flag</em> is true if and only if <em>ud<sub>1</sub></em> is less than\n      <em>ud<sub>2</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;<strong>DU&lt;</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1.&nbsp;<strong>DU&lt;</strong> -&gt; &lt;TRUE&gt;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;<strong>DU&lt;</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2.&nbsp;<strong>DU&lt;</strong> -&gt; &lt;FALSE&gt; }T</span>\n      <p>\n      <span class=\"tt\">T{ MAX-2INT&nbsp;&nbsp;HI-2INT&nbsp;<strong>DU&lt;</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;HI-2INT&nbsp;MAX-2INT&nbsp;<strong>DU&lt;</strong> -&gt; &lt;TRUE&gt;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ MAX-2INT&nbsp;MIN-2INT&nbsp;<strong>DU&lt;</strong> -&gt; &lt;TRUE&gt;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ MIN-2INT&nbsp;MAX-2INT&nbsp;<strong>DU&lt;</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ MIN-2INT&nbsp;&nbsp;LO-2INT&nbsp;<strong>DU&lt;</strong> -&gt; &lt;TRUE&gt;&nbsp; }T</span>\n      \n      \n      </p>"
                    }
                }
            },
            "DZeroEqual": {
                "id": "double:D0=",
                "number": "8.6.1.1080",
                "name": "D0=",
                "english": "d-zero-equals",
                "list": "DOUBLE",
                "basename": "DZeroEqual",
                "stackEffect": {
                    "html": {
                        " ": "( <em>xd</em> -- <em>flag</em> )"
                    },
                    "plain": {
                        " ": "( xd -- flag )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>xd</em> -- <em>flag</em> )\n      <p>\n      <em>flag</em> is true if and only if <em>xd</em> is equal to zero.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;<strong>D0=</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ MIN-INT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;<strong>D0=</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MAX-2INT&nbsp;<strong>D0=</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;&nbsp;MAX-INT&nbsp;<strong>D0=</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.&nbsp;<strong>D0=</strong> -&gt; &lt;TRUE&gt;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1.&nbsp;<strong>D0=</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;MIN-INT&nbsp;<strong>D0=</strong> -&gt; &lt;FALSE&gt; }T</span>\n      \n      \n      "
                    }
                }
            },
            "DZeroless": {
                "id": "double:D0less",
                "number": "8.6.1.1075",
                "name": "D0<",
                "english": "d-zero-less",
                "list": "DOUBLE",
                "basename": "DZeroless",
                "stackEffect": {
                    "html": {
                        " ": "( <em>d</em> -- <em>flag</em> )"
                    },
                    "plain": {
                        " ": "( d -- flag )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>d</em> -- <em>flag</em> )\n      <p>\n      <em>flag</em> is true if and only if <em>d</em> is less than zero.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.&nbsp;<strong>D0&lt;</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;<strong>D0&lt;</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;MIN-INT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;<strong>D0&lt;</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;MAX-INT&nbsp;<strong>D0&lt;</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MAX-2INT&nbsp;<strong>D0&lt;</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1.&nbsp;<strong>D0&lt;</strong> -&gt; &lt;TRUE&gt;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MIN-2INT&nbsp;<strong>D0&lt;</strong> -&gt; &lt;TRUE&gt;&nbsp; }T</span>\n      \n      \n      "
                    }
                }
            },
            "Dd": {
                "id": "double:Dd",
                "number": "8.6.1.1060",
                "name": "D.",
                "english": "d-dot",
                "list": "DOUBLE",
                "basename": "Dd",
                "stackEffect": {
                    "html": {
                        " ": "( <em>d</em> -- )"
                    },
                    "plain": {
                        " ": "( d -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>d</em> -- )\n      <p>\n      Display <em>d</em> in free field format.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      See <a href=\"../testsuite.html#test:double:D.R\">F.8.6.1.1070 D.R</a>.\n      \n      \n      "
                    }
                }
            },
            "Dless": {
                "id": "double:Dless",
                "number": "8.6.1.1110",
                "name": "D<",
                "english": "d-less-than",
                "list": "DOUBLE",
                "basename": "Dless",
                "stackEffect": {
                    "html": {
                        " ": "( <em>d<sub>1</sub> d<sub>2</sub></em> -- <em>flag</em> )"
                    },
                    "plain": {
                        " ": "( d1 d2 -- flag )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>d<sub>1</sub> d<sub>2</sub></em> -- <em>flag</em> )\n      <p>\n      <em>flag</em> is true if and only if <em>d<sub>1</sub></em> is less than\n      <em>d<sub>2</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;<strong>D&lt;</strong> -&gt; &lt;TRUE&gt;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.&nbsp;<strong>D&lt;</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.&nbsp;<strong>D&lt;</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;<strong>D&lt;</strong> -&gt; &lt;TRUE&gt;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.&nbsp;<strong>D&lt;</strong> -&gt; &lt;TRUE&gt;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1.&nbsp;<strong>D&lt;</strong> -&gt; &lt;TRUE&gt;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-2.&nbsp;<strong>D&lt;</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1.&nbsp;MAX-2INT&nbsp;<strong>D&lt;</strong> -&gt; &lt;TRUE&gt;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ MIN-2INT&nbsp;MAX-2INT&nbsp;<strong>D&lt;</strong> -&gt; &lt;TRUE&gt;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ MAX-2INT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1.&nbsp;<strong>D&lt;</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ MAX-2INT&nbsp;MIN-2INT&nbsp;<strong>D&lt;</strong> -&gt; &lt;FALSE&gt; }T</span>\n      <p>\n      <span class=\"tt\">T{ MAX-2INT&nbsp;<a href=\"../core/TwoDUP.html\">2DUP</a>&nbsp;-1.&nbsp;<a href=\"../double/DPlus.html\">D+</a>&nbsp;<strong>D&lt;</strong> -&gt; &lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ MIN-2INT&nbsp;<a href=\"../core/TwoDUP.html\">2DUP</a>&nbsp;&nbsp;1.&nbsp;<a href=\"../double/DPlus.html\">D+</a>&nbsp;<strong>D&lt;</strong> -&gt; &lt;TRUE&gt;&nbsp; }T</span>\n      \n      \n      </p>"
                    }
                }
            },
            "DtoS": {
                "id": "double:DtoS",
                "number": "8.6.1.1140",
                "name": "D>S",
                "english": "d-to-s",
                "list": "DOUBLE",
                "basename": "DtoS",
                "stackEffect": {
                    "html": {
                        " ": "( <em>d</em> -- <em>n</em> )"
                    },
                    "plain": {
                        " ": "( d -- n )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>d</em> -- <em>n</em> )\n      <p>\n      <em>n</em> is the equivalent of <em>d</em>. An ambiguous condition\n      exists if <em>d</em> lies outside the range of a signed single-cell\n      number.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../rationale.html#rat:double:DtoS\">A.8.6.1.1140 D&gt;S</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.8.6.1.1140 D>S -->\n      There exist number representations, e.g., the sign-magnitude\n      representation, where reduction from double- to single-precision\n      cannot simply be done with <a href=\"../core/DROP.html\">DROP</a>. This word,\n      equivalent to <a href=\"../core/DROP.html\">DROP</a> on two's complement systems,\n      desensitizes application code to number representation and\n      facilitates portability.\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;1234&nbsp;&nbsp;0&nbsp;<strong>D&gt;S</strong> -&gt; &nbsp;1234&nbsp;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;-1234&nbsp;-1&nbsp;<strong>D&gt;S</strong> -&gt; -1234&nbsp;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ MAX-INT&nbsp;&nbsp;0&nbsp;<strong>D&gt;S</strong> -&gt; MAX-INT }T</span> <br>\n      <span class=\"tt\">T{ MIN-INT&nbsp;-1&nbsp;<strong>D&gt;S</strong> -&gt; MIN-INT }T</span>\n      \n      \n      "
                    }
                }
            },
            "MPlus": {
                "id": "double:M+",
                "number": "8.6.1.1830",
                "name": "M+",
                "english": "m-plus",
                "list": "DOUBLE",
                "basename": "MPlus",
                "stackEffect": {
                    "html": {
                        " ": "( <em>d<sub>1</sub> | ud<sub>1</sub> n</em> -- <em>d<sub>2</sub> | ud<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( d1 | ud1 n -- d2 | ud2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>d<sub>1</sub> | ud<sub>1</sub> n</em> -- <em>d<sub>2</sub> | ud<sub>2</sub></em> )\n      <p>\n      Add <em>n</em> to <em>d<sub>1</sub> | ud<sub>1</sub></em>, giving the sum <em>d<sub>2</sub> | ud<sub>2</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../rationale.html#rat:double:M+\">A.8.6.1.1830 M+</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.8.6.1.1830 M+ -->\n      <strong>M+</strong> is the classical method for integrating.\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      <span class=\"tt\">T{ HI-2INT&nbsp;&nbsp;&nbsp;1&nbsp;<strong>M+</strong> -&gt; HI-2INT&nbsp;&nbsp;&nbsp;1.&nbsp;<a href=\"../double/DPlus.html\">D+</a> }T</span> <br>\n      <span class=\"tt\">T{ MAX-2INT&nbsp;-1&nbsp;<strong>M+</strong> -&gt; MAX-2INT&nbsp;-1.&nbsp;<a href=\"../double/DPlus.html\">D+</a> }T</span> <br>\n      <span class=\"tt\">T{ MIN-2INT&nbsp;&nbsp;1&nbsp;<strong>M+</strong> -&gt; MIN-2INT&nbsp;&nbsp;1.&nbsp;<a href=\"../double/DPlus.html\">D+</a> }T</span> <br>\n      <span class=\"tt\">T{ LO-2INT&nbsp;&nbsp;-1&nbsp;<strong>M+</strong> -&gt; LO-2INT&nbsp;&nbsp;-1.&nbsp;<a href=\"../double/DPlus.html\">D+</a> }T</span>\n      \n      \n      "
                    }
                }
            },
            "MTimesDiv": {
                "id": "double:M*/",
                "number": "8.6.1.1820",
                "name": "M*/",
                "english": "m-star-slash",
                "list": "DOUBLE",
                "basename": "MTimesDiv",
                "stackEffect": {
                    "html": {
                        " ": "( <em>d<sub>1</sub> n<sub>1</sub> +n<sub>2</sub></em> -- <em>d<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( d1 n1 +n2 -- d2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>d<sub>1</sub> n<sub>1</sub> +n<sub>2</sub></em> -- <em>d<sub>2</sub></em> )\n      <p>\n      Multiply <em>d<sub>1</sub></em> by <em>n<sub>1</sub></em> producing the triple-cell\n      intermediate result <em>t</em>. Divide <em>t</em> by <em>+n<sub>2</sub></em> giving the\n      double-cell quotient <em>d<sub>2</sub></em>. An ambiguous condition exists\n      if <em>+n<sub>2</sub></em> is zero or negative, or the quotient lies outside\n      of the range of a double-precision signed integer.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../rationale.html#rat:double:M*/\">A.8.6.1.1820 M*/</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.8.6.1.1820 M*/ -->\n      <strong>M*/</strong> was once described by Chuck Moore as the most\n      useful arithmetic operator in Forth. It is the main workhorse\n      in most computations involving double-cell numbers. Note that\n      some systems allow signed divisors. This can cost a lot in\n      performance on some CPUs. The requirement for a positive\n      divisor has not proven to be a problem.\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n      <div class=\"tt\">\n<span class=\"rm\">To correct the result if the division is floored,\n        only used when necessary, i.e., negative quotient and\n        remainder <em>&lt;&gt;=</em> 0.</span>\n        <p>\n        <a href=\"../core/Colon.html\">:</a> ?floored <a href=\"../core/Bracket.html\">[</a> -3 2 <a href=\"../core/Div.html\">/</a> -2 <a href=\"../core/Equal.html\">=</a> <a href=\"../right-bracket.html\">]</a> <a href=\"../core/LITERAL.html\">LITERAL</a> <a href=\"../core/IF.html\">IF</a> 1. <a href=\"../double/DMinus.html\">D-</a> <a href=\"../core/THEN.html\">THEN</a> <a href=\"../core/Semi.html\">;</a>\n        </p><p>\n         \n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;11&nbsp;<strong>M*/</strong> -&gt; &nbsp;3. }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;11&nbsp;<strong>M*/</strong> -&gt; -3.&nbsp;?floored }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-5.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;11&nbsp;<strong>M*/</strong> -&gt; -3.&nbsp;?floored }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-5.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;11&nbsp;<strong>M*/</strong> -&gt; &nbsp;3. }T</span> <br>\n        <span class=\"tt\">T{ MAX-2INT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;16&nbsp;<strong>M*/</strong> -&gt; HI-2INT }T</span> <br>\n        <span class=\"tt\">T{ MAX-2INT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;16&nbsp;<strong>M*/</strong> -&gt; HI-2INT&nbsp;<a href=\"../double/DNEGATE.html\">DNEGATE</a>&nbsp;?floored }T</span> <br>\n        <span class=\"tt\">T{ MIN-2INT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;16&nbsp;<strong>M*/</strong> -&gt; LO-2INT }T</span> <br>\n        <span class=\"tt\">T{ MIN-2INT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;16&nbsp;<strong>M*/</strong> -&gt; LO-2INT&nbsp;<a href=\"../double/DNEGATE.html\">DNEGATE</a> }T</span>\n        </p><p>\n        <span class=\"tt\">T{ MAX-2INT&nbsp;MAX-INT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MAX-INT&nbsp;<strong>M*/</strong> -&gt; MAX-2INT }T</span> <br>\n        <span class=\"tt\">T{ MAX-2INT&nbsp;MAX-INT&nbsp;<a href=\"../core/TwoDiv.html\">2/</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MAX-INT&nbsp;<strong>M*/</strong> -&gt; MAX-INT&nbsp;1-&nbsp;HI-2INT&nbsp;<a href=\"../core/NIP.html\">NIP</a> }T</span> <br>\n        <span class=\"tt\">T{ MIN-2INT&nbsp;LO-2INT&nbsp;<a href=\"../core/NIP.html\">NIP</a>&nbsp;<a href=\"../core/DUP.html\">DUP</a>&nbsp;<a href=\"../core/NEGATE.html\">NEGATE</a>&nbsp;<strong>M*/</strong> -&gt; MIN-2INT }T</span> <br>\n        <span class=\"tt\">T{ MIN-2INT&nbsp;LO-2INT&nbsp;<a href=\"../core/NIP.html\">NIP</a>&nbsp;<a href=\"../core/OneMinus.html\">1-</a>&nbsp;MAX-INT&nbsp;<strong>M*/</strong> -&gt; MIN-INT&nbsp;3&nbsp;+&nbsp;HI-2INT&nbsp;<a href=\"../core/NIP.html\">NIP</a>&nbsp;2&nbsp;<a href=\"../core/Plus.html\">+</a> }T</span> <br>\n        <span class=\"tt\">T{ MAX-2INT&nbsp;LO-2INT&nbsp;<a href=\"../core/NIP.html\">NIP</a>&nbsp;<a href=\"../core/DUP.html\">DUP</a>&nbsp;<a href=\"../core/NEGATE.html\">NEGATE</a>&nbsp;<strong>M*/</strong> -&gt; MAX-2INT&nbsp;<a href=\"../double/DNEGATE.html\">DNEGATE</a> }T</span> <br>\n        <span class=\"tt\">T{ MIN-2INT&nbsp;MAX-INT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/DUP.html\">DUP</a>&nbsp;<strong>M*/</strong> -&gt; MIN-2INT }T</span>\n        \n        \n        </p></div>\n      "
                    }
                }
            },
            "TwoCONSTANT": {
                "id": "double:2CONSTANT",
                "number": "8.6.1.0360",
                "name": "2CONSTANT",
                "english": "two-constant",
                "list": "DOUBLE",
                "basename": "TwoCONSTANT",
                "stackEffect": {
                    "html": {
                        " ": "( <em>x<sub>1</sub> x<sub>2</sub> \"&lt;spaces&gt;name\"</em> -- )",
                        "name Execution:": "( -- <em>x<sub>1</sub> x<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( x1 x2 \"<spaces>name\" -- )",
                        "name Execution:": "( -- x1 x2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>x<sub>1</sub> x<sub>2</sub> \"&lt;spaces&gt;name\"</em> -- )\n      <p>\n      Skip leading space delimiters. Parse <em>name</em> delimited by\n      a space. Create a definition for <em>name</em> with the execution\n      semantics defined below.\n      </p><p>\n      <em>name</em> is referred to as a \"two-constant\".\n      </p><p>\n        \n      </p>"
                    },
                    "name Execution:": {
                        "name": "name Execution:",
                        "html": "\n\n\n      ( -- <em>x<sub>1</sub> x<sub>2</sub></em> )\n      <p>\n      Place cell pair <em>x<sub>1</sub> x<sub>2</sub></em> on the stack.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:parsing\">3.4.1 Parsing</a></strong>,\n      <a href=\"../rationale.html#rat:double:2CONSTANT\">A.8.6.1.0360 2CONSTANT</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.8.6.1.0360 2CONSTANT -->\n      Typical use:\n      <code>x1</code> <code>x2</code> <strong>2CONSTANT</strong> <em>name</em>\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      <span class=\"tt\">T{ 1&nbsp;2&nbsp;<strong>2CONSTANT</strong>&nbsp;2c1 -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ 2c1 -&gt; 1&nbsp;2 }T</span>\n      <p>\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;cd1&nbsp;2c1&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ cd1 -&gt; 1&nbsp;2 }T</span>\n      </p><p>\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;cd2&nbsp;<strong>2CONSTANT</strong>&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ -1&nbsp;-2&nbsp;cd2&nbsp;2c2 -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ 2c2 -&gt; -1&nbsp;-2 }T</span>\n      </p><p>\n      <span class=\"tt\">T{ 4&nbsp;5&nbsp;<strong>2CONSTANT</strong>&nbsp;2c3&nbsp;<a href=\"../core/IMMEDIATE.html\">IMMEDIATE</a>&nbsp;2c3 -&gt; 4&nbsp;5 }T</span> <br>\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;cd6&nbsp;2c3&nbsp;<a href=\"../double/TwoLITERAL.html\">2LITERAL</a>&nbsp;<a href=\"../core/Semi.html\">;</a>&nbsp;cd6 -&gt; 4&nbsp;5 }T</span>\n      \n      \n      </p>"
                    }
                }
            },
            "TwoLITERAL": {
                "id": "double:2LITERAL",
                "number": "8.6.1.0390",
                "name": "2LITERAL",
                "english": "two-literal",
                "list": "DOUBLE",
                "basename": "TwoLITERAL",
                "stackEffect": {
                    "html": {
                        "Compilation:": "( <em>x<sub>1</sub> x<sub>2</sub></em> -- )",
                        "Run-time:": "( -- <em>x<sub>1</sub> x<sub>2</sub></em> )"
                    },
                    "plain": {
                        "Compilation:": "( x1 x2 -- )",
                        "Run-time:": "( -- x1 x2 )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      ( <em>x<sub>1</sub> x<sub>2</sub></em> -- )\n      <p>\n      Append the run-time semantics below to the current definition.\n      </p><p>\n        \n      </p>"
                    },
                    "Run-time:": {
                        "name": "Run-time:",
                        "html": "\n\n\n      ( -- <em>x<sub>1</sub> x<sub>2</sub></em> )\n      <p>\n      Place cell pair <em>x<sub>1</sub> x<sub>2</sub></em> on the stack.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../rationale.html#rat:double:2LITERAL\">A.8.6.1.0390 2LITERAL</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.8.6.1.0390 2LITERAL -->\n      \n      Typical use:\n      <a href=\"../core/Colon.html\">:</a> <code>X</code> ...\n      <a href=\"../core/Bracket.html\">[</a> <code>x1</code> <code>x2</code> <a href=\"../right-bracket.html\">]</a> <a href=\"../double/TwoLITERAL.html\">2LITERAL</a>\n      ... <a href=\"../core/Semi.html\">;</a>\n      \n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;cd1&nbsp;<a href=\"../core/Bracket.html\">[</a>&nbsp;MAX-2INT&nbsp;<a href=\"../right-bracket.html\">]</a>&nbsp;<strong>2LITERAL</strong>&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span><br>\n      <span class=\"tt\">T{ cd1 -&gt; MAX-2INT }T</span>\n      <p>\n      <span class=\"tt\">T{ <a href=\"../double/TwoVARIABLE.html\">2VARIABLE</a>&nbsp;2v4&nbsp;<a href=\"../core/IMMEDIATE.html\">IMMEDIATE</a>&nbsp;5&nbsp;6&nbsp;2v4&nbsp;<a href=\"../core/TwoStore.html\">2!</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;cd7&nbsp;2v4&nbsp;<a href=\"../core/Bracket.html\">[</a>&nbsp;<a href=\"../core/TwoFetch.html\">2@</a>&nbsp;<a href=\"../right-bracket.html\">]</a>&nbsp;<strong>2LITERAL</strong>&nbsp;<a href=\"../core/Semi.html\">;</a>&nbsp;cd7 -&gt; 5&nbsp;6 }T</span> <br>\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;cd8&nbsp;<a href=\"../core/Bracket.html\">[</a>&nbsp;6&nbsp;7&nbsp;<a href=\"../right-bracket.html\">]</a>&nbsp;2v4&nbsp;<a href=\"../core/Bracket.html\">[</a>&nbsp;<a href=\"../core/TwoStore.html\">2!</a>&nbsp;<a href=\"../right-bracket.html\">]</a>&nbsp;<a href=\"../core/Semi.html\">;</a>&nbsp;2v4&nbsp;<a href=\"../core/TwoFetch.html\">2@</a> -&gt; 6&nbsp;7 }T</span>\n      \n      \n      </p>"
                    }
                }
            },
            "TwoROT": {
                "id": "double:2ROT",
                "number": "8.6.2.0420",
                "name": "2ROT",
                "english": "two-rote",
                "list": "DOUBLE EXT",
                "basename": "TwoROT",
                "stackEffect": {
                    "html": {
                        " ": "( <em>x<sub>1</sub> x<sub>2</sub> x<sub>3</sub> x<sub>4</sub> x<sub>5</sub> x<sub>6</sub></em> -- <em>x<sub>3</sub> x<sub>4</sub> x<sub>5</sub> x<sub>6</sub> x<sub>1</sub> x<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( x1 x2 x3 x4 x5 x6 -- x3 x4 x5 x6 x1 x2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>x<sub>1</sub> x<sub>2</sub> x<sub>3</sub> x<sub>4</sub> x<sub>5</sub> x<sub>6</sub></em> -- <em>x<sub>3</sub> x<sub>4</sub> x<sub>5</sub> x<sub>6</sub> x<sub>1</sub> x<sub>2</sub></em> )\n      <p>\n      Rotate the top three cell pairs on the stack bringing cell pair\n      <em>x<sub>1</sub> x<sub>2</sub></em> to the top of the stack.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;3.&nbsp;<strong>2ROT</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;3.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1. }T</span> <br>\n      <span class=\"tt\">T{ MAX-2INT&nbsp;MIN-2INT&nbsp;1.&nbsp;<strong>2ROT</strong> -&gt; MIN-2INT&nbsp;1.&nbsp;MAX-2INT }T</span>\n      \n      \n      "
                    }
                }
            },
            "TwoVALUE": {
                "id": "double:2VALUE",
                "number": "8.6.2.0435",
                "name": "2VALUE",
                "english": "two-value",
                "list": "DOUBLE EXT",
                "basename": "TwoVALUE",
                "stackEffect": {
                    "html": {
                        " ": "( <em>x<sub>1</sub> x<sub>2</sub> \"&lt;spaces&gt;name\"</em> -- )",
                        "name Execution:": "( -- <em>x<sub>1</sub> x<sub>2</sub></em> )",
                        "TO name Run-time:": "( <em>x<sub>1</sub> x<sub>2</sub></em> -- )"
                    },
                    "plain": {
                        " ": "( x1 x2 \"<spaces>name\" -- )",
                        "name Execution:": "( -- x1 x2 )",
                        "TO name Run-time:": "( x1 x2 -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>x<sub>1</sub> x<sub>2</sub> \"&lt;spaces&gt;name\"</em> -- )\n      <p>\n      Skip leading space delimiters.  Parse <em>name</em> delimited by a\n      space.  Create a definition for <em>name</em> with the execution\n      semantics defined below, with an initial value of <em>x<sub>1</sub> x<sub>2</sub></em>.\n      </p><p>\n      <em>name</em> is referred to as a \"two-value\".\n      </p><p>\n        \n      </p>"
                    },
                    "name Execution:": {
                        "name": "name Execution:",
                        "html": "\n\n\n      ( -- <em>x<sub>1</sub> x<sub>2</sub></em> )\n      <p>\n      Place cell pair <em>x<sub>1</sub> x<sub>2</sub></em> on the stack.  The value of\n      <em>x<sub>1</sub> x<sub>2</sub></em> is that given when <em>name</em> was created,\n      until the phrase \"<em>x<sub>1</sub> x<sub>2</sub></em> <a href=\"../core/TO.html\">TO</a> <em>name</em>\" is\n      executed, causing a new cell pair <em>x<sub>1</sub> x<sub>2</sub></em> to be assigned\n      to <em>name</em>.\n      </p><p>\n        \n      </p>"
                    },
                    "TO name Run-time:": {
                        "name": "TO name Run-time:",
                        "html": "\n\n\n      ( <em>x<sub>1</sub> x<sub>2</sub></em> -- )\n      <p>\n      Assign the cell pair <em>x<sub>1</sub> x<sub>2</sub></em> to <em>name</em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:parsing\">3.4.1 Parsing</a></strong> and <a href=\"../core/TO.html\">6.2.2295 TO</a>,\n      <a href=\"../rationale.html#rat:double:2VALUE\">A.8.6.2.0435 2VALUE</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n\n      Typical use:\n            <div class=\"quote\">\n        <div class=\"tt\">\n<a href=\"../core/Colon.html\">:</a> fn1 <a href=\"../core/Sq.html\">S\"</a> filename\" <a href=\"../core/Semi.html\">;</a> <br>\n          fn1 <strong>2VALUE</strong> myfile <br>\n          myfile <a href=\"../file/INCLUDED.html\">INCLUDED</a> <br>\n          \n          <a href=\"../core/Colon.html\">:</a> fn2 <a href=\"../core/Sq.html\">S\"</a> filename2\" <a href=\"../core/Semi.html\">;</a> <br>\n          fn2 <a href=\"../core/TO.html\">TO</a> myfile <br>\n          myfile <a href=\"../file/INCLUDED.html\">INCLUDED</a>\n          \n          </div>\n        </div>\n        \n      "
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n\n            <div class=\"rm\">\nThe implementation of <a href=\"../core/TO.html\">TO</a> to include <strong>2VALUE</strong>s\n        requires detailed knowledge of the host implementation of\n        <a href=\"../core/VALUE.html\">VALUE</a> and <a href=\"../core/TO.html\">TO</a>, which is the main reason why\n        <strong>2VALUE</strong> should be standardized.  The order in which\n        the two cells are stored in memory is not specified in the\n        definition for <strong>2VALUE</strong> but this reference implementation\n        has to assume one ordering — this is not intended to be\n        definitive.\n        <p>\n                </p><div class=\"quote\">\n          <div class=\"tt\">\n<a href=\"../core/Colon.html\">:</a> <strong>2VALUE</strong> <a href=\"../core/p.html\">(</a> x1 x2 -- ) <br>\n            &nbsp;&nbsp; <a href=\"../core/CREATE.html\">CREATE</a> <a href=\"../core/Comma.html\">,</a> <a href=\"../core/Comma.html\">,</a> <br>\n            &nbsp;&nbsp; <a href=\"../core/DOES.html\">DOES&gt;</a> <a href=\"../core/TwoFetch.html\">2@</a> <a href=\"../core/p.html\">(</a> -- x1 x2 ) <br>\n            <a href=\"../core/Semi.html\">;</a>\n            \n            </div>\n          </div>\n        <p>\n        The corresponding implementation of <a href=\"../core/TO.html\">TO</a> disregards the\n        issue that <a href=\"../core/TO.html\">TO</a> must also work for integer <a href=\"../core/VALUE.html\">VALUE</a>s\n        and locals.\n        </p><p>\n                </p><div class=\"quote\">\n          <div class=\"tt\">\n<a href=\"../core/Colon.html\">:</a> <a href=\"../core/TO.html\">TO</a> <a href=\"../core/p.html\">(</a> x1 x2 \"&lt;spaces&gt;name\" -- ) <br>\n            &nbsp;&nbsp; <a href=\"../core/Tick.html\">'</a> <a href=\"../core/toBODY.html\">&gt;BODY</a> <br>\n            &nbsp;&nbsp; <a href=\"../core/STATE.html\">STATE</a> <a href=\"../core/Fetch.html\">@</a> <a href=\"../core/IF.html\">IF</a> <br>\n            &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/POSTPONE.html\">POSTPONE</a> <a href=\"../double/TwoLITERAL.html\">2LITERAL</a> <a href=\"../core/POSTPONE.html\">POSTPONE</a> <a href=\"../core/TwoStore.html\">2!</a> <br>\n            &nbsp;&nbsp; <a href=\"../core/ELSE.html\">ELSE</a> <br>\n            &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/TwoStore.html\">2!</a> <br>\n            &nbsp;&nbsp; <a href=\"../core/THEN.html\">THEN</a> <br>\n            <a href=\"../core/Semi.html\">;</a> <a href=\"../core/IMMEDIATE.html\">IMMEDIATE</a>\n            \n            </div>\n          </div>\n          \n        </div>\n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n      <div class=\"tt\">\n<span class=\"tt\">T{ 1&nbsp;2&nbsp;<strong>2VALUE</strong>&nbsp;t2val -&gt;  }T</span> <br>\n        <span class=\"tt\">T{ t2val -&gt; 1&nbsp;2 }T</span> <br>\n        \n        <span class=\"tt\">T{ 3&nbsp;4&nbsp;<a href=\"../core/TO.html\">TO</a>&nbsp;t2val -&gt;  }T</span> <br>\n        <span class=\"tt\">T{ t2val -&gt; 3&nbsp;4 }T</span> <br>\n        \n        <a href=\"../core/Colon.html\">:</a> sett2val t2val <a href=\"../core/TwoSWAP.html\">2SWAP</a> <a href=\"../core/TO.html\">TO</a> t2val <a href=\"../core/Semi.html\">;</a> <br>\n        <span class=\"tt\">T{ 5&nbsp;6&nbsp;sett2val&nbsp;t2val -&gt; 3&nbsp;4&nbsp;5&nbsp;6 }T</span>\n        \n        \n        </div>\n      "
                    }
                }
            },
            "TwoVARIABLE": {
                "id": "double:2VARIABLE",
                "number": "8.6.1.0440",
                "name": "2VARIABLE",
                "english": "two-variable",
                "list": "DOUBLE",
                "basename": "TwoVARIABLE",
                "stackEffect": {
                    "html": {
                        " ": "( <em>\"&lt;spaces&gt;name\"</em> -- )",
                        "name Execution:": "( -- <em>a-addr</em> )"
                    },
                    "plain": {
                        " ": "( \"<spaces>name\" -- )",
                        "name Execution:": "( -- a-addr )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>\"&lt;spaces&gt;name\"</em> -- )\n      <p>\n      Skip leading space delimiters. Parse <em>name</em> delimited by a\n      space. Create a definition for <em>name</em> with the execution\n      semantics defined below. Reserve two consecutive cells of data\n      space.\n      </p><p>\n      <em>name</em> is referred to as a \"two-variable\".\n      </p><p>\n        \n      </p>"
                    },
                    "name Execution:": {
                        "name": "name Execution:",
                        "html": "\n\n\n      ( -- <em>a-addr</em> )\n      <p>\n      <em>a-addr</em> is the address of the first (lowest address)\n      cell of two consecutive cells in data space reserved by\n      <strong>2VARIABLE</strong> when it defined <em>name</em>. A program is\n      responsible for initializing the contents.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:parsing\">3.4.1 Parsing</a></strong>,\n      <a href=\"../core/VARIABLE.html\">6.1.2410 VARIABLE</a>,\n      <a href=\"../rationale.html#rat:double:2VARIABLE\">A.8.6.1.0440 2VARIABLE</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.8.6.1.0440 2VARIABLE -->\n      Typical use:\n      <strong>2VARIABLE</strong> <em>name</em>\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      <span class=\"tt\">T{ <strong>2VARIABLE</strong>&nbsp;2v1 -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ 0.&nbsp;2v1&nbsp;<a href=\"../core/TwoStore.html\">2!</a> -&gt; &nbsp;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;2v1&nbsp;<a href=\"../core/TwoFetch.html\">2@</a> -&gt; 0. }T</span> <br>\n      <span class=\"tt\">T{ -1&nbsp;-2&nbsp;2v1&nbsp;<a href=\"../core/TwoStore.html\">2!</a> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2v1&nbsp;<a href=\"../core/TwoFetch.html\">2@</a> -&gt; -1&nbsp;-2 }T</span>\n      <p>\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;cd2&nbsp;<strong>2VARIABLE</strong>&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ cd2&nbsp;2v2 -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;cd3&nbsp;2v2&nbsp;<a href=\"../core/TwoStore.html\">2!</a>&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ -2&nbsp;-1&nbsp;cd3 -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ 2v2&nbsp;<a href=\"../core/TwoFetch.html\">2@</a> -&gt; -2&nbsp;-1 }T</span>\n      </p><p>\n      <span class=\"tt\">T{ <strong>2VARIABLE</strong>&nbsp;2v3&nbsp;<a href=\"../core/IMMEDIATE.html\">IMMEDIATE</a>&nbsp;5&nbsp;6&nbsp;2v3&nbsp;<a href=\"../core/TwoStore.html\">2!</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ 2v3&nbsp;<a href=\"../core/TwoFetch.html\">2@</a> -&gt; 5&nbsp;6 }T</span>\n      \n      \n      </p>"
                    }
                }
            }
        }
    },
    "exception": {
        "name": "exception",
        "words": {
            "ABORT": {
                "id": "exception:ABORT",
                "number": "9.6.2.0670",
                "name": "ABORT",
                "english": " ",
                "list": "EXCEPTION EXT",
                "basename": "ABORT",
                "stackEffect": {
                    "html": {
                        " ": "Extend the semantics of <a href=\"../core/ABORT.html\">6.1.0670 ABORT</a> to be:\n      ( <em>i * x</em> -- )\n      ( R: <em>j * x</em> -- )"
                    },
                    "plain": {
                        " ": "Extend the semantics of <a href=\"../core/ABORT.html\">6.1.0670 ABORT to be:\n( i * x -- )\n( R: j * x -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n Extend the semantics of <a href=\"../core/ABORT.html\">6.1.0670 ABORT</a> to be:\n      ( <em>i * x</em> -- )\n      ( R: <em>j * x</em> -- )\n      <p>\n      Perform the function of <code>-1</code> <a href=\"../exception/THROW.html\">THROW</a>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/ABORT.html\">6.1.0670 ABORT</a>.\n      <p>\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n <!-- I.9.1.0875 CATCH -->\n      <a href=\"../core/Colon.html\">:</a> <strong>ABORT</strong>   -1 <a href=\"../exception/THROW.html\">THROW</a>   <a href=\"../core/Semi.html\">;</a>\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      See <a href=\"../testsuite.html#test:exception:ABORTq\">F.9.6.2.0680 ABORT\"</a>.\n      \n      \n      "
                    }
                }
            },
            "ABORTq": {
                "id": "exception:ABORTq",
                "number": "9.6.2.0680",
                "name": "ABORT\"",
                "english": "abort-quote",
                "list": "EXCEPTION EXT",
                "basename": "ABORTq",
                "stackEffect": {
                    "html": {
                        "Compilation:": "( <em>\"ccc&lt;quote&gt;\"</em> -- )",
                        "Run-time:": "( <em>i * x x<sub>1</sub></em> -- <em> |  i * x</em> )\n      ( R: <em>j * x</em> -- <em> |  j * x</em> )"
                    },
                    "plain": {
                        "Compilation:": "( \"ccc<quote>\" -- )",
                        "Run-time:": "( i * x x1 --  |  i * x )\n( R: j * x --  |  j * x )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n Extend the semantics of <a href=\"../core/ABORTq.html\">6.1.0680 ABORT\"</a> to be:\n        \n      "
                    },
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      ( <em>\"ccc&lt;quote&gt;\"</em> -- )\n      <p>\n      Parse <em>ccc</em> delimited by a <code>\"</code> (double-quote).\n      Append the run-time semantics given below to the current\n      definition.\n      </p><p>\n        \n      </p>"
                    },
                    "Run-time:": {
                        "name": "Run-time:",
                        "html": "\n\n\n      ( <em>i * x x<sub>1</sub></em> -- <em> |  i * x</em> )\n      ( R: <em>j * x</em> -- <em> |  j * x</em> )\n      <p>\n      Remove <em>x<sub>1</sub></em> from the stack. If any bit of <em>x<sub>1</sub></em>\n      is not zero, perform the function of <code>-2</code> <a href=\"../exception/THROW.html\">THROW</a>,\n      displaying <em>ccc</em> if there is no exception frame on the\n      exception stack.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:parsing\">3.4.1 Parsing</a></strong>,\n      <a href=\"../core/ABORTq.html\">6.1.0680 ABORT\"</a>.\n      <p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n      <div class=\"tt\">\n<a href=\"../core/DECIMAL.html\">DECIMAL</a> <br>\n         -1\t<a href=\"../core/CONSTANT.html\">CONSTANT</a> exc_abort <br>\n         -2 <a href=\"../core/CONSTANT.html\">CONSTANT</a> exc_abort\" <br>\n        -13 <a href=\"../core/CONSTANT.html\">CONSTANT</a> exc_undef <br>\n        <a href=\"../core/Colon.html\">:</a> t6 <a href=\"../exception/ABORT.html\">ABORT</a> <a href=\"../core/Semi.html\">;</a>\n        <p>\n        <span class=\"rm\">The 77 in <code>t10</code> is necessary for the second\n        <strong>ABORT\"</strong> test as the data stack is restored to a\n        depth of 2 when <a href=\"../exception/THROW.html\">THROW</a> is executed.  The 77 ensures\n        the top of stack value is known for the results check.</span>\n        </p><p>\n        <a href=\"../core/Colon.html\">:</a> t10 77 <a href=\"../core/SWAP.html\">SWAP</a> <strong>ABORT\"</strong> This should not be displayed\" <a href=\"../core/Semi.html\">;</a> <br>\n        <a href=\"../core/Colon.html\">:</a> c6 <a href=\"../exception/CATCH.html\">CATCH</a> <br>\n        &nbsp;&nbsp; <a href=\"../core/CASE.html\">CASE</a> exc_abort  <a href=\"../core/OF.html\">OF</a> 11 <a href=\"../core/ENDOF.html\">ENDOF</a> <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t\t exc_abort\" <a href=\"../core/OF.html\">OF</a> 12 <a href=\"../core/ENDOF.html\">ENDOF</a> <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t\t exc_undef  <a href=\"../core/OF.html\">OF</a> 13 <a href=\"../core/ENDOF.html\">ENDOF</a> <br>\n        &nbsp;&nbsp; <a href=\"../core/ENDCASE.html\">ENDCASE</a> <br>\n        <a href=\"../core/Semi.html\">;</a>\n        </p><p>\n        <span class=\"tt\">T{ 1&nbsp;2&nbsp;<a href=\"../core/Tick.html\">'</a>&nbsp;&nbsp;t6&nbsp;c6 -&gt; 1&nbsp;2&nbsp;11&nbsp; }T</span> &nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Test that ABORT is caught</span> <br>\n        <span class=\"tt\">T{ 3&nbsp;0&nbsp;<a href=\"../core/Tick.html\">'</a>&nbsp;t10&nbsp;c6 -&gt; 3&nbsp;77&nbsp;&nbsp;&nbsp; }T</span> &nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">ABORT\" does nothing</span> <br>\n        <span class=\"tt\">T{ 4&nbsp;5&nbsp;<a href=\"../core/Tick.html\">'</a>&nbsp;t10&nbsp;c6 -&gt; 4&nbsp;77&nbsp;12 }T</span> &nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">ABORT\" caught, no message</span>\n        \n        \n        </p></div>\n      "
                    }
                }
            },
            "CATCH": {
                "id": "exception:CATCH",
                "number": "9.6.1.0875",
                "name": "CATCH",
                "english": " ",
                "list": "EXCEPTION",
                "basename": "CATCH",
                "stackEffect": {
                    "html": {
                        " ": "( <em>i * x xt</em> -- <em>j * x 0  |  i * x n</em> )"
                    },
                    "plain": {
                        " ": "( i * x xt -- j * x 0  |  i * x n )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>i * x xt</em> -- <em>j * x 0  |  i * x n</em> )\n      <p>\n      Push an exception frame on the exception stack and then execute\n      the execution token <em>xt</em> (as with <a href=\"../core/EXECUTE.html\">EXECUTE</a>) in\n      such a way that control can be transferred to a point just after\n      <strong>CATCH</strong> if <a href=\"../exception/THROW.html\">THROW</a> is executed during the execution of\n      <em>xt</em>.\n      </p><p>\n      If the execution of <em>xt</em> completes normally (i.e., the\n      exception frame pushed by this <strong>CATCH</strong> is not popped by an\n      execution of <a href=\"../exception/THROW.html\">THROW</a>) pop the exception frame and return\n      zero on top of the data stack, above whatever stack items would\n      have been returned by <em>xt</em> <a href=\"../core/EXECUTE.html\">EXECUTE</a>. Otherwise,\n      the remainder of the execution semantics are given by\n      <a href=\"../exception/THROW.html\">THROW</a>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../rationale.html#rat:exception:THROW\">A.9.6.1.2275 THROW</a>.\n      <p>\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n <!-- I.9.1.0875 CATCH -->\n            <div class=\"rm\">\nThis sample implementation of <strong>CATCH</strong> uses the non-standard\n        words described below.  They or their equivalents are available in many\n        systems.  Other implementation strategies, including directly saving the\n        value of <a href=\"../core/DEPTH.html\">DEPTH</a>, are possible if such words are not available.\n        <p>\n        </p><dl class=\"desc\">\n        <dt><code>SP@</code></dt><dd> ( -- <em>addr</em> ) <br>\n        returns the address corresponding to the top of data stack.\n        <p>\n        </p></dd>\n        <dt><code>SP!</code></dt><dd> ( <em>addr</em> -- ) <br>\n        sets the stack pointer to <em>addr</em>, thus restoring the stack\n        depth to the same depth that existed just before <em>addr</em> was\n        acquired by executing <code>SP@</code>.\n        <p>\n        </p></dd>\n        <dt><code>RP@</code></dt><dd> ( -- <em>addr</em> ) <br>\n        returns the address corresponding to the top of return stack.\n        <p>\n        </p></dd>\n        <dt><code>RP!</code></dt><dd> ( <em>addr</em> -- ) <br>\n        sets the return stack pointer to <em>addr</em>, thus restoring the\n        return stack depth to the same depth that existed just before\n        <em>addr</em> was acquired by executing <code>RP@</code>.\n        </dd></dl>\n        <br class=\"clear\">\n\n        <p>\n                </p><div class=\"tt\">\n<div class=\"tabbing\">\n            <a href=\"../core/VARIABLE.html\">VARIABLE</a> HANDLER   0 HANDLER <a href=\"../core/Store.html\">!</a>   <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">last exception handler</span> <br><br>\n             <a href=\"../core/Colon.html\">:</a> <strong>CATCH</strong>   <a href=\"../core/p.html\">(</a> xt -- exception# | 0  <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">return addr on stack</span> <br>\n            &nbsp;&nbsp;&nbsp;SP@ <a href=\"../core/toR.html\">&gt;R</a>\t\t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/p.html\">(</a> xt )&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">save data stack pointer</span> <br>\n            &nbsp;&nbsp;&nbsp;HANDLER <a href=\"../core/Fetch.html\">@</a> <a href=\"../core/toR.html\">&gt;R</a>\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/p.html\">(</a> xt )&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">and previous handler</span> <br>\n            &nbsp;&nbsp;&nbsp;RP@ HANDLER <a href=\"../core/Store.html\">!</a>\t\t\t&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/p.html\">(</a> xt )&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">set current handler</span> <br>\n            &nbsp;&nbsp;&nbsp;<a href=\"../core/EXECUTE.html\">EXECUTE</a>\t\t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/p.html\">(</a> )\t  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">execute returns if no</span> THROW <br>\n            &nbsp;&nbsp;&nbsp;<a href=\"../core/Rfrom.html\">R&gt;</a> HANDLER <a href=\"../core/Store.html\">!</a>\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/p.html\">(</a> )   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">restore previous handler</span> <br>\n            &nbsp;&nbsp;&nbsp;<a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/DROP.html\">DROP</a>\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/p.html\">(</a> )   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">discard saved stack ptr</span> <br>\n            &nbsp;&nbsp;&nbsp;\t0\t\t\t\t\t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/p.html\">(</a> 0 ) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">normal completion</span> <br>\n            <a href=\"../core/Semi.html\">;</a>\n            <br>\n            \n            </div>\n          <p>\n                    </p><div class=\"rm\">\nIn a multi-tasking system, the <code>HANDLER</code> variable should be in\n            the per-task variable area (i.e., a user variable).\n            <p>\n            This sample implementation does not explicitly handle the case in\n            which <strong>CATCH</strong> has never been called (i.e., the <a href=\"../exception/ABORT.html\">ABORT</a>\n            behavior). One solution would be to execute a <strong>CATCH</strong> within\n            <a href=\"../core/QUIT.html\">QUIT</a>, so that there is always an \"exception handler of last\n            resort\" present, as shown in <a href=\"../implement.html#imp:core:QUIT\">E.6.1.2050 QUIT</a>.\n              \n            </p></div>\n          </div>\n        </div>\n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      See <a href=\"../testsuite.html#test:exception:THROW\">F.9.6.1.2275 THROW</a>.\n      \n      \n      "
                    }
                }
            },
            "THROW": {
                "id": "exception:THROW",
                "number": "9.6.1.2275",
                "name": "THROW",
                "english": " ",
                "list": "EXCEPTION",
                "basename": "THROW",
                "stackEffect": {
                    "html": {
                        " ": "( <em>k * x n</em> -- <em>k * x  |  i * x n</em> )"
                    },
                    "plain": {
                        " ": "( k * x n -- k * x  |  i * x n )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>k * x n</em> -- <em>k * x  |  i * x n</em> )\n      <p>\n      If any bits of <em>n</em> are non-zero, pop the topmost exception\n      frame from the exception stack, along with everything on the\n      return stack above that frame. Then restore the input source\n      specification in use before the corresponding <a href=\"../exception/CATCH.html\">CATCH</a>\n      and adjust the depths of all stacks defined by this standard\n      so that they are the same as the depths saved in the exception\n      frame (<em>i</em> is the same number as the <em>i</em> in the input\n      arguments to the corresponding <a href=\"../exception/CATCH.html\">CATCH</a>), put <em>n</em> on\n      top of the data stack, and transfer control to a point just after\n      the <a href=\"../exception/CATCH.html\">CATCH</a> that pushed that exception frame.\n      </p><p>\n      If the top of the stack is non zero and there is no exception\n      frame on the exception stack, the behavior is as follows:\n      </p><p>\n      If <em>n</em> is minus-one (-1), perform the function of\n      <a href=\"../core/ABORT.html\">6.1.0670 ABORT</a> (the version of <a href=\"../core/ABORT.html\">ABORT</a> in\n      the Core word set), displaying no message.\n      </p><p>\n      If <em>n</em> is minus-two, perform the function of\n      <a href=\"../core/ABORTq.html\">6.1.0680 ABORT\"</a> (the version of <a href=\"../core/ABORTq.html\">ABORT\"</a>\n      in the Core word set), displaying the characters <em>ccc</em>\n      associated with the <a href=\"../exception/ABORTq.html\">ABORT\"</a> that generated the\n      <strong>THROW</strong>.\n      </p><p>\n      Otherwise, the system may display an implementation-dependent\n      message giving information about the condition associated with\n      the <strong>THROW</strong> code <em>n</em>. Subsequently, the system shall\n      perform the function of <a href=\"../core/ABORT.html\">6.1.0670 ABORT</a> (the version\n      of <a href=\"../core/ABORT.html\">ABORT</a> in the Core word set).\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../rationale.html#rat:exception:THROW\">A.9.6.1.2275 THROW</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.9.6.1.2275 THROW -->\n      If <strong>THROW</strong> is executed with a non zero argument, the effect\n      is as if the corresponding <a href=\"../exception/CATCH.html\">CATCH</a> had returned it. In that\n      case, the stack depth is the same as it was just before <a href=\"../exception/CATCH.html\">CATCH</a>\n      began execution. The values of the <em>i * x</em> stack arguments could\n      have been modified arbitrarily during the execution of <em>xt</em>.\n      In general, nothing useful may be done with those stack items, but\n      since their number is known (because the stack depth is deterministic),\n      the application may <a href=\"../core/DROP.html\">DROP</a> them to return to a predictable\n      stack state.\n      <p>\n      Typical use:\n      \n            </p><div class=\"quote\">\n        <div class=\"tt\">\n<a href=\"../core/Colon.html\">:</a> could-fail <a href=\"../core/p.html\">(</a> -- char ) <br>\n          &nbsp;&nbsp; <a href=\"../core/KEY.html\">KEY</a> <a href=\"../core/DUP.html\">DUP</a> <a href=\"../core/BracketCHAR.html\">[CHAR]</a> Q <a href=\"../core/Equal.html\">=</a> \n          <a href=\"../core/IF.html\">IF</a>  1 <a href=\"../exception/THROW.html\">THROW</a>\n          <a href=\"../core/THEN.html\">THEN</a>\n          <a href=\"../core/Semi.html\">;</a>\n          <p>\n          <a href=\"../core/Colon.html\">:</a> do-it <a href=\"../core/p.html\">(</a> a b -- c)  \n          <a href=\"../core/TwoDROP.html\">2DROP</a> could-fail <a href=\"../core/Semi.html\">;</a>\n          </p><p>\n          <a href=\"../core/Colon.html\">:</a> try-it <a href=\"../core/p.html\">(</a> --) <br>\n          &nbsp;&nbsp; 1 2 <a href=\"../core/BracketTick.html\">[']</a> do-it  <a href=\"../exception/CATCH.html\">CATCH</a>  <a href=\"../core/IF.html\">IF</a> <br>\n          &nbsp;&nbsp;   <a href=\"../core/p.html\">(</a> x1 x2 ) <a href=\"../core/TwoDROP.html\">2DROP</a>\n          <a href=\"../core/Dotq.html\">.\"</a>  There was an exception\" <a href=\"../core/CR.html\">CR</a> <br>\n          &nbsp;&nbsp; <a href=\"../core/ELSE.html\">ELSE</a>\n          <a href=\"../core/Dotq.html\">.\"</a> The character was \" <a href=\"../core/EMIT.html\">EMIT</a> <a href=\"../core/CR.html\">CR</a> <br>\n          &nbsp;&nbsp; <a href=\"../core/THEN.html\">THEN</a> <br>\n          <a href=\"../core/Semi.html\">;</a>\n          </p><p>\n          <a href=\"../core/Semi.html\">;</a> retry-it <a href=\"../core/p.html\">(</a> -- ) <br>\n          &nbsp;&nbsp; <a href=\"../core/BEGIN.html\">BEGIN</a>  1 2 <a href=\"../core/BracketTick.html\">[']</a> do-it <a href=\"../exception/CATCH.html\">CATCH</a> \n          <a href=\"../core/WHILE.html\">WHILE</a> <br>\n          &nbsp;&nbsp;   <a href=\"../core/p.html\">(</a> x1 x2) <a href=\"../core/TwoDROP.html\">2DROP</a>\n          <a href=\"../core/Dotq.html\">.\"</a> Exception, keep trying\" <a href=\"../core/CR.html\">CR</a> <br>\n          &nbsp;&nbsp; <a href=\"../core/REPEAT.html\">REPEAT</a> <a href=\"../core/p.html\">(</a> char ) <br>\n          &nbsp;&nbsp; <a href=\"../core/Dotq.html\">.\"</a> The character was \" <a href=\"../core/EMIT.html\">EMIT</a> <a href=\"../core/CR.html\">CR</a> <br>\n          <a href=\"../core/Semi.html\">;</a>\n          \n          </p></div>\n        </div>\n      \n        \n      "
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n\n      <span class=\"rm\">This is the counter part to <a href=\"../implement.html#imp:exception:CATCH\">E.9.6.1.0875 CATCH</a>.</span>\n      <p>\n      </p><div class=\"tabbing\">\n         <a href=\"../core/Colon.html\">:</a> <strong>THROW</strong> <a href=\"../core/p.html\">(</a> ??? exception# -- ??? exception# ) <br>\n        &nbsp;&nbsp;&nbsp; <a href=\"../core/qDUP.html\">?DUP</a> <a href=\"../core/IF.html\">IF</a>\t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/p.html\">(</a> exc# )\t\t&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> 0 THROW <span class=\"rm\">is no-op</span> <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HANDLER <a href=\"../core/Fetch.html\">@</a> RP!\t\t\t\t&nbsp; <a href=\"../core/p.html\">(</a> exc# )\t\t&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">restore prev return stack</span> <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/Rfrom.html\">R&gt;</a> HANDLER <a href=\"../core/Store.html\">!</a>\t\t&nbsp;&nbsp; <a href=\"../core/p.html\">(</a> exc# )\t\t&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">restore prev handler</span> <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../core/toR.html\">&gt;R</a>\t&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/p.html\">(</a> saved-sp )\t <a href=\"../core/bs.html\">\\</a> exc# <span class=\"rm\">on return stack</span> <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SP! <a href=\"../core/DROP.html\">DROP</a> <a href=\"../core/Rfrom.html\">R&gt;</a>\t\t&nbsp;&nbsp;&nbsp; <a href=\"../core/p.html\">(</a> exc# )\t\t&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">restore stack</span> <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Return to the caller of CATCH because return</span> <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/bs.html\">\\</a> <span class=\"rm\">stack is restored to the state that existed</span> <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t<a href=\"../core/bs.html\">\\</a> <span class=\"rm\">when CATCH began execution</span> <br>\n        &nbsp;&nbsp;&nbsp; <a href=\"../core/THEN.html\">THEN</a> <br>\n        <a href=\"../core/Semi.html\">;</a>\n        <br>\n        \n        </div>\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n       <div class=\"tt\">\n<a href=\"../core/DECIMAL.html\">DECIMAL</a>\n        <p>\n        <a href=\"../core/Colon.html\">:</a> t1 9 <a href=\"../core/Semi.html\">;</a> <br>\n        <a href=\"../core/Colon.html\">:</a> c1 1 2 3 <a href=\"../core/BracketTick.html\">[']</a> t1 <a href=\"../exception/CATCH.html\">CATCH</a> <a href=\"../core/Semi.html\">;</a> <br>\n        <span class=\"tt\">T{ c1 -&gt; 1&nbsp;2&nbsp;3&nbsp;9&nbsp;0 }T</span> &nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">No THROW executed</span>\n        </p><p>\n        <a href=\"../core/Colon.html\">:</a> t2 8 0 <strong>THROW</strong> <a href=\"../core/Semi.html\">;</a> <br>\n        <a href=\"../core/Colon.html\">:</a> c2 1 2 <a href=\"../core/BracketTick.html\">[']</a> t2 <a href=\"../exception/CATCH.html\">CATCH</a> <a href=\"../core/Semi.html\">;</a> <br>\n        <span class=\"tt\">T{ c2 -&gt; 1&nbsp;2&nbsp;8&nbsp;0 }T</span> &nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">0 THROW does nothing</span>\n        </p><p>\n        <a href=\"../core/Colon.html\">:</a> t3 7 8 9 99 <strong>THROW</strong> <a href=\"../core/Semi.html\">;</a> <br>\n        <a href=\"../core/Colon.html\">:</a> c3 1 2 <a href=\"../core/BracketTick.html\">[']</a> t3 <a href=\"../exception/CATCH.html\">CATCH</a> <a href=\"../core/Semi.html\">;</a><br>\n        <span class=\"tt\">T{ c3 -&gt; 1&nbsp;2&nbsp;99 }T</span> &nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Restores stack to <a href=\"../exception/CATCH.html\">CATCH</a> depth</span>\n        </p><p>\n        <a href=\"../core/Colon.html\">:</a> t4 <a href=\"../core/OneMinus.html\">1-</a> <a href=\"../core/DUP.html\">DUP</a> <a href=\"../core/Zeromore.html\">0&gt;</a> <a href=\"../core/IF.html\">IF</a> <a href=\"../core/RECURSE.html\">RECURSE</a> <a href=\"../core/ELSE.html\">ELSE</a> 999 <strong>THROW</strong> -222 <a href=\"../core/THEN.html\">THEN</a> <a href=\"../core/Semi.html\">;</a> <br>\n        <a href=\"../core/Colon.html\">:</a> c4 3 4 5 10 <a href=\"../core/BracketTick.html\">[']</a> t4 <a href=\"../exception/CATCH.html\">CATCH</a> -111 <a href=\"../core/Semi.html\">;</a> <br>\n        <span class=\"tt\">T{ c4 -&gt; 3&nbsp;4&nbsp;5&nbsp;0&nbsp;999&nbsp;-111 }T</span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Test return stack unwinding</span>\n        </p><p>\n        <a href=\"../core/Colon.html\">:</a> t5 <a href=\"../core/TwoDROP.html\">2DROP</a> <a href=\"../core/TwoDROP.html\">2DROP</a> 9999 <strong>THROW</strong> <a href=\"../core/Semi.html\">;</a> <br>\n        <a href=\"../core/Colon.html\">:</a> c5 1 2 3 4 <a href=\"../core/BracketTick.html\">[']</a> t5 <a href=\"../exception/CATCH.html\">CATCH</a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Test depth restored correctly</span> <br>\n        &nbsp;&nbsp; <a href=\"../core/DEPTH.html\">DEPTH</a> <a href=\"../core/toR.html\">&gt;R</a> <a href=\"../core/DROP.html\">DROP</a> <a href=\"../core/TwoDROP.html\">2DROP</a> <a href=\"../core/TwoDROP.html\">2DROP</a> <a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/Semi.html\">;</a> &nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">after stack has been emptied</span> <br>\n        <span class=\"tt\">T{ c5 -&gt; 5 }T</span>\n        \n        \n        </p></div>\n      "
                    }
                }
            }
        }
    },
    "facility": {
        "name": "facility",
        "words": {
            "AT-XY": {
                "id": "facility:AT-XY",
                "number": "10.6.1.0742",
                "name": "AT-XY",
                "english": "at-x-y",
                "list": "FACILITY",
                "basename": "AT-XY",
                "stackEffect": {
                    "html": {
                        " ": "( <em>u<sub>1</sub> u<sub>2</sub></em> -- )"
                    },
                    "plain": {
                        " ": "( u1 u2 -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>u<sub>1</sub> u<sub>2</sub></em> -- )\n      <p>\n      Perform implementation-dependent steps so that the next\n      character displayed will appear in column <em>u<sub>1</sub></em>, row\n      <em>u<sub>2</sub></em> of the user output device, the upper left corner\n      of which is column zero, row zero. An ambiguous condition exists\n      if the operation cannot be performed on the user output device\n      with the specified parameters.\n      \n      </p>"
                    }
                }
            },
            "BEGIN-STRUCTURE": {
                "id": "facility:BEGIN-STRUCTURE",
                "number": "10.6.2.0763",
                "name": "BEGIN-STRUCTURE",
                "english": " ",
                "list": "FACILITY EXT",
                "basename": "BEGIN-STRUCTURE",
                "stackEffect": {
                    "html": {
                        " ": "( <em>\"&lt;spaces&gt;name\"</em> -- <em>struct-sys 0</em> )",
                        "name Execution:": "( -- <em>+n</em> )"
                    },
                    "plain": {
                        " ": "( \"<spaces>name\" -- struct-sys 0 )",
                        "name Execution:": "( -- +n )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>\"&lt;spaces&gt;name\"</em> -- <em>struct-sys 0</em> )\n      <p>\n      Skip leading space delimiters. Parse <em>name</em> delimited\n      by a space. Create a definition for <em>name</em> with the\n      execution semantics defined below.  Return a <em>struct-sys</em>\n      (zero or more implementation dependent items) that will be\n      used by <a href=\"../facility/END-STRUCTURE.html\">END-STRUCTURE</a> and an initial offset of 0.\n      </p><p>\n        \n      </p>"
                    },
                    "name Execution:": {
                        "name": "name Execution:",
                        "html": "\n\n\n      ( -- <em>+n</em> )\n      <p>\n      <em>+n</em> is the size in memory expressed in address units of\n      the data structure.  An ambiguous condition exists if\n      <em>name</em> is executed prior to the associated\n      <a href=\"../facility/END-STRUCTURE.html\">END-STRUCTURE</a> being executed.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../facility/PlusFIELD.html\">10.6.2.0135 +FIELD</a>,\n      <a href=\"../facility/END-STRUCTURE.html\">10.6.2.1336 END-STRUCTURE</a>, <br>\n      <a href=\"../rationale.html#rat:facility:BEGIN-STRUCTURE\">A.10.6.2.0763 BEGIN-STRUCTURE</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.10.6.2.---- BEGIN-STRUCTURE -->\n      There are two schools of thought regarding named data\n      structures: name first and name last.  The name last\n      school can define a named data structure as follows:\n      <p>\n            </p><div class=\"quote\">\n        <div class=\"tt\">\n0 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> initial total byte count <br>\n          &nbsp;&nbsp; 1 <a href=\"../core/CELLS.html\">CELLS</a> <a href=\"../facility/PlusFIELD.html\">+FIELD</a> p.x\t&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> A single cell filed named p.x <br>\n          &nbsp;&nbsp; 1 <a href=\"../core/CELLS.html\">CELLS</a> <a href=\"../facility/PlusFIELD.html\">+FIELD</a> p.y   &nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> A single cell field named p.y <br>\n          <a href=\"../core/CONSTANT.html\">CONSTANT</a> point &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> save structure size\n          \n          </div>\n        </div>\n      <p>\n      While the name first school would define the same data\n      structure as:\n      </p><p>\n            </p><div class=\"quote\">\n        <div class=\"tt\">\n<strong>BEGIN-STRUCTURE</strong> point  <a href=\"../core/bs.html\">\\</a> create the named structure <br>\n          &nbsp;&nbsp; 1 <a href=\"../core/CELLS.html\">CELLS</a> <a href=\"../facility/PlusFIELD.html\">+FIELD</a> p.x\t&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> A single cell filed named p.x <br>\n          &nbsp;&nbsp; 1 <a href=\"../core/CELLS.html\">CELLS</a> <a href=\"../facility/PlusFIELD.html\">+FIELD</a> p.y   &nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> A single cell field named p.y <br>\n          <a href=\"../facility/END-STRUCTURE.html\">END-STRUCTURE</a>\n          \n          </div>\n        </div>\n      <p>\n      Although many systems provide a name first structure there\n      is no common practice to the words used.  The words\n      <strong>BEGIN-STRUCTURE</strong> and <a href=\"../facility/END-STRUCTURE.html\">END-STRUCTURE</a> have been\n      defied as a means of providing a portable notation that does\n      not conflict with existing systems.\n      </p><p>\n      The field defining words (<em>x</em><code>FIELD:</code> and\n      <a href=\"../facility/PlusFIELD.html\">+FIELD</a>) are defined so they can be used by both\n      schools.  Compatibility between the two schools comes from\n      defining a new stack item <em>struct-sys</em>, which is\n      implementation dependent and can be 0 or more cells.\n      The name first school would provide an address (<em>addr</em>)\n      as the <em>struct-sys</em> parameter, while the name last\n      school would defined <em>struct-sys</em> as being empty.\n      </p><p>\n      Executing the name of the data structure, returns the size of\n      the data structure.  This allows the data stricture to be used\n      within another data structure:\n      </p><p>\n            </p><div class=\"quote\">\n        <div class=\"tt\">\n<strong>BEGIN-STRUCTURE</strong> point  <a href=\"../core/bs.html\">\\</a> -- a-addr 0 ; -- lenp <br>\n          &nbsp;&nbsp; <a href=\"../facility/FIELDColon.html\">FIELD:</a> p.x\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> -- a-addr cell <br>\n          &nbsp;&nbsp; <a href=\"../facility/FIELDColon.html\">FIELD:</a> p.y      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> -- a-addr cell*2 <br>\n          <a href=\"../facility/END-STRUCTURE.html\">END-STRUCTURE</a> <br>\n          <strong>BEGIN-STRUCTURE</strong> rect  &nbsp;&nbsp;&nbsp;<a href=\"../core/bs.html\">\\</a> -- a-addr 0 ; -- lenr <br>\n          &nbsp;&nbsp; point <a href=\"../facility/PlusFIELD.html\">+FIELD</a> r.tlhc   &nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> -- a-addr cell*2 <br>\n          &nbsp;&nbsp; point <a href=\"../facility/PlusFIELD.html\">+FIELD</a> r.brhc   &nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> -- a-addr cell*4 <br>\n          <a href=\"../facility/END-STRUCTURE.html\">END-STRUCTURE</a>\n          \n          </div>\n        </div>\n      <p>\n        \n      </p>"
                    },
                    "Alignment:": {
                        "name": "Alignment:",
                        "html": "\n\n  In practice, structures are used for two different purposes\n      with incompatible requirements:\n      <ol style=\"list-style-type: decimal\">\n      <li> For collecting related internal-use data into a\n      convenient \"package\" that can be referred to by a\n      single \"handle\". For this use, alignment is important,\n      so that efficient native fetch and store instructions\n      can be used.\n      <p>\n      </p></li>\n      <li> For mapping external data structures like hardware\n      register maps and protocol packets. For this use,\n      automatic alignment is inappropriate, because the\n      alignment of the external data structure often doesn't\n      match the rules for a given processor.\n      </li>\n</ol>\n      <p>\n      Many languages cater for the first use, but ignore the\n      second.  This leads to various customized solutions, usage\n      requirements, portability problems, bugs, etc.\n      <a href=\"../facility/PlusFIELD.html\">+FIELD</a> is defined to be non-aligning, while the\n      named field defining words (<em>x</em><code>FIELD:</code>) are\n      aligning.  This is intentional and allows for both uses.\n      </p><p>\n      The standard currently defines an aligned field defining\n      word for each of the standard data types:\n      </p><p>\n      </p><div class=\"center\">\n\n        <table class=\"center\">\n        <tbody><tr valign=\"top\"><td class=\"r\"><a href=\"../facility/CFIELDColon.html\">CFIELD:</a>\t\t\t\t\t</td><td>a character </td></tr>\n        <tr valign=\"top\"><td class=\"r\"><a href=\"../facility/FIELDColon.html\">FIELD:</a>\t\t\t\t\t</td><td>a native integer (single cell) </td></tr>\n        <tr valign=\"top\"><td class=\"r\"><a href=\"../floating/FFIELDColon.html\">FFIELD:</a>\t</td><td>a native float </td></tr>\n        <tr valign=\"top\"><td class=\"r\"><a href=\"../floating/SFFIELDColon.html\">SFFIELD:</a>\t</td><td>a 32 bit float </td></tr>\n        <tr valign=\"top\"><td class=\"r\"><a href=\"../floating/DFFIELDColon.html\">DFFIELD:</a>\t</td><td>a 64 bit float\n        </td></tr></tbody></table>\n        \n        </div>\n      <p>\n      Although this is a sufficient set, most systems provide\n      facilities to define field defining words for standard\n      data types.\n        \n      </p>"
                    },
                    "Future:": {
                        "name": "Future:",
                        "html": "\n\n  The following cannot be defined until the required addressing\n      has been defined. The names should be considered reserved\n      until then.\n      <p>\n      </p><div class=\"center\">\n\n        <table class=\"center\">\n        <tbody><tr valign=\"top\"><td class=\"r\"><code>BFIELD:</code> </td><td>1 byte (8 bit) field </td></tr>\n        <tr valign=\"top\"><td class=\"r\"><code>WFIELD:</code> </td><td>16 bit field </td></tr>\n        <tr valign=\"top\"><td class=\"r\"><code>LFIELD:</code> </td><td>32 bit field </td></tr>\n        <tr valign=\"top\"><td class=\"r\"><code>XFIELD:</code> </td><td>64 bit field </td></tr>\n        <tr valign=\"top\"><td class=\"r\"></td></tr>\n        </tbody></table>\n        \n        </div>\n        \n      "
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n <!-- I.10.6.2.---- BEGIN-STRUCTURE -->\n      <span class=\"rm\">Begin definition of a new structure. Use in the\n      form <strong>BEGIN-STRUCTURE</strong> &lt;<em>name</em>&gt;.  At run time\n      &lt;<em>name</em>&gt; returns the size of the structure.</span>\n      <p>\n      <a href=\"../core/Colon.html\">:</a> <strong>BEGIN-STRUCTURE</strong>&nbsp;&nbsp;<a href=\"../core/bs.html\">\\</a> -- addr 0 ; -- size <br>\n      &nbsp;&nbsp; <a href=\"../core/CREATE.html\">CREATE</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/HERE.html\">HERE</a> 0  0 <a href=\"../core/Comma.html\">,</a> &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a>  mark stack, lay dummy <br>\n      &nbsp;&nbsp; <a href=\"../core/DOES.html\">DOES&gt;</a> <a href=\"../core/Fetch.html\">@</a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/bs.html\">\\</a> -- rec-len <br>\n      <a href=\"../core/Semi.html\">;</a>\n      \n      \n      </p>"
                    }
                }
            },
            "CFIELDColon": {
                "id": "facility:CFIELD:",
                "number": "10.6.2.0893",
                "name": "CFIELD:",
                "english": "c-field-colon",
                "list": "FACILITY EXT",
                "basename": "CFIELDColon",
                "stackEffect": {
                    "html": {
                        " ": "( <em>n<sub>1</sub> \"&lt;spaces&gt;name\"</em> -- <em>n<sub>2</sub></em> )",
                        "name Execution:": "( <em>addr<sub>1</sub></em> -- <em>addr<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( n1 \"<spaces>name\" -- n2 )",
                        "name Execution:": "( addr1 -- addr2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>n<sub>1</sub> \"&lt;spaces&gt;name\"</em> -- <em>n<sub>2</sub></em> )\n      <p>\n      Skip leading space delimiters. Parse <em>name</em> delimited by\n      a space. <em>Offset</em> is the first character aligned value\n      greater than or equal to <em>n<sub>1</sub></em>.  <em>n<sub>2</sub> = offset + 1</em>\n      character.\n      </p><p>\n      Create a definition for <em>name</em> with the execution semantics\n      given below.\n      </p><p>\n        \n      </p>"
                    },
                    "name Execution:": {
                        "name": "name Execution:",
                        "html": "\n\n\n      ( <em>addr<sub>1</sub></em> -- <em>addr<sub>2</sub></em> )\n      <p>\n      Add the <em>offset</em> calculated during the compile-time action to\n      <em>addr<sub>1</sub></em> giving the address <em>addr<sub>2</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../facility/PlusFIELD.html\">10.6.2.0135 +FIELD</a>,\n      <a href=\"../facility/BEGIN-STRUCTURE.html\">10.6.2.0763 BEGIN-STRUCTURE</a>, <br>\n      <a href=\"../facility/END-STRUCTURE.html\">10.6.2.1336 END-STRUCTURE</a>,\n      <a href=\"../rationale.html#rat:facility:FIELD:\">A.10.6.2.1518 FIELD:</a>.\n      \n      "
                    }
                }
            },
            "EKEY": {
                "id": "facility:EKEY",
                "number": "10.6.2.1305",
                "name": "EKEY",
                "english": "e-key",
                "list": "FACILITY EXT",
                "basename": "EKEY",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>x</em> )"
                    },
                    "plain": {
                        " ": "( -- x )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>x</em> )\n      <p>\n      Receive one keyboard event <em>x</em>. The encoding of keyboard events\n      is implementation defined.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/KEY.html\">6.1.1750 KEY</a>,\n      <a href=\"../facility/KEYq.html\">10.6.1.1755 KEY?</a>,\n      <a href=\"../rationale.html#rat:facility:EKEY\">A.10.6.2.1305 EKEY</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.10.6.2.1305 EKEY -->\n      For some input devices, such as keyboards, more information is\n      available than can be returned by a single execution of\n      <a href=\"../core/KEY.html\">KEY</a>.  <strong>EKEY</strong> provides a standard word to access a\n      system-dependent set of events.\n      <p>\n      <strong>EKEY</strong> and <a href=\"../facility/EKEYq.html\">EKEY?</a> are implementation specific; no\n      assumption can be made regarding the interaction between the\n      pairs <strong>EKEY</strong>/<a href=\"../facility/EKEYq.html\">EKEY?</a> and <a href=\"../core/KEY.html\">KEY</a>/<a href=\"../facility/KEYq.html\">KEY?</a>.\n      This standard does not define a timing relationship between\n      <a href=\"../facility/KEYq.html\">KEY?</a> and <a href=\"../facility/EKEYq.html\">EKEY?</a>.  Undefined results may be\n      avoided by using only one pairing of <a href=\"../core/KEY.html\">KEY</a>/ <a href=\"../facility/KEYq.html\">KEY?</a>\n      or <strong>EKEY</strong>/<a href=\"../facility/EKEYq.html\">EKEY?</a> in a program for each input\n      stream.\n      </p><p>\n      <strong>EKEY</strong> assumes no particular numerical correspondence\n      between particular event code values and the values\n      representing standard characters.  On some systems, this may\n      allow two separate keys that correspond to the same standard\n      character to be distinguished from one another.  A standard\n      program may only interpret the results of <strong>EKEY</strong> via the\n      translation words provided for that purpose\n      (<a href=\"../facility/EKEYtoCHAR.html\">EKEY&gt;CHAR</a> and <a href=\"../facility/EKEYtoFKEY.html\">EKEY&gt;FKEY</a>).\n      </p><p>\n      See: <a href=\"../rationale.html#rat:core:KEY\">A.6.1.1750 KEY</a>, <a href=\"../facility/EKEYtoCHAR.html\">10.6.2.1306 EKEY&gt;CHAR</a> and\n      <a href=\"../facility/EKEYtoFKEY.html\">10.6.2.1306.40 EKEY&gt;FKEY</a>.\n      \n      \n      </p>"
                    }
                }
            },
            "EKEYq": {
                "id": "facility:EKEYq",
                "number": "10.6.2.1307",
                "name": "EKEY?",
                "english": "e-key-question",
                "list": "FACILITY EXT",
                "basename": "EKEYq",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>flag</em> )"
                    },
                    "plain": {
                        " ": "( -- flag )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>flag</em> )\n      <p>\n      If a keyboard event is available, return <em>true</em>. Otherwise\n      return <em>false</em>. The event shall be returned by the next\n      execution of <a href=\"../facility/EKEY.html\">EKEY</a>.\n      </p><p>\n      After <strong>EKEY?</strong> returns with a value of <em>true</em>,\n      subsequent executions of <strong>EKEY?</strong> prior to the execution of\n      <a href=\"../core/KEY.html\">KEY</a>, <a href=\"../facility/KEYq.html\">KEY?</a> or <a href=\"../facility/EKEY.html\">EKEY</a> also return\n      <em>true</em>, referring to the same event.\n      \n      </p>"
                    }
                }
            },
            "EKEYtoCHAR": {
                "id": "facility:EKEYtoCHAR",
                "number": "10.6.2.1306",
                "name": "EKEY>CHAR",
                "english": "e-key-to-char",
                "list": "FACILITY EXT",
                "basename": "EKEYtoCHAR",
                "stackEffect": {
                    "html": {
                        " ": "( <em>x</em> -- <em>x false  |  char true</em> )"
                    },
                    "plain": {
                        " ": "( x -- x false  |  char true )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>x</em> -- <em>x false  |  char true</em> )\n      <p>\n      If the keyboard event <em>x</em> corresponds to a character in the\n      implementation-defined character set, return that character and\n      <em>true</em>. Otherwise return <em>x</em> and <em>false</em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../rationale.html#rat:facility:EKEYtoCHAR\">A.10.6.2.1306 EKEY&gt;CHAR</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.10.6.2.1306 EKEY>CHAR -->\n      <strong>EKEY&gt;CHAR</strong> translates a keyboard event into the\n      corresponding member of the character set, if such a\n      correspondence exists for that event.\n      <p>\n      It is possible that several different keyboard events may\n      correspond to the same character, and other keyboard events\n      may correspond to no character.\n      \n      \n      </p>"
                    }
                }
            },
            "EKEYtoFKEY": {
                "id": "facility:EKEYtoFKEY",
                "number": "10.6.2.1306.40",
                "name": "EKEY>FKEY",
                "english": "e-key-to-f-key",
                "list": "FACILITY EXT",
                "basename": "EKEYtoFKEY",
                "stackEffect": {
                    "html": {
                        " ": "( <em>x</em> -- <em>u flag</em> )"
                    },
                    "plain": {
                        " ": "( x -- u flag )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>x</em> -- <em>u flag</em> )\n      <p>\n      If the keyboard event <em>x</em> corresponds to a keypress in the\n      implementation-defined special key set, return that key's id\n      <em>u</em> and <em>true</em>. Otherwise return <em>x</em> and\n      <em>false</em>.\n      </p><p>\n        \n      </p>"
                    },
                    "Note:": {
                        "name": "Note:",
                        "html": "\n\n\n      The keyboard may lack some of the keys, or the capability to report\n      them. Programs should be written such that they also work (although\n      less conveniently or with less functionality) if these key numbers\n      cannot be produced.\n      <p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n\n      <a href=\"../facility/EKEY.html\">10.6.2.1305 EKEY</a>,\n      <a href=\"../facility/K-ALT-MASK.html\">10.6.2.1740.01 K-ALT-MASK</a>,\n      <a href=\"../facility/K-CTRL-MASK.html\">10.6.2.1740.02 K-CTRL-MASK</a>, \n      <a href=\"../facility/K-DELETE.html\">10.6.2.1740.03 K-DELETE</a>,\n      <a href=\"../facility/K-DOWN.html\">10.6.2.1740.04 K-DOWN</a>,\n      <a href=\"../facility/K-END.html\">10.6.2.1740.05 K-END</a>, \n      <a href=\"../facility/K-FOne.html\">10.6.2.1740.06 K-F1</a>,\n      <a href=\"../facility/K-FOneZero.html\">10.6.2.1740.07 K-F10</a>,\n      <a href=\"../facility/K-FOneOne.html\">10.6.2.1740.08 K-F11</a>, \n      <a href=\"../facility/K-FOneTwo.html\">10.6.2.1740.09 K-F12</a>,\n      <a href=\"../facility/K-FTwo.html\">10.6.2.1740.10 K-F2</a>,\n      <a href=\"../facility/K-F3.html\">10.6.2.1740.11 K-F3</a>, \n      <a href=\"../facility/K-F4.html\">10.6.2.1740.12 K-F4</a>,\n      <a href=\"../facility/K-F5.html\">10.6.2.1740.13 K-F5</a>,\n      <a href=\"../facility/K-F6.html\">10.6.2.1740.14 K-F6</a>, \n      <a href=\"../facility/K-F7.html\">10.6.2.1740.15 K-F7</a>,\n      <a href=\"../facility/K-F8.html\">10.6.2.1740.16 K-F8</a>,\n      <a href=\"../facility/K-F9.html\">10.6.2.1740.17 K-F9</a>, \n      <a href=\"../facility/K-HOME.html\">10.6.2.1740.18 K-HOME</a>,\n      <a href=\"../facility/K-INSERT.html\">10.6.2.1740.19 K-INSERT</a>,\n      <a href=\"../facility/K-LEFT.html\">10.6.2.1740.20 K-LEFT</a>, \n      <a href=\"../facility/K-NEXT.html\">10.6.2.1740.21 K-NEXT</a>,\n      <a href=\"../facility/K-PRIOR.html\">10.6.2.1740.22 K-PRIOR</a>,\n      <a href=\"../facility/K-RIGHT.html\">10.6.2.1740.23 K-RIGHT</a>, \n      <a href=\"../facility/K-SHIFT-MASK.html\">10.6.2.1740.24 K-SHIFT-MASK</a>,\n      <a href=\"../facility/K-UP.html\">10.6.2.1740.25 K-UP</a>, \n      <a href=\"../rationale.html#rat:facility:EKEYtoFKEY\">A.10.6.2.1306.40 EKEY&gt;FKEY</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.10.6.2.---- EKEY>FKEY -->\n      <a href=\"../facility/EKEY.html\">EKEY</a> produces an abstract cell type for a keyboard\n      event (e.g., a keyboard scan code).  <strong>EKEY&gt;FKEY</strong> checks\n      if such an event corresponds to a special (non-graphic) key\n      press, and if so, returns a code for the special key press.\n      The encoding of special keys (returned by <strong>EKEY&gt;FKEY</strong>)\n      may be different from the encoding of these keys as keyboard\n      events (input to <strong>EKEY&gt;FKEY</strong>).\n      <p>\n      Typical Use:\n      </p><p>\n            </p><div class=\"quote\">\n\n        ... <a href=\"../facility/EKEY.html\">EKEY</a> <strong>EKEY&gt;FKEY</strong> <a href=\"../core/IF.html\">IF</a> <br>\n        &nbsp;&nbsp; <a href=\"../core/CASE.html\">CASE</a> <br>\n        &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../facility/K-UP.html\">K-UP</a> <a href=\"../core/OF.html\">OF</a> ... <a href=\"../core/ENDOF.html\">ENDOF</a> <br>\n        &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../facility/K-FOne.html\">K-F1</a> <a href=\"../core/OF.html\">OF</a> ... <a href=\"../core/ENDOF.html\">ENDOF</a> <br>\n        &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../facility/K-LEFT.html\">K-LEFT</a> <a href=\"../facility/K-SHIFT-MASK.html\">K-SHIFT-MASK</a> <a href=\"../core/OR.html\">OR</a>\n        <a href=\"../facility/K-CTRL-MASK.html\">K-CTRL-MASK</a> <a href=\"../core/OR.html\">OR</a>\n        <a href=\"../core/OF.html\">OF</a> ... <a href=\"../core/ENDOF.html\">ENDOF</a> <br>\n        &nbsp;&nbsp;&nbsp;&nbsp; ... <br>\n        &nbsp;&nbsp; <a href=\"../core/ENDCASE.html\">ENDCASE</a> <br>\n        <a href=\"../core/ELSE.html\">ELSE</a> <br>\n        &nbsp;&nbsp; ... <br>\n        <a href=\"../core/THEN.html\">THEN</a>\n        \n        </div>\n      <p>\n      The codes for the special keys are system-dependent, but this\n      standard provides words for getting the key codes for a number\n      of keys:\n      </p><p>\n      </p><div class=\"center\">\n\n        <table class=\"center\">\n        <tbody><tr valign=\"top\"><td colspan=\"5\"><hr></td></tr>\n        <tr valign=\"top\"><td>Word </td><td>Key </td><td class=\"c\">&nbsp;&nbsp;&nbsp;&nbsp; </td><td>Word </td><td>Key </td></tr>\n        <tr valign=\"top\"><td colspan=\"5\"><hr></td></tr>\n        <tr valign=\"top\"><td><a href=\"../facility/K-FOne.html\">K-F1</a>\t\t</td><td>F1\t</td><td class=\"c\"></td><td><a href=\"../facility/K-LEFT.html\">K-LEFT</a>\t</td><td>cursor left\t</td></tr>\n        <tr valign=\"top\"><td><a href=\"../facility/K-FTwo.html\">K-F2</a>\t\t</td><td>F2\t</td><td class=\"c\"></td><td><a href=\"../facility/K-RIGHT.html\">K-RIGHT</a>\t</td><td>cursor right\t</td></tr>\n        <tr valign=\"top\"><td><a href=\"../facility/K-F3.html\">K-F3</a>\t\t</td><td>F3\t</td><td class=\"c\"></td><td><a href=\"../facility/K-UP.html\">K-UP</a>\t\t</td><td>cursor up\t\t</td></tr>\n        <tr valign=\"top\"><td><a href=\"../facility/K-F4.html\">K-F4</a>\t\t</td><td>F4\t</td><td class=\"c\"></td><td><a href=\"../facility/K-DOWN.html\">K-DOWN</a>\t</td><td>cursor down\t</td></tr>\n        <tr valign=\"top\"><td><a href=\"../facility/K-F5.html\">K-F5</a>\t\t</td><td>F5\t</td><td class=\"c\"></td><td><a href=\"../facility/K-HOME.html\">K-HOME</a>\t</td><td>home or Pos1\t</td></tr>\n        <tr valign=\"top\"><td><a href=\"../facility/K-F6.html\">K-F6</a>\t\t</td><td>F6\t</td><td class=\"c\"></td><td><a href=\"../facility/K-END.html\">K-END</a>\t</td><td>End\t\t\t</td></tr>\n        <tr valign=\"top\"><td><a href=\"../facility/K-F7.html\">K-F7</a>\t\t</td><td>F7\t</td><td class=\"c\"></td><td><a href=\"../facility/K-PRIOR.html\">K-PRIOR</a>\t</td><td>PgUp or Prior\t</td></tr>\n        <tr valign=\"top\"><td><a href=\"../facility/K-F8.html\">K-F8</a>\t\t</td><td>F8\t</td><td class=\"c\"></td><td><a href=\"../facility/K-NEXT.html\">K-NEXT</a>\t</td><td>PgDn or Next\t</td></tr>\n        <tr valign=\"top\"><td><a href=\"../facility/K-F9.html\">K-F9</a>\t\t</td><td>F9\t</td><td class=\"c\"></td><td><a href=\"../facility/K-INSERT.html\">K-INSERT</a>\t</td><td>Insert\t\t</td></tr>\n        <tr valign=\"top\"><td><a href=\"../facility/K-FOneZero.html\">K-F10</a>\t</td><td>F10\t</td><td class=\"c\"></td><td><a href=\"../facility/K-DELETE.html\">K-DELETE</a>\t</td><td>Delete\t\t</td></tr>\n        <tr valign=\"top\"><td><a href=\"../facility/K-FOneOne.html\">K-F11</a>\t</td><td>F11\t</td></tr>\n        <tr valign=\"top\"><td><a href=\"../facility/K-FOneTwo.html\">K-F12</a>\t</td><td>F12\t</td></tr>\n        <tr valign=\"top\"><td colspan=\"5\"><hr></td></tr>\n        <tr valign=\"top\"><td></td></tr>\n        </tbody></table>\n        \n        </div>\n      <p>\n      In addition, you can get codes for shifted variants of these\n      keys by <a href=\"../core/OR.html\">OR</a>ing with <a href=\"../facility/K-SHIFT-MASK.html\">K-SHIFT-MASK</a>, <a href=\"../facility/K-CTRL-MASK.html\">K-CTRL-MASK</a>\n      and/or <a href=\"../facility/K-ALT-MASK.html\">K-ALT-MASK</a>, e.g. <a href=\"../facility/K-CTRL-MASK.html\">K-CTRL-MASK</a>\n      <a href=\"../facility/K-ALT-MASK.html\">K-ALT-MASK</a> <a href=\"../core/OR.html\">OR</a> <a href=\"../facility/K-DELETE.html\">K-DELETE</a> <a href=\"../core/OR.html\">OR</a>.\n      The masks for the shift keys are:\n      </p><p>\n      </p><div class=\"center\">\n\n        <table class=\"center\">\n        <tbody><tr valign=\"top\"><td colspan=\"2\"><hr></td></tr>\n        <tr valign=\"top\"><td>Word \t\t\t\t</td><td>Key\t</td></tr>\n        <tr valign=\"top\"><td colspan=\"2\"><hr></td></tr>\n        <tr valign=\"top\"><td><a href=\"../facility/K-SHIFT-MASK.html\">K-SHIFT-MASK</a>\t</td><td>Shift\t</td></tr>\n        <tr valign=\"top\"><td><a href=\"../facility/K-CTRL-MASK.html\">K-CTRL-MASK</a>\t</td><td>Ctrl\t</td></tr>\n        <tr valign=\"top\"><td><a href=\"../facility/K-ALT-MASK.html\">K-ALT-MASK</a>\t</td><td>Alt\t</td></tr>\n        <tr valign=\"top\"><td colspan=\"2\"><hr></td></tr>\n        <tr valign=\"top\"><td></td></tr>\n        </tbody></table>\n        \n        </div>\n      <p>\n      Note that not all of these keys are available on all systems, and not\n      all combinations of keys and shift keys are available.  Therefore\n      programs should be written such that they continue to work (although\n      less conveniently or with less functionality) if these key combinations\n      cannot be produced.\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n <!-- I.10.6.2.--- EKEY>FKEY -->\n      <span class=\"rm\">The implementation is closely tied to the implementation\n      of <a href=\"../facility/EKEY.html\">EKEY</a> and therefore unportable.</span>\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.10.6.2.---- EKEY>FKEY -->\n            <div class=\"tt\">\n<a href=\"../core/Colon.html\">:</a> TFKEY\" <a href=\"../core/p.html\">(</a> \"ccc&lt;quote&gt;\" -- u flag ) <br>\n        &nbsp;&nbsp;&nbsp; <a href=\"../core/CR.html\">CR</a> <a href=\"../core/Dotq.html\">.\"</a> Please press \" <a href=\"../core/POSTPONE.html\">POSTPONE</a> <a href=\"../core/Dotq.html\">.\"</a> <a href=\"../facility/EKEY.html\">EKEY</a> <strong>EKEY&gt;FKEY</strong> <a href=\"../core/Semi.html\">;</a>\n        <p>\n        <span class=\"tt\">T{ TFKEY\"&nbsp;&lt;left&gt;\"&nbsp; -&gt; <a href=\"../facility/K-LEFT.html\">K-LEFT</a>&nbsp;&nbsp;&lt;TRUE&gt; }T</span> <br>\n        <span class=\"tt\">T{ TFKEY\"&nbsp;&lt;right&gt;\" -&gt; <a href=\"../facility/K-RIGHT.html\">K-RIGHT</a>&nbsp;&lt;TRUE&gt; }T</span> <br>\n        <span class=\"tt\">T{ TFKEY\"&nbsp;&lt;up&gt;\"&nbsp;&nbsp;&nbsp; -&gt; <a href=\"../facility/K-UP.html\">K-UP</a>&nbsp;&nbsp;&nbsp;&nbsp;&lt;TRUE&gt; }T</span> <br>\n        <span class=\"tt\">T{ TFKEY\"&nbsp;&lt;down&gt;\"&nbsp; -&gt; <a href=\"../facility/K-DOWN.html\">K-DOWN</a>&nbsp;&nbsp;&lt;TRUE&gt; }T</span> <br>\n        <span class=\"tt\">T{ TFKEY\"&nbsp;&lt;home&gt;\"&nbsp; -&gt; <a href=\"../facility/K-HOME.html\">K-HOME</a>&nbsp;&nbsp;&lt;TRUE&gt; }T</span> <br>\n        <span class=\"tt\">T{ TFKEY\"&nbsp;&lt;end&gt;\"&nbsp;&nbsp; -&gt; <a href=\"../facility/K-END.html\">K-END</a>&nbsp;&nbsp;&nbsp;&lt;TRUE&gt; }T</span> <br>\n        <span class=\"tt\">T{ TFKEY\"&nbsp;&lt;prior&gt;\" -&gt; <a href=\"../facility/K-PRIOR.html\">K-PRIOR</a>&nbsp;&lt;TRUE&gt; }T</span> <br>\n        <span class=\"tt\">T{ TFKEY\"&nbsp;&lt;next&gt;\"&nbsp; -&gt; <a href=\"../facility/K-NEXT.html\">K-NEXT</a>&nbsp;&nbsp;&lt;TRUE&gt; }T</span>\n        </p><p>\n        <span class=\"tt\">T{ TFKEY\"&nbsp;&lt;F1&gt;\"&nbsp; -&gt; <a href=\"../facility/K-FOne.html\">K-F1</a>&nbsp;&nbsp;&lt;TRUE&gt; }T</span> <br>\n        <span class=\"tt\">T{ TFKEY\"&nbsp;&lt;F2&gt;\"&nbsp; -&gt; <a href=\"../facility/K-FTwo.html\">K-F2</a>&nbsp;&nbsp;&lt;TRUE&gt; }T</span> <br>\n        <span class=\"tt\">T{ TFKEY\"&nbsp;&lt;F3&gt;\"&nbsp; -&gt; <a href=\"../facility/K-F3.html\">K-F3</a>&nbsp;&nbsp;&lt;TRUE&gt; }T</span> <br>\n        <span class=\"tt\">T{ TFKEY\"&nbsp;&lt;F4&gt;\"&nbsp; -&gt; <a href=\"../facility/K-F4.html\">K-F4</a>&nbsp;&nbsp;&lt;TRUE&gt; }T</span> <br>\n        <span class=\"tt\">T{ TFKEY\"&nbsp;&lt;F5&gt;\"&nbsp; -&gt; <a href=\"../facility/K-F5.html\">K-F5</a>&nbsp;&nbsp;&lt;TRUE&gt; }T</span> <br>\n        <span class=\"tt\">T{ TFKEY\"&nbsp;&lt;F6&gt;\"&nbsp; -&gt; <a href=\"../facility/K-F6.html\">K-F6</a>&nbsp;&nbsp;&lt;TRUE&gt; }T</span> <br>\n        <span class=\"tt\">T{ TFKEY\"&nbsp;&lt;F7&gt;\"&nbsp; -&gt; <a href=\"../facility/K-F7.html\">K-F7</a>&nbsp;&nbsp;&lt;TRUE&gt; }T</span> <br>\n        <span class=\"tt\">T{ TFKEY\"&nbsp;&lt;F8&gt;\"&nbsp; -&gt; <a href=\"../facility/K-F8.html\">K-F8</a>&nbsp;&nbsp;&lt;TRUE&gt; }T</span> <br>\n        <span class=\"tt\">T{ TFKEY\"&nbsp;&lt;F9&gt;\"&nbsp; -&gt; <a href=\"../facility/K-F9.html\">K-F9</a>&nbsp;&nbsp;&lt;TRUE&gt; }T</span> <br>\n        <span class=\"tt\">T{ TFKEY\"&nbsp;&lt;F10&gt;\" -&gt; <a href=\"../facility/K-FOneZero.html\">K-F10</a>&nbsp;&lt;TRUE&gt; }T</span> <br>\n        <span class=\"tt\">T{ TFKEY\"&nbsp;&lt;F11&gt;\" -&gt; <a href=\"../facility/K-FOneOne.html\">K-F11</a>&nbsp;&lt;TRUE&gt; }T</span> <br>\n        <span class=\"tt\">T{ TFKEY\"&nbsp;&lt;F11&gt;\" -&gt; <a href=\"../facility/K-FOneTwo.html\">K-F12</a>&nbsp;&lt;TRUE&gt; }T</span>\n        </p><p>\n        <span class=\"tt\">T{ TFKEY\"&nbsp;&lt;shift-left&gt;\" -&gt; <a href=\"../facility/K-LEFT.html\">K-LEFT</a>&nbsp;<a href=\"../facility/K-SHIFT-MASK.html\">K-SHIFT-MASK</a>&nbsp;<a href=\"../core/OR.html\">OR</a>&nbsp;&lt;TRUE&gt; }T</span> <br>\n        <span class=\"tt\">T{ TFKEY\"&nbsp;&lt;ctrl-left&gt;\"&nbsp; -&gt; <a href=\"../facility/K-LEFT.html\">K-LEFT</a>&nbsp;<a href=\"../facility/K-CTRL-MASK.html\">K-CTRL-MASK</a>&nbsp;&nbsp;<a href=\"../core/OR.html\">OR</a>&nbsp;&lt;TRUE&gt; }T</span> <br>\n        <span class=\"tt\">T{ TFKEY\"&nbsp;&lt;alt-left&gt;\"&nbsp;&nbsp; -&gt; <a href=\"../facility/K-LEFT.html\">K-LEFT</a>&nbsp;<a href=\"../facility/K-ALT-MASK.html\">K-ALT-MASK</a>&nbsp;&nbsp;&nbsp;<a href=\"../core/OR.html\">OR</a>&nbsp;&lt;TRUE&gt; }T</span>\n        </p><p>\n        <span class=\"tt\">T{ TFKEY\"&nbsp;&lt;a&gt;\"&nbsp;<a href=\"../core/SWAP.html\">SWAP</a>&nbsp;<a href=\"../facility/EKEYtoCHAR.html\">EKEY&gt;CHAR</a> -&gt; &lt;FALSE&gt;&nbsp;CHAR&nbsp;a&nbsp;&lt;TRUE&gt; }T</span> <br>\n        \n        \n        </p></div>\n      "
                    }
                }
            },
            "EMITq": {
                "id": "facility:EMITq",
                "number": "10.6.2.1325",
                "name": "EMIT?",
                "english": "emit-question",
                "list": "FACILITY EXT",
                "basename": "EMITq",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>flag</em> )"
                    },
                    "plain": {
                        " ": "( -- flag )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>flag</em> )\n      <p>\n      <em>flag</em> is true if the user output device is ready to\n      accept data and the execution of <a href=\"../core/EMIT.html\">EMIT</a> in place of\n      <strong>EMIT?</strong> would not have suffered an indefinite delay. If\n      the device status is indeterminate, <em>flag</em> is true.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../rationale.html#rat:facility:EMITq\">A.10.6.2.1325 EMIT?</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.10.6.2.1325 EMIT? -->\n      An indefinite delay is a device related condition, such as\n      printer off-line, that requires operator intervention before\n      the device will accept new data.\n      \n      \n      "
                    }
                }
            },
            "END-STRUCTURE": {
                "id": "facility:END-STRUCTURE",
                "number": "10.6.2.1336",
                "name": "END-STRUCTURE",
                "english": " ",
                "list": "FACILITY EXT",
                "basename": "END-STRUCTURE",
                "stackEffect": {
                    "html": {
                        " ": "( <em>struct-sys +n</em> -- )"
                    },
                    "plain": {
                        " ": "( struct-sys +n -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>struct-sys +n</em> -- )\n      <p>\n      Terminate definition of a structure started by\n      <a href=\"../facility/BEGIN-STRUCTURE.html\">BEGIN-STRUCTURE</a>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../facility/PlusFIELD.html\">10.6.2.0135 +FIELD</a>,\n      <a href=\"../facility/BEGIN-STRUCTURE.html\">10.6.2.0763 BEGIN-STRUCTURE</a>.\n      <p>\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n <!-- I.10.6.2.---- END-STRUCTURE -->\n      <span class=\"rm\">Terminate definition of a structure.</span>\n      <p>\n      <a href=\"../core/Colon.html\">:</a> <strong>END-STRUCTURE</strong>&nbsp;&nbsp;<a href=\"../core/bs.html\">\\</a> addr n -- <br>\n      &nbsp;&nbsp; <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../core/Store.html\">!</a> <a href=\"../core/Semi.html\">;</a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/bs.html\">\\</a> set len\n      \n      \n      </p>"
                    }
                }
            },
            "FIELDColon": {
                "id": "facility:FIELD:",
                "number": "10.6.2.1518",
                "name": "FIELD:",
                "english": "field-colon",
                "list": "FACILITY EXT",
                "basename": "FIELDColon",
                "stackEffect": {
                    "html": {
                        " ": "( <em>n<sub>1</sub> \"&lt;spaces&gt;name\"</em> -- <em>n<sub>2</sub></em> )",
                        "name Execution:": "( <em>addr<sub>1</sub></em> -- <em>addr<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( n1 \"<spaces>name\" -- n2 )",
                        "name Execution:": "( addr1 -- addr2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>n<sub>1</sub> \"&lt;spaces&gt;name\"</em> -- <em>n<sub>2</sub></em> )\n      <p>\n      Skip leading space delimiters. Parse <em>name</em> delimited by\n      a space. <em>Offset</em> is the first cell aligned value greater\n      than or equal to <em>n<sub>1</sub></em>.  <em>n<sub>2</sub> = offset + 1</em> cell.\n      </p><p>\n      Create a definition for <em>name</em> with the execution semantics\n      given below.\n      </p><p>\n        \n      </p>"
                    },
                    "name Execution:": {
                        "name": "name Execution:",
                        "html": "\n\n\n      ( <em>addr<sub>1</sub></em> -- <em>addr<sub>2</sub></em> )\n      <p>\n      Add the <em>offset</em> calculated during the compile-time action\n      to <em>addr<sub>1</sub></em> giving the address <em>addr<sub>2</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../facility/PlusFIELD.html\">10.6.2.0135 +FIELD</a>,\n      <a href=\"../facility/BEGIN-STRUCTURE.html\">10.6.2.0763 BEGIN-STRUCTURE</a>, <br>\n      <a href=\"../facility/END-STRUCTURE.html\">10.6.2.1336 END-STRUCTURE</a>,\n      <a href=\"../rationale.html#rat:facility:FIELD:\">A.10.6.2.1518 FIELD:</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n\n      Create an aligned single-cell field in a data structure.\n      <p>\n      The various <em>x</em><code>FIELD:</code> words provide for different\n      alignment and size allocation.\n      </p><p>\n      The <em>x</em><code>FIELD:</code> words could be defined as:\n      </p><p>\n      </p><div class=\"tabbing\">\n        &nbsp;&nbsp;&nbsp; <a href=\"../core/Colon.html\">:</a> <strong>FIELD:</strong>   &nbsp;&nbsp;&nbsp;( n1 \"name\" -- n2 ; addr1 -- addr2 )&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/ALIGNED.html\">ALIGNED</a>    1 <a href=\"../core/CELLS.html\">CELLS</a>    <a href=\"../facility/PlusFIELD.html\">+FIELD</a> <a href=\"../core/Semi.html\">;</a> <br>\n        &nbsp;&nbsp;&nbsp; <a href=\"../core/Colon.html\">:</a> <a href=\"../facility/CFIELDColon.html\">CFIELD:</a>  &nbsp;&nbsp;( n1 \"name\" -- n2 ; addr1 -- addr2 )&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;                   1 <a href=\"../core/CHARS.html\">CHARS</a>   &nbsp; <a href=\"../facility/PlusFIELD.html\">+FIELD</a> <a href=\"../core/Semi.html\">;</a> <br>\n        \n        &nbsp;&nbsp; <a href=\"../core/Colon.html\">:</a> <a href=\"../floating/FFIELDColon.html\">FFIELD:</a>  &nbsp;&nbsp;( n1 \"name\" -- n2 ; addr1 -- addr2 )&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../floating/FALIGNED.html\">FALIGNED</a>   1 <a href=\"../floating/FLOATS.html\">FLOATS</a>   <a href=\"../facility/PlusFIELD.html\">+FIELD</a> <a href=\"../core/Semi.html\">;</a> <br>\n        &nbsp;&nbsp;&nbsp; <a href=\"../core/Colon.html\">:</a> <a href=\"../floating/SFFIELDColon.html\">SFFIELD:</a> &nbsp;( n1 \"name\" -- n2 ; addr1 -- addr2 )&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../floating/SFALIGNED.html\">SFALIGNED</a>  1 <a href=\"../floating/SFLOATS.html\">SFLOATS</a>  <a href=\"../facility/PlusFIELD.html\">+FIELD</a> <a href=\"../core/Semi.html\">;</a> <br>\n        &nbsp;&nbsp;&nbsp; <a href=\"../core/Colon.html\">:</a> <a href=\"../floating/DFFIELDColon.html\">DFFIELD:</a> &nbsp;( n1 \"name\" -- n2 ; addr1 -- addr2 )&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../floating/DFALIGNED.html\">DFALIGNED</a>  1 <a href=\"../floating/DFLOATS.html\">DFLOATS</a>  <a href=\"../facility/PlusFIELD.html\">+FIELD</a> <a href=\"../core/Semi.html\">;</a>\n        \n        <br>\n        \n        </div>\n      \n      \n      "
                    }
                }
            },
            "K-ALT-MASK": {
                "id": "facility:K-ALT-MASK",
                "number": "10.6.2.1740.01",
                "name": "K-ALT-MASK",
                "english": " ",
                "list": "FACILITY EXT",
                "basename": "K-ALT-MASK",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>u</em> )"
                    },
                    "plain": {
                        " ": "( -- u )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>u</em> )\n      <p>\n      Mask for the <span class=\"sc\">Alt</span> key, that can be <a href=\"../core/OR.html\">OR</a>ed with the\n      key value to produce a value that the sequence <a href=\"../facility/EKEY.html\">EKEY</a>\n      <a href=\"../facility/EKEYtoFKEY.html\">EKEY&gt;FKEY</a> may produce when the user presses the\n      corresponding key combination.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../facility/EKEYtoFKEY.html\">10.6.2.1306.40 EKEY&gt;FKEY</a>,\n      <a href=\"../rationale.html#rat:facility:EKEYtoFKEY\">A.10.6.2.1306.40 EKEY&gt;FKEY</a>.\n      \n      "
                    }
                }
            },
            "K-CTRL-MASK": {
                "id": "facility:K-CTRL-MASK",
                "number": "10.6.2.1740.02",
                "name": "K-CTRL-MASK",
                "english": " ",
                "list": "FACILITY EXT",
                "basename": "K-CTRL-MASK",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>u</em> )"
                    },
                    "plain": {
                        " ": "( -- u )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>u</em> )\n      <p>\n      Mask for the <span class=\"sc\">Ctrl</span> key, that can be <a href=\"../core/OR.html\">OR</a>ed with the\n      key value to produce a value that the sequence <a href=\"../facility/EKEY.html\">EKEY</a>\n      <a href=\"../facility/EKEYtoFKEY.html\">EKEY&gt;FKEY</a> may produce when the user presses the\n      corresponding key combination.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../facility/EKEYtoFKEY.html\">10.6.2.1306.40 EKEY&gt;FKEY</a>,\n      <a href=\"../rationale.html#rat:facility:EKEYtoFKEY\">A.10.6.2.1306.40 EKEY&gt;FKEY</a>.\n      \n      "
                    }
                }
            },
            "K-DELETE": {
                "id": "facility:K-DELETE",
                "number": "10.6.2.1740.03",
                "name": "K-DELETE",
                "english": " ",
                "list": "FACILITY EXT",
                "basename": "K-DELETE",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>u</em> )"
                    },
                    "plain": {
                        " ": "( -- u )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>u</em> )\n      <p>\n      Leaves the value <em>u</em> that the sequence <a href=\"../facility/EKEY.html\">EKEY</a>\n      <a href=\"../facility/EKEYtoFKEY.html\">EKEY&gt;FKEY</a> would produce when the user presses the\n      \"Delete\" key.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../facility/EKEYtoFKEY.html\">10.6.2.1306.40 EKEY&gt;FKEY</a>,\n      <a href=\"../rationale.html#rat:facility:EKEYtoFKEY\">A.10.6.2.1306.40 EKEY&gt;FKEY</a>.\n      \n      "
                    }
                }
            },
            "K-DOWN": {
                "id": "facility:K-DOWN",
                "number": "10.6.2.1740.04",
                "name": "K-DOWN",
                "english": " ",
                "list": "FACILITY EXT",
                "basename": "K-DOWN",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>u</em> )"
                    },
                    "plain": {
                        " ": "( -- u )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>u</em> )\n      <p>\n      Leaves the value <em>u</em> that the sequence <a href=\"../facility/EKEY.html\">EKEY</a>\n      <a href=\"../facility/EKEYtoFKEY.html\">EKEY&gt;FKEY</a> would produce when the user presses the\n      \"cursor down\" key.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../facility/EKEYtoFKEY.html\">10.6.2.1306.40 EKEY&gt;FKEY</a>,\n      <a href=\"../rationale.html#rat:facility:EKEYtoFKEY\">A.10.6.2.1306.40 EKEY&gt;FKEY</a>.\n      \n      "
                    }
                }
            },
            "K-END": {
                "id": "facility:K-END",
                "number": "10.6.2.1740.05",
                "name": "K-END",
                "english": " ",
                "list": "FACILITY EXT",
                "basename": "K-END",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>u</em> )"
                    },
                    "plain": {
                        " ": "( -- u )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>u</em> )\n      <p>\n      Leaves the value <em>u</em> that the sequence <a href=\"../facility/EKEY.html\">EKEY</a>\n      <a href=\"../facility/EKEYtoFKEY.html\">EKEY&gt;FKEY</a> would produce when the user presses the\n      \"End\" key.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../facility/EKEYtoFKEY.html\">10.6.2.1306.40 EKEY&gt;FKEY</a>,\n      <a href=\"../rationale.html#rat:facility:EKEYtoFKEY\">A.10.6.2.1306.40 EKEY&gt;FKEY</a>.\n      \n      "
                    }
                }
            },
            "K-F3": {
                "id": "facility:K-F3",
                "number": "10.6.2.1740.11",
                "name": "K-F3",
                "english": "k-f-3",
                "list": "FACILITY EXT",
                "basename": "K-F3",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>u</em> )"
                    },
                    "plain": {
                        " ": "( -- u )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>u</em> )\n      <p>\n      Leaves the value <em>u</em> that the sequence <a href=\"../facility/EKEY.html\">EKEY</a>\n      <a href=\"../facility/EKEYtoFKEY.html\">EKEY&gt;FKEY</a> would produce when the user presses the\n      \"F3\" key.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../facility/EKEYtoFKEY.html\">10.6.2.1306.40 EKEY&gt;FKEY</a>,\n      <a href=\"../rationale.html#rat:facility:EKEYtoFKEY\">A.10.6.2.1306.40 EKEY&gt;FKEY</a>.\n      \n      "
                    }
                }
            },
            "K-F4": {
                "id": "facility:K-F4",
                "number": "10.6.2.1740.12",
                "name": "K-F4",
                "english": "k-f-4",
                "list": "FACILITY EXT",
                "basename": "K-F4",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>u</em> )"
                    },
                    "plain": {
                        " ": "( -- u )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>u</em> )\n      <p>\n      Leaves the value <em>u</em> that the sequence <a href=\"../facility/EKEY.html\">EKEY</a>\n      <a href=\"../facility/EKEYtoFKEY.html\">EKEY&gt;FKEY</a> would produce when the user presses the\n      \"F4\" key.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../facility/EKEYtoFKEY.html\">10.6.2.1306.40 EKEY&gt;FKEY</a>,\n      <a href=\"../rationale.html#rat:facility:EKEYtoFKEY\">A.10.6.2.1306.40 EKEY&gt;FKEY</a>.\n      \n      "
                    }
                }
            },
            "K-F5": {
                "id": "facility:K-F5",
                "number": "10.6.2.1740.13",
                "name": "K-F5",
                "english": "k-f-5",
                "list": "FACILITY EXT",
                "basename": "K-F5",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>u</em> )"
                    },
                    "plain": {
                        " ": "( -- u )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>u</em> )\n      <p>\n      Leaves the value <em>u</em> that the sequence <a href=\"../facility/EKEY.html\">EKEY</a>\n      <a href=\"../facility/EKEYtoFKEY.html\">EKEY&gt;FKEY</a> would produce when the user presses the\n      \"F5\" key.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../facility/EKEYtoFKEY.html\">10.6.2.1306.40 EKEY&gt;FKEY</a>,\n      <a href=\"../rationale.html#rat:facility:EKEYtoFKEY\">A.10.6.2.1306.40 EKEY&gt;FKEY</a>.\n      \n      "
                    }
                }
            },
            "K-F6": {
                "id": "facility:K-F6",
                "number": "10.6.2.1740.14",
                "name": "K-F6",
                "english": "k-f-6",
                "list": "FACILITY EXT",
                "basename": "K-F6",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>u</em> )"
                    },
                    "plain": {
                        " ": "( -- u )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>u</em> )\n      <p>\n      Leaves the value <em>u</em> that the sequence <a href=\"../facility/EKEY.html\">EKEY</a>\n      <a href=\"../facility/EKEYtoFKEY.html\">EKEY&gt;FKEY</a> would produce when the user presses the\n      \"F6\" key.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../facility/EKEYtoFKEY.html\">10.6.2.1306.40 EKEY&gt;FKEY</a>,\n      <a href=\"../rationale.html#rat:facility:EKEYtoFKEY\">A.10.6.2.1306.40 EKEY&gt;FKEY</a>.\n      \n      "
                    }
                }
            },
            "K-F7": {
                "id": "facility:K-F7",
                "number": "10.6.2.1740.15",
                "name": "K-F7",
                "english": "k-f-7",
                "list": "FACILITY EXT",
                "basename": "K-F7",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>u</em> )"
                    },
                    "plain": {
                        " ": "( -- u )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>u</em> )\n      <p>\n      Leaves the value <em>u</em> that the sequence <a href=\"../facility/EKEY.html\">EKEY</a>\n      <a href=\"../facility/EKEYtoFKEY.html\">EKEY&gt;FKEY</a> would produce when the user presses the\n      \"F7\" key.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../facility/EKEYtoFKEY.html\">10.6.2.1306.40 EKEY&gt;FKEY</a>,\n      <a href=\"../rationale.html#rat:facility:EKEYtoFKEY\">A.10.6.2.1306.40 EKEY&gt;FKEY</a>.\n      \n      "
                    }
                }
            },
            "K-F8": {
                "id": "facility:K-F8",
                "number": "10.6.2.1740.16",
                "name": "K-F8",
                "english": "k-f-8",
                "list": "FACILITY EXT",
                "basename": "K-F8",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>u</em> )"
                    },
                    "plain": {
                        " ": "( -- u )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>u</em> )\n      <p>\n      Leaves the value <em>u</em> that the sequence <a href=\"../facility/EKEY.html\">EKEY</a>\n      <a href=\"../facility/EKEYtoFKEY.html\">EKEY&gt;FKEY</a> would produce when the user presses the\n      \"F8\" key.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../facility/EKEYtoFKEY.html\">10.6.2.1306.40 EKEY&gt;FKEY</a>,\n      <a href=\"../rationale.html#rat:facility:EKEYtoFKEY\">A.10.6.2.1306.40 EKEY&gt;FKEY</a>.\n      \n      "
                    }
                }
            },
            "K-F9": {
                "id": "facility:K-F9",
                "number": "10.6.2.1740.17",
                "name": "K-F9",
                "english": "k-f-9",
                "list": "FACILITY EXT",
                "basename": "K-F9",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>u</em> )"
                    },
                    "plain": {
                        " ": "( -- u )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>u</em> )\n      <p>\n      Leaves the value <em>u</em> that the sequence <a href=\"../facility/EKEY.html\">EKEY</a>\n      <a href=\"../facility/EKEYtoFKEY.html\">EKEY&gt;FKEY</a> would produce when the user presses the\n      \"F9\" key.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../facility/EKEYtoFKEY.html\">10.6.2.1306.40 EKEY&gt;FKEY</a>,\n      <a href=\"../rationale.html#rat:facility:EKEYtoFKEY\">A.10.6.2.1306.40 EKEY&gt;FKEY</a>.\n      \n      "
                    }
                }
            },
            "K-FOne": {
                "id": "facility:K-F1",
                "number": "10.6.2.1740.06",
                "name": "K-F1",
                "english": "k-f-1",
                "list": "FACILITY EXT",
                "basename": "K-FOne",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>u</em> )"
                    },
                    "plain": {
                        " ": "( -- u )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>u</em> )\n      <p>\n      Leaves the value <em>u</em> that the sequence <a href=\"../facility/EKEY.html\">EKEY</a>\n      <a href=\"../facility/EKEYtoFKEY.html\">EKEY&gt;FKEY</a> would produce when the user presses the\n      \"F1\" key.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../facility/EKEYtoFKEY.html\">10.6.2.1306.40 EKEY&gt;FKEY</a>,\n      <a href=\"../rationale.html#rat:facility:EKEYtoFKEY\">A.10.6.2.1306.40 EKEY&gt;FKEY</a>.\n      \n      "
                    }
                }
            },
            "K-FOneOne": {
                "id": "facility:K-F11",
                "number": "10.6.2.1740.08",
                "name": "K-F11",
                "english": "k-f-11",
                "list": "FACILITY EXT",
                "basename": "K-FOneOne",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>u</em> )"
                    },
                    "plain": {
                        " ": "( -- u )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>u</em> )\n      <p>\n      Leaves the value <em>u</em> that the sequence <a href=\"../facility/EKEY.html\">EKEY</a>\n      <a href=\"../facility/EKEYtoFKEY.html\">EKEY&gt;FKEY</a> would produce when the user presses the\n      \"F11\" key.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../facility/EKEYtoFKEY.html\">10.6.2.1306.40 EKEY&gt;FKEY</a>,\n      <a href=\"../rationale.html#rat:facility:EKEYtoFKEY\">A.10.6.2.1306.40 EKEY&gt;FKEY</a>.\n      \n      "
                    }
                }
            },
            "K-FOneTwo": {
                "id": "facility:K-F12",
                "number": "10.6.2.1740.09",
                "name": "K-F12",
                "english": "k-f-12",
                "list": "FACILITY EXT",
                "basename": "K-FOneTwo",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>u</em> )"
                    },
                    "plain": {
                        " ": "( -- u )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>u</em> )\n      <p>\n      Leaves the value <em>u</em> that the sequence <a href=\"../facility/EKEY.html\">EKEY</a>\n      <a href=\"../facility/EKEYtoFKEY.html\">EKEY&gt;FKEY</a> would produce when the user presses the\n      \"F12\" key.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../facility/EKEYtoFKEY.html\">10.6.2.1306.40 EKEY&gt;FKEY</a>,\n      <a href=\"../rationale.html#rat:facility:EKEYtoFKEY\">A.10.6.2.1306.40 EKEY&gt;FKEY</a>.\n      \n      "
                    }
                }
            },
            "K-FOneZero": {
                "id": "facility:K-F10",
                "number": "10.6.2.1740.07",
                "name": "K-F10",
                "english": "k-f-10",
                "list": "FACILITY EXT",
                "basename": "K-FOneZero",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>u</em> )"
                    },
                    "plain": {
                        " ": "( -- u )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>u</em> )\n      <p>\n      Leaves the value <em>u</em> that the sequence <a href=\"../facility/EKEY.html\">EKEY</a>\n      <a href=\"../facility/EKEYtoFKEY.html\">EKEY&gt;FKEY</a> would produce when the user presses the\n      \"F10\" key.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../facility/EKEYtoFKEY.html\">10.6.2.1306.40 EKEY&gt;FKEY</a>,\n      <a href=\"../rationale.html#rat:facility:EKEYtoFKEY\">A.10.6.2.1306.40 EKEY&gt;FKEY</a>.\n      \n      "
                    }
                }
            },
            "K-FTwo": {
                "id": "facility:K-F2",
                "number": "10.6.2.1740.10",
                "name": "K-F2",
                "english": "k-f-2",
                "list": "FACILITY EXT",
                "basename": "K-FTwo",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>u</em> )"
                    },
                    "plain": {
                        " ": "( -- u )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>u</em> )\n      <p>\n      Leaves the value <em>u</em> that the sequence <a href=\"../facility/EKEY.html\">EKEY</a>\n      <a href=\"../facility/EKEYtoFKEY.html\">EKEY&gt;FKEY</a> would produce when the user presses the\n      \"F2\" key.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../facility/EKEYtoFKEY.html\">10.6.2.1306.40 EKEY&gt;FKEY</a>,\n      <a href=\"../rationale.html#rat:facility:EKEYtoFKEY\">A.10.6.2.1306.40 EKEY&gt;FKEY</a>.\n      \n      "
                    }
                }
            },
            "K-HOME": {
                "id": "facility:K-HOME",
                "number": "10.6.2.1740.18",
                "name": "K-HOME",
                "english": " ",
                "list": "FACILITY EXT",
                "basename": "K-HOME",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>u</em> )"
                    },
                    "plain": {
                        " ": "( -- u )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>u</em> )\n      <p>\n      Leaves the value <em>u</em> that the sequence <a href=\"../facility/EKEY.html\">EKEY</a>\n      <a href=\"../facility/EKEYtoFKEY.html\">EKEY&gt;FKEY</a> would produce when the user presses the\n      \"home\" or \"Pos1\" key.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../facility/EKEYtoFKEY.html\">10.6.2.1306.40 EKEY&gt;FKEY</a>,\n      <a href=\"../rationale.html#rat:facility:EKEYtoFKEY\">A.10.6.2.1306.40 EKEY&gt;FKEY</a>.\n      \n      "
                    }
                }
            },
            "K-INSERT": {
                "id": "facility:K-INSERT",
                "number": "10.6.2.1740.19",
                "name": "K-INSERT",
                "english": " ",
                "list": "FACILITY EXT",
                "basename": "K-INSERT",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>u</em> )"
                    },
                    "plain": {
                        " ": "( -- u )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>u</em> )\n      <p>\n      Leaves the value <em>u</em> that the sequence <a href=\"../facility/EKEY.html\">EKEY</a>\n      <a href=\"../facility/EKEYtoFKEY.html\">EKEY&gt;FKEY</a> would produce when the user presses the\n      \"Insert\" key.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../facility/EKEYtoFKEY.html\">10.6.2.1306.40 EKEY&gt;FKEY</a>,\n      <a href=\"../rationale.html#rat:facility:EKEYtoFKEY\">A.10.6.2.1306.40 EKEY&gt;FKEY</a>.\n      \n      "
                    }
                }
            },
            "K-LEFT": {
                "id": "facility:K-LEFT",
                "number": "10.6.2.1740.20",
                "name": "K-LEFT",
                "english": " ",
                "list": "FACILITY EXT",
                "basename": "K-LEFT",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>u</em> )"
                    },
                    "plain": {
                        " ": "( -- u )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>u</em> )\n      <p>\n      Leaves the value <em>u</em> that the sequence <a href=\"../facility/EKEY.html\">EKEY</a>\n      <a href=\"../facility/EKEYtoFKEY.html\">EKEY&gt;FKEY</a> would produce when the user presses the\n      \"cursor left\" key.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../facility/EKEYtoFKEY.html\">10.6.2.1306.40 EKEY&gt;FKEY</a>,\n      <a href=\"../rationale.html#rat:facility:EKEYtoFKEY\">A.10.6.2.1306.40 EKEY&gt;FKEY</a>.\n      \n      "
                    }
                }
            },
            "K-NEXT": {
                "id": "facility:K-NEXT",
                "number": "10.6.2.1740.21",
                "name": "K-NEXT",
                "english": " ",
                "list": "FACILITY EXT",
                "basename": "K-NEXT",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>u</em> )"
                    },
                    "plain": {
                        " ": "( -- u )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>u</em> )\n      <p>\n      Leaves the value <em>u</em> that the sequence <a href=\"../facility/EKEY.html\">EKEY</a>\n      <a href=\"../facility/EKEYtoFKEY.html\">EKEY&gt;FKEY</a> would produce when the user presses the\n      \"PgDn\" (Page Down) or \"Next\" key.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../facility/EKEYtoFKEY.html\">10.6.2.1306.40 EKEY&gt;FKEY</a>,\n      <a href=\"../rationale.html#rat:facility:EKEYtoFKEY\">A.10.6.2.1306.40 EKEY&gt;FKEY</a>.\n      \n      "
                    }
                }
            },
            "K-PRIOR": {
                "id": "facility:K-PRIOR",
                "number": "10.6.2.1740.22",
                "name": "K-PRIOR",
                "english": " ",
                "list": "FACILITY EXT",
                "basename": "K-PRIOR",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>u</em> )"
                    },
                    "plain": {
                        " ": "( -- u )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>u</em> )\n      <p>\n      Leaves the value <em>u</em> that the sequence <a href=\"../facility/EKEY.html\">EKEY</a>\n      <a href=\"../facility/EKEYtoFKEY.html\">EKEY&gt;FKEY</a> would produce when the user presses the\n      \"PgUp\" (Page Up) or \"Prior\" key.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../facility/EKEYtoFKEY.html\">10.6.2.1306.40 EKEY&gt;FKEY</a>,\n      <a href=\"../rationale.html#rat:facility:EKEYtoFKEY\">A.10.6.2.1306.40 EKEY&gt;FKEY</a>.\n      \n      "
                    }
                }
            },
            "K-RIGHT": {
                "id": "facility:K-RIGHT",
                "number": "10.6.2.1740.23",
                "name": "K-RIGHT",
                "english": " ",
                "list": "FACILITY EXT",
                "basename": "K-RIGHT",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>u</em> )"
                    },
                    "plain": {
                        " ": "( -- u )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>u</em> )\n      <p>\n      Leaves the value <em>u</em> that the sequence <a href=\"../facility/EKEY.html\">EKEY</a>\n      <a href=\"../facility/EKEYtoFKEY.html\">EKEY&gt;FKEY</a> would produce when the user presses the\n      \"cursor right\" key.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../facility/EKEYtoFKEY.html\">10.6.2.1306.40 EKEY&gt;FKEY</a>,\n      <a href=\"../rationale.html#rat:facility:EKEYtoFKEY\">A.10.6.2.1306.40 EKEY&gt;FKEY</a>.\n      \n      "
                    }
                }
            },
            "K-SHIFT-MASK": {
                "id": "facility:K-SHIFT-MASK",
                "number": "10.6.2.1740.24",
                "name": "K-SHIFT-MASK",
                "english": " ",
                "list": "FACILITY EXT",
                "basename": "K-SHIFT-MASK",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>u</em> )"
                    },
                    "plain": {
                        " ": "( -- u )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>u</em> )\n      <p>\n      Mask for the <span class=\"sc\">Shift</span> key, that can be <a href=\"../core/OR.html\">OR</a>ed with the\n      key value to produce a value that the sequence <a href=\"../facility/EKEY.html\">EKEY</a>\n      <a href=\"../facility/EKEYtoFKEY.html\">EKEY&gt;FKEY</a> may produce when the user presses the\n      corresponding key combination.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../facility/EKEYtoFKEY.html\">10.6.2.1306.40 EKEY&gt;FKEY</a>,\n      <a href=\"../rationale.html#rat:facility:EKEYtoFKEY\">A.10.6.2.1306.40 EKEY&gt;FKEY</a>.\n      \n      "
                    }
                }
            },
            "K-UP": {
                "id": "facility:K-UP",
                "number": "10.6.2.1740.25",
                "name": "K-UP",
                "english": " ",
                "list": "FACILITY EXT",
                "basename": "K-UP",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>u</em> )"
                    },
                    "plain": {
                        " ": "( -- u )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>u</em> )\n      <p>\n      Leaves the value <em>u</em> that the sequence <a href=\"../facility/EKEY.html\">EKEY</a>\n      <a href=\"../facility/EKEYtoFKEY.html\">EKEY&gt;FKEY</a> would produce when the user presses the\n      \"cursor up\" key.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../facility/EKEYtoFKEY.html\">10.6.2.1306.40 EKEY&gt;FKEY</a>,\n      <a href=\"../rationale.html#rat:facility:EKEYtoFKEY\">A.10.6.2.1306.40 EKEY&gt;FKEY</a>.\n      \n      "
                    }
                }
            },
            "KEYq": {
                "id": "facility:KEYq",
                "number": "10.6.1.1755",
                "name": "KEY?",
                "english": "key-question",
                "list": "FACILITY",
                "basename": "KEYq",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>flag</em> )"
                    },
                    "plain": {
                        " ": "( -- flag )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>flag</em> )\n      <p>\n      If a character is available, return <em>true</em>. Otherwise,\n      return <em>false</em>. If non-character keyboard events are\n      available before the first valid character, they are discarded\n      and are subsequently unavailable. The character shall be\n      returned by the next execution of <a href=\"../core/KEY.html\">KEY</a>.\n      </p><p>\n      After <strong>KEY?</strong> returns with a value of <em>true</em>,\n      subsequent executions of <strong>KEY?</strong> prior to the execution\n      of <a href=\"../core/KEY.html\">KEY</a> or <a href=\"../facility/EKEY.html\">EKEY</a> also return <em>true</em>,\n      without discarding keyboard events.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../rationale.html#rat:facility:KEYq\">A.10.6.1.1755 KEY?</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.10.6.1.1755 KEY? -->\n      The committee has gone around several times on the\n      stack effects. Whatever is decided will violate somebody's\n      practice and penalize some machine. This way doesn't interfere\n      with type-ahead on some systems, while requiring the\n      implementation of a single-character buffer on machines where\n      polling the keyboard inevitably results in the destruction of\n      the character.\n      <p>\n      Use of <a href=\"../core/KEY.html\">KEY</a> or <strong>KEY?</strong> indicates that the\n      application does not wish to process non-character events,\n      so they are discarded, in anticipation of eventually receiving\n      a valid character. Applications wishing to handle non-character\n      events must use <a href=\"../facility/EKEY.html\">EKEY</a> and <a href=\"../facility/EKEYq.html\">EKEY?</a>. It is possible\n      to mix uses of <strong>KEY?</strong>/<a href=\"../core/KEY.html\">KEY</a> and\n      <a href=\"../facility/EKEYq.html\">EKEY?</a>/<a href=\"../facility/EKEY.html\">EKEY</a> within a single application, but\n      the application must use <strong>KEY?</strong> and <a href=\"../core/KEY.html\">KEY</a> only\n      when it wishes to discard non-character events until a valid\n      character is received.\n      \n      \n      </p>"
                    }
                }
            },
            "MS": {
                "id": "facility:MS",
                "number": "10.6.2.1905",
                "name": "MS",
                "english": " ",
                "list": "FACILITY EXT",
                "basename": "MS",
                "stackEffect": {
                    "html": {
                        " ": "( <em>u</em> -- )"
                    },
                    "plain": {
                        " ": "( u -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>u</em> -- )\n      <p>\n      Wait at least <em>u</em> milliseconds.\n      </p><p>\n        \n      </p>"
                    },
                    "Note:": {
                        "name": "Note:",
                        "html": "\n\n\n      The actual length and variability of the time period depends\n      upon the implementation-defined resolution of the system clock\n      and upon other system and computer characteristics beyond the\n      scope of this standard.\n      <p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../rationale.html#rat:facility:MS\">A.10.6.2.1905 MS</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.10.6.2.1905 MS -->\n      Although their frequencies vary, every system has a clock.\n      Since many programs need to time intervals, this word is\n      offered. Use of milliseconds as an internal unit of time is\n      a practical \"least common denominator\" external unit. It\n      is assumed implementors will use \"clock ticks\" (whatever\n      size they are) as an internal unit and convert as appropriate.\n      \n      \n      "
                    }
                }
            },
            "PAGE": {
                "id": "facility:PAGE",
                "number": "10.6.1.2005",
                "name": "PAGE",
                "english": " ",
                "list": "FACILITY",
                "basename": "PAGE",
                "stackEffect": {
                    "html": {
                        " ": "( -- )"
                    },
                    "plain": {
                        " ": "( -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- )\n      <p>\n      Move to another page for output. Actual function depends on the\n      output device. On a terminal, <strong>PAGE</strong> clears the screen and\n      resets the cursor position to the upper left corner. On a\n      printer, <strong>PAGE</strong> performs a form feed.\n      \n      </p>"
                    }
                }
            },
            "PlusFIELD": {
                "id": "facility:+FIELD",
                "number": "10.6.2.0135",
                "name": "+FIELD",
                "english": "plus-field",
                "list": "FACILITY EXT",
                "basename": "PlusFIELD",
                "stackEffect": {
                    "html": {
                        " ": "( <em>n<sub>1</sub> n<sub>2</sub> \"&lt;spaces&gt;name\"</em> -- <em>n<sub>3</sub></em> )",
                        "name Execution:": "( <em>addr<sub>1</sub></em> -- <em>addr<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( n1 n2 \"<spaces>name\" -- n3 )",
                        "name Execution:": "( addr1 -- addr2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>n<sub>1</sub> n<sub>2</sub> \"&lt;spaces&gt;name\"</em> -- <em>n<sub>3</sub></em> )\n      <p>\n      Skip leading space delimiters.  Parse <em>name</em> delimited\n      by a space.  Create a definition for <em>name</em> with the\n      execution semantics defined below.  Return <em>n<sub>3</sub></em> =\n      <em>n<sub>1</sub></em> + <em>n<sub>2</sub></em> where <em>n<sub>1</sub></em> is the offset\n      in the data structure before <strong>+FIELD</strong> executes, and\n      <em>n<sub>2</sub></em> is the size of the data to be added to the data\n      structure. <em>n<sub>1</sub></em> and <em>n<sub>2</sub></em> are in address units.\n      </p><p>\n        \n      </p>"
                    },
                    "name Execution:": {
                        "name": "name Execution:",
                        "html": "\n\n\n      ( <em>addr<sub>1</sub></em> -- <em>addr<sub>2</sub></em> )\n      <p>\n      Add <em>n<sub>1</sub></em> to <em>addr<sub>1</sub></em> giving <em>addr<sub>2</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../facility/BEGIN-STRUCTURE.html\">10.6.2.0763 BEGIN-STRUCTURE</a>,\n      <a href=\"../facility/END-STRUCTURE.html\">10.6.2.1336 END-STRUCTURE</a>, <br>\n      <a href=\"../facility/CFIELDColon.html\">10.6.2.0893 CFIELD:</a>,\n      <a href=\"../facility/FIELDColon.html\">10.6.2.1518 FIELD:</a>,\n      <a href=\"../floating/FFIELDColon.html\">12.6.2.1517 FFIELD:</a>, <br>\n      <a href=\"../floating/SFFIELDColon.html\">12.6.2.2206.40 SFFIELD:</a>,\n      <a href=\"../floating/DFFIELDColon.html\">12.6.2.1207.40 DFFIELD:</a>,\n      <a href=\"../rationale.html#rat:facility:+FIELD\">A.10.6.2.0135 +FIELD</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.10.6.2.---- +FIELD -->\n      <strong>+FIELD</strong> is not required to align items.  This is\n      deliberate and allows the construction of unaligned data\n      structures for communication with external elements such\n      as a hardware register map or protocol packet.\n      Field alignment has been left to the appropriate\n      <em>x</em><code>FIELD:</code> definition.\n        \n      "
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n <!-- I.10.6.2.---- +FIELD -->\n      <span class=\"rm\">Create a new field within a structure definition\n      of size <em>n</em> bytes.</span>\n      <p>\n      <a href=\"../core/Colon.html\">:</a> +FIELD&nbsp;&nbsp;<a href=\"../core/bs.html\">\\</a> n &lt;\"name\"&gt; -- ; Exec: addr -- 'addr <br>\n      &nbsp;&nbsp; <a href=\"../core/CREATE.html\">CREATE</a> <a href=\"../core/OVER.html\">OVER</a> <a href=\"../core/Comma.html\">,</a> <a href=\"../core/Plus.html\">+</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/DOES.html\">DOES&gt;</a> <a href=\"../core/Fetch.html\">@</a> <a href=\"../core/Plus.html\">+</a> <br>\n      <a href=\"../core/Semi.html\">;</a>\n      \n      \n      </p>"
                    }
                }
            },
            "TIMEandDATE": {
                "id": "facility:TIMEandDATE",
                "number": "10.6.2.2292",
                "name": "TIME&DATE",
                "english": "time-and-date",
                "list": "FACILITY EXT",
                "basename": "TIMEandDATE",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>+n<sub>1</sub> +n<sub>2</sub> +n<sub>3</sub> +n<sub>4</sub> +n<sub>5</sub> +n<sub>6</sub></em> )"
                    },
                    "plain": {
                        " ": "( -- +n1 +n2 +n3 +n4 +n5 +n6 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>+n<sub>1</sub> +n<sub>2</sub> +n<sub>3</sub> +n<sub>4</sub> +n<sub>5</sub> +n<sub>6</sub></em> )\n      <p>\n      Return the current time and date.\n      <em>+n<sub>1</sub></em> is the second {0...59},\n      <em>+n<sub>2</sub></em> is the minute {0...59},\n      <em>+n<sub>3</sub></em> is the hour {0...23},\n      <em>+n<sub>4</sub></em> is the day {1...31},\n      <em>+n<sub>5</sub></em> is the month {1...12} and\n      <em>+n<sub>6</sub></em> is the year (e.g., 1991).\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../rationale.html#rat:facility:TIMEandDATE\">A.10.6.2.2292 TIME&amp;DATE</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.10.6.2.2292 TIME&DATE -->\n      Most systems have a real-time clock/calendar.\n      This word gives portable access to it.\n      \n      \n      "
                    }
                }
            }
        }
    },
    "file": {
        "name": "file",
        "words": {
            "BIN": {
                "id": "file:BIN",
                "number": "11.6.1.0765",
                "name": "BIN",
                "english": " ",
                "list": "FILE",
                "basename": "BIN",
                "stackEffect": {
                    "html": {
                        " ": "( <em>fam<sub>1</sub></em> -- <em>fam<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( fam1 -- fam2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>fam<sub>1</sub></em> -- <em>fam<sub>2</sub></em> )\n      <p>\n      Modify the implementation-defined file access method\n      <em>fam<sub>1</sub></em> to additionally select a \n      \"binary\", i.e., not line oriented, file access method,\n      giving access method <em>fam<sub>2</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../file/RDivO.html\">11.6.1.2054 R/O</a>,\n      <a href=\"../file/RDivW.html\">11.6.1.2056 R/W</a>,\n      <a href=\"../file/WDivO.html\">11.6.1.2425 W/O</a>,\n      <a href=\"../rationale.html#rat:file:BIN\">A.11.6.1.0765 BIN</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.11.6.1.0765 BIN -->\n      Some operating systems require that files be opened in a\n      different mode to access their contents as an unstructured\n      stream of binary data rather than as a sequence of lines.\n      <p>\n      The arguments to <a href=\"../file/READ-FILE.html\">READ-FILE</a> and <a href=\"../file/WRITE-FILE.html\">WRITE-FILE</a> are\n      arrays of character storage elements, each element consisting\n      of at least 8 bits. The committee intends that, in\n      <strong>BIN</strong> mode, the contents of these storage elements can be\n      written to a file and later read back without alteration.\n      \n      \n      </p>"
                    }
                }
            },
            "CLOSE-FILE": {
                "id": "file:CLOSE-FILE",
                "number": "11.6.1.0900",
                "name": "CLOSE-FILE",
                "english": " ",
                "list": "FILE",
                "basename": "CLOSE-FILE",
                "stackEffect": {
                    "html": {
                        " ": "( <em>fileid</em> -- <em>ior</em> )"
                    },
                    "plain": {
                        " ": "( fileid -- ior )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>fileid</em> -- <em>ior</em> )\n      <p>\n      Close the file identified by <em>fileid</em>. <em>ior</em> is the\n      implementation-defined I/O result code.\n      \n      </p>"
                    }
                }
            },
            "CREATE-FILE": {
                "id": "file:CREATE-FILE",
                "number": "11.6.1.1010",
                "name": "CREATE-FILE",
                "english": " ",
                "list": "FILE",
                "basename": "CREATE-FILE",
                "stackEffect": {
                    "html": {
                        " ": "( <em>c-addr u fam</em> -- <em>fileid ior</em> )"
                    },
                    "plain": {
                        " ": "( c-addr u fam -- fileid ior )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>c-addr u fam</em> -- <em>fileid ior</em> )\n      <p>\n      Create the file named in the character string specified by\n      <em>c-addr</em> and <em>u</em>, and open it with file access method\n      <em>fam</em>. The meaning of values of <em>fam</em> is\n      implementation defined. If a file with the same name already\n      exists, recreate it as an empty file.\n      </p><p>\n      If the file was successfully created and opened, <em>ior</em> is\n      zero, <em>fileid</em> is its identifier, and the file has been\n      positioned to the start of the file.\n      </p><p>\n      Otherwise, <em>ior</em> is the implementation-defined I/O result\n      code and <em>fileid</em> is undefined.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../rationale.html#rat:file:CREATE-FILE\">A.11.6.1.1010 CREATE-FILE</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.11.6.1.1010 CREATE-FILE -->\n      Typical use:\n      <p>\n      &nbsp;&nbsp; <a href=\"../core/Colon.html\">:</a> <code>X</code> ...\n      <a href=\"../file/Sq.html\">S\"</a> <code>TEST.FTH\"</code> <a href=\"../file/RDivW.html\">R/W</a>\n      <strong>CREATE-FILE</strong>\n      <a href=\"../core/ABORTq.html\">ABORT\"</a> <code>CREATE-FILE FAILED\"</code>\n      <a href=\"../core/Semi.html\">;</a>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n      <div class=\"tt\">\n<a href=\"../core/Colon.html\">:</a> fn1 <a href=\"../file/Sq.html\">S\"</a> fatest1.txt\" <a href=\"../core/Semi.html\">;</a> <br>\n        <a href=\"../core/VARIABLE.html\">VARIABLE</a> fid1\n        <p>\n        <span class=\"tt\">T{ fn1&nbsp;<a href=\"../file/RDivW.html\">R/W</a>&nbsp;<strong>CREATE-FILE</strong>&nbsp;<a href=\"../core/SWAP.html\">SWAP</a>&nbsp;fid1&nbsp;<a href=\"../core/Store.html\">!</a> -&gt; 0 }T</span> <br>\n        <span class=\"tt\">T{ fid1&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<a href=\"../file/CLOSE-FILE.html\">CLOSE-FILE</a> -&gt; 0 }T</span>\n        \n        \n        </p></div>\n      "
                    }
                }
            },
            "DELETE-FILE": {
                "id": "file:DELETE-FILE",
                "number": "11.6.1.1190",
                "name": "DELETE-FILE",
                "english": " ",
                "list": "FILE",
                "basename": "DELETE-FILE",
                "stackEffect": {
                    "html": {
                        " ": "( <em>c-addr u</em> -- <em>ior</em> )"
                    },
                    "plain": {
                        " ": "( c-addr u -- ior )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>c-addr u</em> -- <em>ior</em> )\n      <p>\n      Delete the file named in the character string specified by\n      <em>c-addr u</em>. <em>ior</em> is the implementation-defined\n      I/O result code.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      <span class=\"tt\">T{ fn2&nbsp;<strong>DELETE-FILE</strong> -&gt; 0 }T</span> <br>\n      <span class=\"tt\">T{ fn2&nbsp;<a href=\"../file/RDivW.html\">R/W</a>&nbsp;<a href=\"../file/BIN.html\">BIN</a>&nbsp;<a href=\"../file/OPEN-FILE.html\">OPEN-FILE</a>&nbsp;<a href=\"../core/SWAP.html\">SWAP</a>&nbsp;<a href=\"../core/DROP.html\">DROP</a> -&gt; 0 }T</span> <br>\n      <span class=\"tt\">T{ fn2&nbsp;<strong>DELETE-FILE</strong> -&gt; 0 }T</span>\n      \n      \n      "
                    }
                }
            },
            "FILE-POSITION": {
                "id": "file:FILE-POSITION",
                "number": "11.6.1.1520",
                "name": "FILE-POSITION",
                "english": " ",
                "list": "FILE",
                "basename": "FILE-POSITION",
                "stackEffect": {
                    "html": {
                        " ": "( <em>fileid</em> -- <em>ud ior</em> )"
                    },
                    "plain": {
                        " ": "( fileid -- ud ior )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>fileid</em> -- <em>ud ior</em> )\n      <p>\n      <em>ud</em> is the current file position for the file identified\n      by <em>fileid</em>. <em>ior</em> is the implementation-defined I/O\n      result code. <em>ud</em> is undefined if <em>ior</em> is non-zero.\n      \n      </p>"
                    }
                }
            },
            "FILE-SIZE": {
                "id": "file:FILE-SIZE",
                "number": "11.6.1.1522",
                "name": "FILE-SIZE",
                "english": " ",
                "list": "FILE",
                "basename": "FILE-SIZE",
                "stackEffect": {
                    "html": {
                        " ": "( <em>fileid</em> -- <em>ud ior</em> )"
                    },
                    "plain": {
                        " ": "( fileid -- ud ior )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>fileid</em> -- <em>ud ior</em> )\n      <p>\n      <em>ud</em> is the size, in characters, of the file identified by\n      <em>fileid</em>. <em>ior</em> is the implementation-defined I/O\n      result code. This operation does not affect the value returned\n      by\n      <a href=\"file:FILE-POSITION\"><strong><code>FILE-</code></strong></a>\n      <a href=\"file:FILE-POSITION\"><strong><code>POSITION</code></strong></a>.\n      <em>ud</em> is undefined if <em>ior</em> is non-zero.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n      <div class=\"tt\">\n<a href=\"../core/Colon.html\">:</a> cbuf buf bsize 0 <a href=\"../core/FILL.html\">FILL</a> <a href=\"../core/Semi.html\">;</a> <br>\n        <a href=\"../core/Colon.html\">:</a> fn2 <a href=\"../file/Sq.html\">S\"</a> fatest2.txt\" <a href=\"../core/Semi.html\">;</a> <br>\n        <a href=\"../core/VARIABLE.html\">VARIABLE</a> fid2 <br>\n        <a href=\"../core/Colon.html\">:</a> setpad <a href=\"../core/PAD.html\">PAD</a> 50 0 <a href=\"../core/DO.html\">DO</a> <a href=\"../core/I.html\">I</a> <a href=\"../core/OVER.html\">OVER</a> <a href=\"../core/CStore.html\">C!</a> <a href=\"../core/CHARPlus.html\">CHAR+</a> <a href=\"../core/LOOP.html\">LOOP</a> <a href=\"../core/DROP.html\">DROP</a> <a href=\"../core/Semi.html\">;</a>\n        <p>\n        setpad\n        </p><p>\n        <span class=\"rm\"><strong>Note:</strong> If anything else is defined\n        <code>setpad</code> must be called again as the pad may move</span>\n        </p><p>\n        <span class=\"tt\">T{ fn2&nbsp;<a href=\"../file/RDivW.html\">R/W</a>&nbsp;<a href=\"../file/BIN.html\">BIN</a>&nbsp;<a href=\"../file/CREATE-FILE.html\">CREATE-FILE</a>&nbsp;<a href=\"../core/SWAP.html\">SWAP</a>&nbsp;fid2&nbsp;<a href=\"../core/Store.html\">!</a> -&gt; 0 }T</span> <br>\n        <span class=\"tt\">T{ <a href=\"../core/PAD.html\">PAD</a>&nbsp;50&nbsp;fid2&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<a href=\"../file/WRITE-FILE.html\">WRITE-FILE</a>&nbsp;fid2&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<a href=\"../file/FLUSH-FILE.html\">FLUSH-FILE</a> -&gt; 0&nbsp;0 }T</span> <br>\n        <span class=\"tt\">T{ fid2&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<strong>FILE-SIZE</strong> -&gt; 50.&nbsp;0 }T</span> <br>\n        <span class=\"tt\">T{ 0.&nbsp;fid2&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<a href=\"../file/REPOSITION-FILE.html\">REPOSITION-FILE</a> -&gt; 0 }T</span> <br>\n        <span class=\"tt\">T{ cbuf&nbsp;buf&nbsp;29&nbsp;fid2&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<a href=\"../file/READ-FILE.html\">READ-FILE</a> -&gt; 29&nbsp;0 }T</span> <br>\n        <span class=\"tt\">T{ <a href=\"../core/PAD.html\">PAD</a>&nbsp;29&nbsp;buf&nbsp;29&nbsp;<a href=\"../string/COMPARE.html\">COMPARE</a> -&gt; 0 }T</span> <br>\n        <span class=\"tt\">T{ <a href=\"../core/PAD.html\">PAD</a>&nbsp;30&nbsp;buf&nbsp;30&nbsp;<a href=\"../string/COMPARE.html\">COMPARE</a> -&gt; 1 }T</span> <br>\n        <span class=\"tt\">T{ cbuf&nbsp;buf&nbsp;29&nbsp;fid2&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<a href=\"../file/READ-FILE.html\">READ-FILE</a> -&gt; 21&nbsp;0 }T</span> <br>\n        <span class=\"tt\">T{ <a href=\"../core/PAD.html\">PAD</a>&nbsp;29&nbsp;<a href=\"../core/Plus.html\">+</a>&nbsp;21&nbsp;buf&nbsp;21&nbsp;<a href=\"../string/COMPARE.html\">COMPARE</a> -&gt; 0 }T</span> <br>\n        <span class=\"tt\">T{ fid2&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<strong>FILE-SIZE</strong>&nbsp;<a href=\"../core/DROP.html\">DROP</a>&nbsp;fid2&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<a href=\"../file/FILE-POSITION.html\">FILE-POSITION</a>&nbsp;<a href=\"../core/DROP.html\">DROP</a>&nbsp;<a href=\"../double/DEqual.html\">D=</a> -&gt; &lt;TRUE&gt; }T</span> <br>\n        <span class=\"tt\">T{ buf&nbsp;10&nbsp;fid2&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<a href=\"../file/READ-FILE.html\">READ-FILE</a> -&gt; 0&nbsp;0 }T</span> <br>\n        <span class=\"tt\">T{ fid2&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<a href=\"../file/CLOSE-FILE.html\">CLOSE-FILE</a> -&gt; 0 }T</span>\n        \n        \n        </p></div>\n      "
                    }
                }
            },
            "FILE-STATUS": {
                "id": "file:FILE-STATUS",
                "number": "11.6.2.1524",
                "name": "FILE-STATUS",
                "english": " ",
                "list": "FILE EXT",
                "basename": "FILE-STATUS",
                "stackEffect": {
                    "html": {
                        " ": "( <em>c-addr u</em> -- <em>x ior</em> )"
                    },
                    "plain": {
                        " ": "( c-addr u -- x ior )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>c-addr u</em> -- <em>x ior</em> )\n      <p>\n      Return the status of the file identified by the character string\n      <em>c-addr u</em>. If the file exists, <em>ior</em> is zero;\n      otherwise <em>ior</em> is the implementation-defined I/O result\n      code. <em>x</em> contains implementation-defined information about\n      the file.\n      \n      </p>"
                    }
                }
            },
            "FLUSH-FILE": {
                "id": "file:FLUSH-FILE",
                "number": "11.6.2.1560",
                "name": "FLUSH-FILE",
                "english": " ",
                "list": "FILE EXT",
                "basename": "FLUSH-FILE",
                "stackEffect": {
                    "html": {
                        " ": "( <em>fileid</em> -- <em>ior</em> )"
                    },
                    "plain": {
                        " ": "( fileid -- ior )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>fileid</em> -- <em>ior</em> )\n      <p>\n      Attempt to force any buffered information written to the file\n      referred to by <em>fileid</em> to be written to mass storage, and\n      the size information for the file to be recorded in the storage\n      directory if changed. If the operation is successful, <em>ior</em>\n      is zero. Otherwise, it is an implementation-defined I/O result\n      code.\n      \n      </p>"
                    }
                }
            },
            "INCLUDE-FILE": {
                "id": "file:INCLUDE-FILE",
                "number": "11.6.1.1717",
                "name": "INCLUDE-FILE",
                "english": " ",
                "list": "FILE",
                "basename": "INCLUDE-FILE",
                "stackEffect": {
                    "html": {
                        " ": "( <em>i * x fileid</em> -- <em>j * x</em> )"
                    },
                    "plain": {
                        " ": "( i * x fileid -- j * x )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>i * x fileid</em> -- <em>j * x</em> )\n      <p>\n      Remove <em>fileid</em> from the stack. Save the current input\n      source specification, including the current value of\n      <a href=\"../file/SOURCE-ID.html\">SOURCE-ID</a>. Store <em>fileid</em> in <a href=\"../file/SOURCE-ID.html\">SOURCE-ID</a>.\n      Make the file specified by <em>fileid</em> the input source. Store\n      zero in <a href=\"../block/BLK.html\">BLK</a>. Other stack effects are due to the\n      words included.\n      </p><p>\n      Repeat until end of file: read a line from the file, fill the\n      input buffer from the contents of that line, set <a href=\"../core/toIN.html\">&gt;IN</a>\n      to zero, and interpret.\n      </p><p>\n      Text interpretation begins at the file position where the next\n      file read would occur.\n      </p><p>\n      When the end of the file is reached, close the file and restore\n      the input source specification to its saved value.\n      </p><p>\n      An ambiguous condition exists if <em>fileid</em> is invalid, if\n      there is an I/O exception reading <em>fileid</em>, or if an I/O\n      exception occurs while closing <em>fileid</em>. When an ambiguous\n      condition exists, the status (open or closed) of any files that\n      were being interpreted is implementation-defined.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../file.html#file:source\">11.3.3 Input source</a></strong>,\n      <a href=\"../rationale.html#rat:file:INCLUDE-FILE\">A.11.6.1.1717 INCLUDE-FILE</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.11.6.1.1717 INCLUDE-FILE -->\n      Here are two implementation alternatives for saving the input\n      source specification in the presence of text file input:\n      <p>\n      </p><ol style=\"list-style-type: decimal\">\n      <li> Save the file position (as returned by\n      <a href=\"../file/FILE-POSITION.html\">FILE-POSITION</a>) of the beginning of the line being\n      interpreted. To restore the input source specification,\n      seek to that position and re-read the line into the input\n      buffer.\n      <p>\n      </p></li>\n      <li> Allocate a separate line buffer for each active text\n      input file, using that buffer as the input buffer. This\n      method avoids the \"seek and reread\" step, and allows the\n      use of \"pseudo-files\" such as pipes and other\n      sequential-access-only communication channels.\n      </li>\n</ol>\n      \n      \n      "
                    }
                }
            },
            "INCLUDE": {
                "id": "file:INCLUDE",
                "number": "11.6.2.1714",
                "name": "INCLUDE",
                "english": " ",
                "list": "FILE EXT",
                "basename": "INCLUDE",
                "stackEffect": {
                    "html": {
                        " ": "( <em>i * x \"name\"</em> -- <em>j * x</em> )"
                    },
                    "plain": {
                        " ": "( i * x \"name\" -- j * x )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>i * x \"name\"</em> -- <em>j * x</em> )\n      <p>\n      Skip leading white space and parse <em>name</em> delimited by a\n      white space character. Push the address and length of the\n      <em>name</em> on the stack and perform the function of\n      <a href=\"../file/INCLUDED.html\">INCLUDED</a>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../file/INCLUDED.html\">11.6.1.1718 INCLUDED</a>,\n      <a href=\"../rationale.html#rat:file:INCLUDE\">A.11.6.2.1714 INCLUDE</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.11.6.2.---- INCLUDE -->\n      Typical use:\n            <div class=\"quote\">\n\n        <strong>INCLUDE</strong> <code>filename</code>\n        \n        </div>\n        \n      "
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n <!-- I.11.6.2.---- INCLUDE -->\n      <a href=\"../core/Colon.html\">:</a> <strong>INCLUDE</strong> <a href=\"../file/p.html\">(</a> i*x \"name\" -- j*x ) <br>\n      &nbsp;&nbsp; <a href=\"../core/PARSE-NAME.html\">PARSE-NAME</a> <a href=\"../file/INCLUDED.html\">INCLUDED</a> <a href=\"../core/Semi.html\">;</a>\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.11.6.2.---- INCLUDE -->\n      See <a href=\"../testsuite.html#test:file:REQUIRED\">F.11.6.2.2144.50 REQUIRED</a>.\n      \n      \n      "
                    }
                }
            },
            "INCLUDED": {
                "id": "file:INCLUDED",
                "number": "11.6.1.1718",
                "name": "INCLUDED",
                "english": " ",
                "list": "FILE",
                "basename": "INCLUDED",
                "stackEffect": {
                    "html": {
                        " ": "( <em>i * x c-addr u</em> -- <em>j * x</em> )"
                    },
                    "plain": {
                        " ": "( i * x c-addr u -- j * x )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>i * x c-addr u</em> -- <em>j * x</em> )\n      <p>\n      Remove <em>c-addr u</em> from the stack. Save the current input\n      source specification, including the current value of\n      <a href=\"../file/SOURCE-ID.html\">SOURCE-ID</a>. Open the file specified by <em>c-addr u</em>,\n      store the resulting <em>fileid</em> in <a href=\"../file/SOURCE-ID.html\">SOURCE-ID</a>, and make\n      it the input source. Store zero in <a href=\"../block/BLK.html\">BLK</a>. Other\n      stack effects are due to the words included.\n      </p><p>\n      Repeat until end of file: read a line from the file, fill the\n      input buffer from the contents of that line, set <a href=\"../core/toIN.html\">&gt;IN</a>\n      to zero, and interpret.\n      </p><p>\n      Text interpretation begins at the start of the file.\n      </p><p>\n      When the end of the file is reached, close the file and restore\n      the input source specification to its saved value.\n      </p><p>\n      An ambiguous condition exists if the named file can not be\n      opened, if an I/O exception occurs reading the file, or if an\n      I/O exception occurs while closing the file. When an ambiguous\n      condition exists, the status (open or closed) of any files that\n      were being interpreted is implementation-defined.\n      </p><p>\n      <strong>INCLUDED</strong> may allocate memory in data space before it\n      starts interpreting the file.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../file/INCLUDE-FILE.html\">11.6.1.1717 INCLUDE-FILE</a>,\n      <a href=\"../rationale.html#rat:file:INCLUDED\">A.11.6.1.1718 INCLUDED</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.11.6.1.1718 INCLUDED -->\n      Typical use:\n      ... <a href=\"../file/Sq.html\">S\"</a> <code>filename\"</code> <strong>INCLUDED</strong> ...\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.11.6.1.1718 INCLUDED -->\n      See <a href=\"../testsuite.html#test:file:REQUIRED\">F.11.6.2.2144.50 REQUIRED</a>.\n      \n      \n      "
                    }
                }
            },
            "OPEN-FILE": {
                "id": "file:OPEN-FILE",
                "number": "11.6.1.1970",
                "name": "OPEN-FILE",
                "english": " ",
                "list": "FILE",
                "basename": "OPEN-FILE",
                "stackEffect": {
                    "html": {
                        " ": "( <em>c-addr u fam</em> -- <em>fileid ior</em> )"
                    },
                    "plain": {
                        " ": "( c-addr u fam -- fileid ior )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>c-addr u fam</em> -- <em>fileid ior</em> )\n      <p>\n      Open the file named in the character string specified by\n      <em>c-addr u</em>, with file access method indicated by\n      <em>fam</em>. The meaning of values of <em>fam</em> is\n      implementation \tdefined.\n      </p><p>\n      If the file is successfully opened, <em>ior</em> is zero,\n      <em>fileid</em> is its identifier, and the file has been\n      positioned to the start of the file.\n      </p><p>\n      Otherwise, <em>ior</em> is the implementation-defined I/O\n      result code and <em>fileid</em> is undefined.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../rationale.html#rat:file:OPEN-FILE\">A.11.6.1.1970 OPEN-FILE</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.11.6.1.1970 OPEN-FILE -->\n      Typical use:\n      <p>\n      &nbsp;&nbsp; <a href=\"../core/Colon.html\">:</a> <code>X</code> ...\n      <a href=\"../file/Sq.html\">S\"</a> <code> TEST.FTH\"</code> <a href=\"../file/RDivW.html\">R/W</a>\n      <strong>OPEN-FILE</strong>  <a href=\"../core/ABORTq.html\">ABORT\"</a> <code>OPEN-FILE FAILED\"</code>\n      ... <a href=\"../core/Semi.html\">;</a>\n      \n      \n      </p>"
                    }
                }
            },
            "RDivO": {
                "id": "file:R/O",
                "number": "11.6.1.2054",
                "name": "R/O",
                "english": "r-o",
                "list": "FILE",
                "basename": "RDivO",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>fam</em> )"
                    },
                    "plain": {
                        " ": "( -- fam )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>fam</em> )\n      <p>\n      <em>fam</em> is the implementation-defined value for selecting\n      the \"read only\" file access method.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../file/CREATE-FILE.html\">11.6.1.1010 CREATE-FILE</a>,\n      <a href=\"../file/OPEN-FILE.html\">11.6.1.1970 OPEN-FILE</a>.\n      \n      "
                    }
                }
            },
            "RDivW": {
                "id": "file:R/W",
                "number": "11.6.1.2056",
                "name": "R/W",
                "english": "r-w",
                "list": "FILE",
                "basename": "RDivW",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>fam</em> )"
                    },
                    "plain": {
                        " ": "( -- fam )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>fam</em> )\n      <p>\n      <em>fam</em> is the implementation-defined value for selecting\n      the \"read/write\" file access method.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../file/CREATE-FILE.html\">11.6.1.1010 CREATE-FILE</a>,\n      <a href=\"../file/OPEN-FILE.html\">11.6.1.1970 OPEN-FILE</a>.\n      \n      "
                    }
                }
            },
            "READ-FILE": {
                "id": "file:READ-FILE",
                "number": "11.6.1.2080",
                "name": "READ-FILE",
                "english": " ",
                "list": "FILE",
                "basename": "READ-FILE",
                "stackEffect": {
                    "html": {
                        " ": "( <em>c-addr u<sub>1</sub> fileid</em> -- <em>u<sub>2</sub> ior</em> )"
                    },
                    "plain": {
                        " ": "( c-addr u1 fileid -- u2 ior )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>c-addr u<sub>1</sub> fileid</em> -- <em>u<sub>2</sub> ior</em> )\n      <p>\n      Read <em>u<sub>1</sub></em> consecutive characters to <em>c-addr</em> from the\n      current position of the file identified by <em>fileid</em>.\n      </p><p>\n      If <em>u<sub>1</sub></em> characters are read without an exception, <em>ior</em>\n      is zero and <em>u<sub>2</sub></em> is equal to <em>u<sub>1</sub></em>.\n      </p><p>\n      If the end of the file is reached before <em>u<sub>1</sub></em> characters are\n      read, <em>ior</em> is zero and <em>u<sub>2</sub></em> is the number of characters\n      actually read.\n      </p><p>\n      If the operation is initiated when the value returned by\n      <a href=\"../file/FILE-POSITION.html\">FILE-POSITION</a> is equal to the value returned by\n      <a href=\"../file/FILE-SIZE.html\">FILE-SIZE</a> for the file identified by <em>fileid</em>,\n      <em>ior</em> is zero and <em>u<sub>2</sub></em> is zero.\n      </p><p>\n      If an exception occurs, <em>ior</em> is the implementation-defined\n      I/O result code, and <em>u<sub>2</sub></em> is the number of characters\n      transferred to <em>c-addr</em> without an exception.\n      </p><p>\n      An ambiguous condition exists if the operation is initiated when\n      the value returned by <a href=\"../file/FILE-POSITION.html\">FILE-POSITION</a> is greater than the\n      value returned by <a href=\"../file/FILE-SIZE.html\">FILE-SIZE</a> for the file identified by\n      <em>fileid</em>, or if the requested operation attempts to read\n      portions of the file not written.\n      </p><p>\n      At the conclusion of the operation, <a href=\"../file/FILE-POSITION.html\">FILE-POSITION</a> returns\n      the next file position after the last character read.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../rationale.html#rat:file:READ-FILE\">A.11.6.1.2080 READ-FILE</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.11.6.1.2080 READ-FILE -->\n      A typical sequential file-processing algorithm might look like:\n            <div class=\"quote\">\n        <div class=\"tt\">\n\n          <div class=\"tabbing\">\n            <a href=\"../core/BEGIN.html\">BEGIN</a>\t\t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/p.html\">(</a> ) <br>\n            &nbsp;&nbsp;&nbsp; ... <a href=\"../file/READ-FILE.html\">READ-FILE</a> <a href=\"../exception/THROW.html\">THROW</a>\n            &nbsp;&nbsp;&nbsp;&nbsp;\t <a href=\"../core/p.html\">(</a> length ) <br>\n            <a href=\"../core/qDUP.html\">?DUP</a> <a href=\"../core/WHILE.html\">WHILE</a>\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/p.html\">(</a> length ) <br>\n            &nbsp;&nbsp;&nbsp; ...\t\t\t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t <a href=\"../core/p.html\">(</a> ) <br>\n            <a href=\"../core/REPEAT.html\">REPEAT</a>\t\t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/p.html\">(</a> )\n            <br>\n            \n            </div>\n          \n          </div>\n        </div>In this example, <a href=\"../exception/THROW.html\">THROW</a> is used to handle\n      exception conditions, which are reported as\n      non-zero values of the <em>ior</em> return value from\n      <strong>READ-FILE</strong>. End-of-file is reported as a zero value of\n      the \"length\" return value.\n      \n      \n      "
                    }
                }
            },
            "READ-LINE": {
                "id": "file:READ-LINE",
                "number": "11.6.1.2090",
                "name": "READ-LINE",
                "english": " ",
                "list": "FILE",
                "basename": "READ-LINE",
                "stackEffect": {
                    "html": {
                        " ": "( <em>c-addr u<sub>1</sub> fileid</em> -- <em>u<sub>2</sub> flag ior</em> )"
                    },
                    "plain": {
                        " ": "( c-addr u1 fileid -- u2 flag ior )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>c-addr u<sub>1</sub> fileid</em> -- <em>u<sub>2</sub> flag ior</em> )\n      <p>\n      Read the next line from the file specified by <em>fileid</em> into\n      memory at the address <em>c-addr</em>. At most <em>u<sub>1</sub></em> characters\n      are read. Up to two implementation-defined line-terminating\n      characters may be read into memory at the end of the line, but\n      are not included in the count <em>u<sub>2</sub></em>. The line buffer provided\n      by <em>c-addr</em> should be at least <em>u<sub>1</sub>+2</em> characters long.\n      </p><p>\n      If the operation succeeded, <em>flag</em> is true and <em>ior</em>\n      is zero. If a line terminator was received before <em>u<sub>1</sub></em>\n      characters were read, then <em>u<sub>2</sub></em> is the number of characters,\n      not including the line terminator, actually read (<em>0 &lt;=</em> <em>u<sub>2</sub></em>\n      <em>&lt;=</em> <em>u<sub>1</sub></em>). When <em>u<sub>1</sub></em> = <em>u<sub>2</sub></em> the line\n      terminator has yet to be reached.\n      </p><p>\n      If the operation is initiated when the value returned by\n      <a href=\"../file/FILE-POSITION.html\">FILE-POSITION</a> is equal to the value returned by\n      <a href=\"../file/FILE-SIZE.html\">FILE-SIZE</a> for the file identified by <em>fileid</em>,\n      <em>flag</em> is false, <em>ior</em> is zero, and <em>u<sub>2</sub></em> is zero.\n      If <em>ior</em> is non-zero, an exception occurred during the\n      operation and <em>ior</em> is the implementation-defined I/O\n      result code.\n      </p><p>\n      An ambiguous condition exists if the operation is initiated when\n      the value returned by <a href=\"../file/FILE-POSITION.html\">FILE-POSITION</a> is greater than the\n      value returned by <a href=\"../file/FILE-SIZE.html\">FILE-SIZE</a> for the file identified by\n      <em>fileid</em>, or if the requested operation attempts to read\n      portions of the file not written.\n      </p><p>\n      At the conclusion of the operation, <a href=\"../file/FILE-POSITION.html\">FILE-POSITION</a> returns\n      the next file position after the last character read.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../rationale.html#rat:file:READ-LINE\">A.11.6.1.2090 READ-LINE</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.11.6.1.2090 READ-LINE -->\n      Implementations are allowed to store the line terminator in\n      the memory buffer in order to allow the use of line reading\n      functions provided by host operating systems, some of which\n      store the terminator. Without this provision, a transient\n      buffer might be needed. The two-character limitation is\n      sufficient for the vast majority of existing operating\n      systems. Implementations on host operating systems whose line\n      terminator sequence is longer than two characters may have to\n      take special action to prevent the storage of more than two\n      terminator characters.\n      <p>\n      Standard Programs may not depend on the presence of any such\n      terminator sequence in the buffer.\n      </p><p>\n      A typical line-oriented sequential file-processing algorithm\n      might look like:\n      </p><p>\n            </p><div class=\"quote\">\n        <div class=\"tt\">\n\n          <div class=\"tabbing\">\n            <a href=\"../core/BEGIN.html\">BEGIN</a>\t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/p.html\">(</a> ) <br>\n            &nbsp;&nbsp;&nbsp; ... <a href=\"../file/READ-LINE.html\">READ-LINE</a> <a href=\"../exception/THROW.html\">THROW</a>\n            &nbsp;&nbsp;&nbsp;&nbsp;\t <a href=\"../core/p.html\">(</a> length not-eof-flag ) <br>\n            <a href=\"../core/WHILE.html\">WHILE</a> \t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/p.html\">(</a> length ) <br>\n            &nbsp;&nbsp;&nbsp; ...\t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t <a href=\"../core/p.html\">(</a> ) <br>\n            <a href=\"../core/REPEAT.html\">REPEAT</a> <a href=\"../core/DROP.html\">DROP</a>\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/p.html\">(</a> ) <br>\n            \n            </div>\n          \n          </div>\n        </div><strong>READ-LINE</strong> needs a separate end-of-file flag because\n      empty (zero-length) lines are a routine occurrence, so a\n      zero-length line cannot be used to signify end-of-file.\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n      <div class=\"tt\">\n200 <a href=\"../core/CONSTANT.html\">CONSTANT</a> bsize <br>\n        <a href=\"../core/CREATE.html\">CREATE</a> buf bsize <a href=\"../core/ALLOT.html\">ALLOT</a> <br>\n        <a href=\"../core/VARIABLE.html\">VARIABLE</a> #chars\n        <p>\n        <span class=\"tt\">T{ fn1&nbsp;<a href=\"../file/RDivO.html\">R/O</a>&nbsp;<a href=\"../file/OPEN-FILE.html\">OPEN-FILE</a>&nbsp;<a href=\"../core/SWAP.html\">SWAP</a>&nbsp;fid1&nbsp;<a href=\"../core/Store.html\">!</a> -&gt; 0 }T</span> <br>\n        <span class=\"tt\">T{ fid1&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<a href=\"../file/FILE-POSITION.html\">FILE-POSITION</a> -&gt; 0.&nbsp;0 }T</span> <br>\n        <span class=\"tt\">T{ buf&nbsp;100&nbsp;fid1&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<strong>READ-LINE</strong>&nbsp;<a href=\"../core/ROT.html\">ROT</a>&nbsp;<a href=\"../core/DUP.html\">DUP</a>&nbsp;#chars&nbsp;<a href=\"../core/Store.html\">!</a> -&gt; <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&lt;TRUE&gt;&nbsp;0&nbsp;line1&nbsp;<a href=\"../core/SWAP.html\">SWAP</a>&nbsp;<a href=\"../core/DROP.html\">DROP</a> }T</span> <br>\n        <span class=\"tt\">T{ buf&nbsp;#chars&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;line1&nbsp;<a href=\"../string/COMPARE.html\">COMPARE</a> -&gt; 0 }T</span> <br>\n        <span class=\"tt\">T{ fid1&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<a href=\"../file/CLOSE-FILE.html\">CLOSE-FILE</a> -&gt; 0 }T</span>\n        \n        \n        </p></div>\n      "
                    }
                }
            },
            "REFILL": {
                "id": "file:REFILL",
                "number": "11.6.2.2125",
                "name": "REFILL",
                "english": " ",
                "list": "FILE EXT",
                "basename": "REFILL",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>flag</em> )"
                    },
                    "plain": {
                        " ": "( -- flag )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>flag</em> )\n      <p>\n      Extend the execution semantics of <a href=\"../core/REFILL.html\">6.2.2125 REFILL</a>\n      with the following:\n      </p><p>\n      When the input source is a text file, attempt to read the next\n      line from the text-input file. If successful, make the result\n      the current input buffer, set <a href=\"../core/toIN.html\">&gt;IN</a> to zero, and\n      return <em>true</em>. Otherwise return <em>false</em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/REFILL.html\">6.2.2125 REFILL</a>,\n      <a href=\"../block/REFILL.html\">7.6.2.2125 REFILL</a>.\n      \n      "
                    }
                }
            },
            "RENAME-FILE": {
                "id": "file:RENAME-FILE",
                "number": "11.6.2.2130",
                "name": "RENAME-FILE",
                "english": " ",
                "list": "FILE EXT",
                "basename": "RENAME-FILE",
                "stackEffect": {
                    "html": {
                        " ": "( <em>c-addr<sub>1</sub> u<sub>1</sub> c-addr<sub>2</sub> u<sub>2</sub></em> -- <em>ior</em> )"
                    },
                    "plain": {
                        " ": "( c-addr1 u1 c-addr2 u2 -- ior )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>c-addr<sub>1</sub> u<sub>1</sub> c-addr<sub>2</sub> u<sub>2</sub></em> -- <em>ior</em> )\n      <p>\n      Rename the file named by the character string <em>c-addr<sub>1</sub> u<sub>1</sub></em>\n      to the name in the character string <em>c-addr<sub>2</sub> u<sub>2</sub></em>.\n      <em>ior</em> is the implementation-defined I/O result code.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n      <div class=\"tt\">\n<a href=\"../core/Colon.html\">:</a> fn3 <a href=\"../file/Sq.html\">S\"</a> fatest3.txt\" <a href=\"../core/Semi.html\">;</a> <br>\n        <a href=\"../core/Colon.html\">:</a> &gt;end fid1 <a href=\"../core/Fetch.html\">@</a> <a href=\"../file/FILE-SIZE.html\">FILE-SIZE</a> <a href=\"../core/DROP.html\">DROP</a> fid1 <a href=\"../core/Fetch.html\">@</a> <a href=\"../file/REPOSITION-FILE.html\">REPOSITION-FILE</a> <a href=\"../core/Semi.html\">;</a>\n        <p>\n        <span class=\"tt\">T{ fn3&nbsp;<a href=\"../file/DELETE-FILE.html\">DELETE-FILE</a>&nbsp;<a href=\"../core/DROP.html\">DROP</a> -&gt;  }T</span> <br>\n        <span class=\"tt\">T{ fn1&nbsp;fn3&nbsp;<strong>RENAME-FILE</strong> -&gt; 0 }T</span> <br>\n        <a href=\"../core/bs.html\">\\</a> <span class=\"rm\"> Return value is undefined</span> <br>\n        <span class=\"tt\">T{ fn1&nbsp;<a href=\"../file/FILE-STATUS.html\">FILE-STATUS</a>&nbsp;<a href=\"../core/SWAP.html\">SWAP</a>&nbsp;<a href=\"../core/DROP.html\">DROP</a>&nbsp;<a href=\"../core/ZeroEqual.html\">0=</a> -&gt; &lt;FALSE&gt; }T</span> <br>\n        <span class=\"tt\">T{ fn3&nbsp;<a href=\"../file/FILE-STATUS.html\">FILE-STATUS</a>&nbsp;<a href=\"../core/SWAP.html\">SWAP</a>&nbsp;<a href=\"../core/DROP.html\">DROP</a>&nbsp;<a href=\"../core/ZeroEqual.html\">0=</a> -&gt; &lt;TRUE&gt;&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ fn3&nbsp;<a href=\"../file/RDivW.html\">R/W</a>&nbsp;<a href=\"../file/OPEN-FILE.html\">OPEN-FILE</a>&nbsp;<a href=\"../core/SWAP.html\">SWAP</a>&nbsp;fid1&nbsp;<a href=\"../core/Store.html\">!</a> -&gt; 0 }T</span> <br>\n        <span class=\"tt\">T{ &gt;end -&gt; 0 }T</span> <br>\n        <span class=\"tt\">T{ <a href=\"../file/Sq.html\">S\"</a>&nbsp;Final&nbsp;line\"&nbsp;fid1&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<a href=\"../file/WRITE-LINE.html\">WRITE-LINE</a> -&gt; 0 }T</span> <br>\n        <span class=\"tt\">T{ fid1&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<a href=\"../file/FLUSH-FILE.html\">FLUSH-FILE</a> -&gt; 0 }T</span> &nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Can only test <a href=\"../file/FLUSH-FILE.html\">FLUSH-FILE</a> doesn't fail</span> <br>\n        <span class=\"tt\">T{ fid1&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<a href=\"../file/CLOSE-FILE.html\">CLOSE-FILE</a> -&gt; 0 }T</span>\n        </p><p>\n        <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Tidy the test folder</span> <br>\n        <span class=\"tt\">T{ fn3&nbsp;<a href=\"../file/DELETE-FILE.html\">DELETE-FILE</a>&nbsp;<a href=\"../core/DROP.html\">DROP</a> -&gt;  }T</span>\n        \n        \n        </p></div>\n      "
                    }
                }
            },
            "REPOSITION-FILE": {
                "id": "file:REPOSITION-FILE",
                "number": "11.6.1.2142",
                "name": "REPOSITION-FILE",
                "english": " ",
                "list": "FILE",
                "basename": "REPOSITION-FILE",
                "stackEffect": {
                    "html": {
                        " ": "( <em>ud fileid</em> -- <em>ior</em> )"
                    },
                    "plain": {
                        " ": "( ud fileid -- ior )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>ud fileid</em> -- <em>ior</em> )\n      <p>\n      Reposition the file identified by <em>fileid</em> to <em>ud</em>.\n      <em>ior</em> is the implementation-defined I/O result code. An\n      ambiguous condition exists if the file is positioned outside\n      the file boundaries.\n      </p><p>\n      At the conclusion of the operation, <a href=\"../file/FILE-POSITION.html\">FILE-POSITION</a>\n      returns the value <em>ud</em>.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n      <div class=\"tt\">\n<a href=\"../core/Colon.html\">:</a> line2 <a href=\"../file/Sq.html\">S\"</a> Line 2 blah blah blah\" <a href=\"../core/Semi.html\">;</a> <br>\n        <a href=\"../core/Colon.html\">:</a> rl1 buf 100 fid1 <a href=\"../core/Fetch.html\">@</a> <a href=\"../file/READ-LINE.html\">READ-LINE</a> <a href=\"../core/Semi.html\">;</a> <br>\n        <a href=\"../double/TwoVARIABLE.html\">2VARIABLE</a> fp\n        <p>\n        <span class=\"tt\">T{ fn1&nbsp;<a href=\"../file/RDivW.html\">R/W</a>&nbsp;<a href=\"../file/OPEN-FILE.html\">OPEN-FILE</a>&nbsp;<a href=\"../core/SWAP.html\">SWAP</a>&nbsp;fid1&nbsp;<a href=\"../core/Store.html\">!</a> -&gt; 0 }T</span> <br>\n        <span class=\"tt\">T{ fid1&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<a href=\"../file/FILE-SIZE.html\">FILE-SIZE</a>&nbsp;<a href=\"../core/DROP.html\">DROP</a>&nbsp;fid1&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<strong>REPOSITION-FILE</strong> -&gt; 0 }T</span> <br>\n        <span class=\"tt\">T{ fid1&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<a href=\"../file/FILE-SIZE.html\">FILE-SIZE</a> -&gt; fid1&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<a href=\"../file/FILE-POSITION.html\">FILE-POSITION</a> }T</span>\n        </p><p>\n        <span class=\"tt\">T{ line2&nbsp;fid1&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<a href=\"../file/WRITE-FILE.html\">WRITE-FILE</a> -&gt; 0 }T</span> <br>\n        <span class=\"tt\">T{ 10.&nbsp;fid1&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<strong>REPOSITION-FILE</strong> -&gt; 0 }T</span> <br>\n        <span class=\"tt\">T{ fid1&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<a href=\"../file/FILE-POSITION.html\">FILE-POSITION</a> -&gt; 10.&nbsp;0 }T</span>\n        </p><p>\n        <span class=\"tt\">T{ 0.&nbsp;fid1&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<strong>REPOSITION-FILE</strong> -&gt; 0 }T</span> <br>\n        <span class=\"tt\">T{ rl1 -&gt; line1&nbsp;<a href=\"../core/SWAP.html\">SWAP</a>&nbsp;<a href=\"../core/DROP.html\">DROP</a>&nbsp;&lt;TRUE&gt;&nbsp;0 }T</span> <br>\n        <span class=\"tt\">T{ rl1 -&gt; <a href=\"../core/ROT.html\">ROT</a>&nbsp;<a href=\"../core/DUP.html\">DUP</a>&nbsp;#chars&nbsp;<a href=\"../core/Store.html\">!</a> }T</span>&lt;TRUE&gt; 0 line2 <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../core/DROP.html\">DROP</a> <br>\n        <span class=\"tt\">T{ buf&nbsp;#chars&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;line2&nbsp;<a href=\"../string/COMPARE.html\">COMPARE</a> -&gt; 0 }T</span> <br>\n        <span class=\"tt\">T{ rl1 -&gt; 0&nbsp;&lt;FALSE&gt;&nbsp;0 }T</span>\n        </p><p>\n        <span class=\"tt\">T{ fid1&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<a href=\"../file/FILE-POSITION.html\">FILE-POSITION</a>&nbsp;<a href=\"../core/ROT.html\">ROT</a>&nbsp;<a href=\"../core/ROT.html\">ROT</a>&nbsp;fp&nbsp;<a href=\"../core/TwoStore.html\">2!</a> -&gt; 0 }T</span> <br>\n        <span class=\"tt\">T{ fp&nbsp;<a href=\"../core/TwoFetch.html\">2@</a>&nbsp;fid1&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<a href=\"../file/FILE-SIZE.html\">FILE-SIZE</a>&nbsp;<a href=\"../core/DROP.html\">DROP</a>&nbsp;<a href=\"../double/DEqual.html\">D=</a> -&gt; &lt;TRUE&gt; }T</span> <br>\n        <span class=\"tt\">T{ <a href=\"../file/Sq.html\">S\"</a>&nbsp;\"&nbsp;fid1&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<a href=\"../file/WRITE-LINE.html\">WRITE-LINE</a> -&gt; 0 }T</span> <br>\n        <span class=\"tt\">T{ <a href=\"../file/Sq.html\">S\"</a>&nbsp;\"&nbsp;fid1&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<a href=\"../file/WRITE-LINE.html\">WRITE-LINE</a> -&gt; 0 }T</span> <br>\n        <span class=\"tt\">T{ fp&nbsp;<a href=\"../core/TwoFetch.html\">2@</a>&nbsp;fid1&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<strong>REPOSITION-FILE</strong> -&gt; 0 }T</span> <br>\n        <span class=\"tt\">T{ rl1 -&gt; 0&nbsp;&lt;TRUE&gt;&nbsp;&nbsp;0 }T</span> <br>\n        <span class=\"tt\">T{ rl1 -&gt; 0&nbsp;&lt;TRUE&gt;&nbsp;&nbsp;0 }T</span> <br>\n        <span class=\"tt\">T{ rl1 -&gt; 0&nbsp;&lt;FALSE&gt;&nbsp;0 }T</span> <br>\n        <span class=\"tt\">T{ fid1&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<a href=\"../file/CLOSE-FILE.html\">CLOSE-FILE</a> -&gt; 0 }T</span>\n        \n        \n        </p></div>\n      "
                    }
                }
            },
            "REQUIRE": {
                "id": "file:REQUIRE",
                "number": "11.6.2.2144.10",
                "name": "REQUIRE",
                "english": " ",
                "list": "FILE EXT",
                "basename": "REQUIRE",
                "stackEffect": {
                    "html": {
                        " ": "( <em>i * x \"name\"</em> -- <em>i * x</em> )"
                    },
                    "plain": {
                        " ": "( i * x \"name\" -- i * x )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>i * x \"name\"</em> -- <em>i * x</em> )\n      <p>\n      Skip leading white space and parse <em>name</em> delimited by a\n      white space character. Push the address and length of the\n      <em>name</em> on the stack and perform the function of\n      <a href=\"../file/REQUIRED.html\">REQUIRED</a>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../file/REQUIRED.html\">11.6.2.2144.50 REQUIRED</a>,\n      <a href=\"../rationale.html#rat:file:REQUIRE\">A.11.6.2.2144.10 REQUIRE</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.11.6.2.---- REQUIRE -->\n      Typical use:\n            <div class=\"quote\">\n\n        <strong>REQUIRE</strong> <code>filename</code>\n        \n        </div>\n        \n      "
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n <!-- I.11.6.2.---- REQUIRE -->\n      <a href=\"../core/Colon.html\">:</a> <strong>REQUIRE</strong> <a href=\"../file/p.html\">(</a> i*x \"name\" -- i*x ) <br>\n      &nbsp;&nbsp; <a href=\"../core/PARSE-NAME.html\">PARSE-NAME</a> <a href=\"../file/REQUIRED.html\">REQUIRED</a> <a href=\"../core/Semi.html\">;</a>\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.11.6.2.---- REQUIRE -->\n      See <a href=\"../testsuite.html#test:file:REQUIRED\">F.11.6.2.2144.50 REQUIRED</a>.\n      \n      \n      "
                    }
                }
            },
            "REQUIRED": {
                "id": "file:REQUIRED",
                "number": "11.6.2.2144.50",
                "name": "REQUIRED",
                "english": " ",
                "list": "FILE EXT",
                "basename": "REQUIRED",
                "stackEffect": {
                    "html": {
                        " ": "( <em>i * x c-addr u</em> -- <em>i * x</em> )"
                    },
                    "plain": {
                        " ": "( i * x c-addr u -- i * x )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>i * x c-addr u</em> -- <em>i * x</em> )\n      <p>\n      If the file specified by <em>c-addr u</em> has been <a href=\"../file/INCLUDED.html\">INCLUDED</a>\n      or <strong>REQUIRED</strong> already, but not between the definition and\n      execution of a marker (or equivalent usage of <a href=\"../tools/FORGET.html\">FORGET</a>),\n      discard <em>c-addr u</em>; otherwise, perform the function of\n      <a href=\"../file/INCLUDED.html\">INCLUDED</a>.\n      </p><p>\n      An ambiguous condition exists if a file is <strong>REQUIRED</strong> while\n      it is being <strong>REQUIRED</strong> or <a href=\"../file/INCLUDED.html\">INCLUDED</a>.\n      </p><p>\n      An ambiguous condition exists, if a marker is defined outside and\n      executed inside a file or vice versa, and the file is\n      <strong>REQUIRED</strong> again.\n      </p><p>\n      An ambiguous condition exists if the same file is <strong>REQUIRED</strong>\n      twice using different names (e.g., through symbolic links), or\n      different files with the same name are <strong>REQUIRED</strong> (by doing\n      some renaming between the invocations of <strong>REQUIRED</strong>).\n      </p><p>\n      An ambiguous condition exists if the stack effect of including the\n      file is not ( <em>i * x</em> -- <em>i * x</em> ).\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../rationale.html#rat:file:REQUIRED\">A.11.6.2.2144.50 REQUIRED</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.11.6.2.---- REQUIRED -->\n      Typical use:\n            <div class=\"quote\">\n\n        <a href=\"../file/Sq.html\">S\"</a> <code>filename\"</code> <strong>REQUIRED</strong>\n        \n        </div>\n        \n      "
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n\n            <div class=\"rm\">\nThis implementation does not implement the requirements with\n        regard to <a href=\"../core/MARKER.html\">MARKER</a> and <a href=\"../tools/FORGET.html\">FORGET</a> (<strong>REQUIRED</strong>\n        only includes each file once, whether a marker was executed or\n        not), so it is not a correct implementation on systems that\n        support these words. It extends the definition of <a href=\"../file/INCLUDED.html\">INCLUDED</a>\n        to record the name of files which have been either included or\n        required previously. The names are recorded in a linked list\n        held in the <code>included-names</code> variable.\n        <p>\n                </p><div class=\"tt\">\n<a href=\"../core/Colon.html\">:</a> save-mem\t<a href=\"../file/p.html\">(</a> addr1 u -- addr2 u ) <a href=\"../core/bs.html\">\\</a> gforth <br>\n          <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">copy a memory block into a newly allocated region in the heap</span> <br>\n          &nbsp;&nbsp; <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../core/toR.html\">&gt;R</a> <br>\n          &nbsp;&nbsp; <a href=\"../core/DUP.html\">DUP</a> <a href=\"../memory/ALLOCATE.html\">ALLOCATE</a> <a href=\"../exception/THROW.html\">THROW</a> <br>\n          &nbsp;&nbsp; <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../core/TwoDUP.html\">2DUP</a> <a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/ROT.html\">ROT</a> <a href=\"../core/ROT.html\">ROT</a> <a href=\"../core/MOVE.html\">MOVE</a> <a href=\"../core/Semi.html\">;</a>\n          <p>\n          <a href=\"../core/Colon.html\">:</a> name-add <a href=\"../file/p.html\">(</a> addr u listp -- ) <br>\n          &nbsp;&nbsp; <a href=\"../core/toR.html\">&gt;R</a> save-mem <a href=\"../file/p.html\">(</a> addr1 u ) <br>\n          &nbsp;&nbsp; 3 <a href=\"../core/CELLS.html\">CELLS</a> <a href=\"../memory/ALLOCATE.html\">ALLOCATE</a> <a href=\"../exception/THROW.html\">THROW</a> <a href=\"../core/bs.html\">\\</a> allocate list node <br>\n          &nbsp;&nbsp; <a href=\"../core/RFetch.html\">R@</a> <a href=\"../core/Fetch.html\">@</a> <a href=\"../core/OVER.html\">OVER</a> <a href=\"../core/Store.html\">!</a> <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">set next pointer</span> <br>\n          &nbsp;&nbsp; <a href=\"../core/DUP.html\">DUP</a> <a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/Store.html\">!</a> <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">store current node in list var</span> <br>\n          &nbsp;&nbsp; <a href=\"../core/CELLPlus.html\">CELL+</a> <a href=\"../core/TwoStore.html\">2!</a> <a href=\"../core/Semi.html\">;</a>\n          </p><p>\n          <a href=\"../core/Colon.html\">:</a> name-present? <a href=\"../file/p.html\">(</a> addr u list -- f ) <br>\n          &nbsp;&nbsp; <a href=\"../core/ROT.html\">ROT</a> <a href=\"../core/ROT.html\">ROT</a> <a href=\"../core/TwotoR.html\">2&gt;R</a> <a href=\"../core/BEGIN.html\">BEGIN</a> <a href=\"../file/p.html\">(</a> list R: addr u ) <br>\n          &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/DUP.html\">DUP</a> <br>\n          &nbsp;&nbsp; <a href=\"../core/WHILE.html\">WHILE</a> <br>\n          &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/DUP.html\">DUP</a> <a href=\"../core/CELLPlus.html\">CELL+</a> <a href=\"../core/TwoFetch.html\">2@</a> <a href=\"../core/TwoRFetch.html\">2R@</a> <a href=\"../string/COMPARE.html\">COMPARE</a> <a href=\"../core/ZeroEqual.html\">0=</a> <a href=\"../core/IF.html\">IF</a> <br>\n          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t\t<a href=\"../core/DROP.html\">DROP</a> <a href=\"../core/TwoRfrom.html\">2R&gt;</a> <a href=\"../core/TwoDROP.html\">2DROP</a> <a href=\"../core/TRUE.html\">TRUE</a> <a href=\"../core/EXIT.html\">EXIT</a> <br>\n          &nbsp;&nbsp;&nbsp;&nbsp;\t<a href=\"../core/THEN.html\">THEN</a> <br>\n          &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/Fetch.html\">@</a> <br>\n          &nbsp;&nbsp; <a href=\"../core/REPEAT.html\">REPEAT</a> <br>\n          &nbsp;&nbsp; <a href=\"../file/p.html\">(</a> <a href=\"../core/DROP.html\">DROP</a> 0 ) <a href=\"../core/TwoRfrom.html\">2R&gt;</a> <a href=\"../core/TwoDROP.html\">2DROP</a> <a href=\"../core/Semi.html\">;</a>\n          </p><p>\n          <a href=\"../core/Colon.html\">:</a> name-join <a href=\"../file/p.html\">(</a> addr u list -- ) <br>\n          &nbsp;&nbsp; <a href=\"../core/toR.html\">&gt;R</a> <a href=\"../core/TwoDUP.html\">2DUP</a> <a href=\"../core/RFetch.html\">R@</a> <a href=\"../core/Fetch.html\">@</a> name-present? <a href=\"../core/IF.html\">IF</a> <br>\n          &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/DROP.html\">DROP</a> <a href=\"../core/TwoDROP.html\">2DROP</a> <br>\n          &nbsp;&nbsp; <a href=\"../core/ELSE.html\">ELSE</a> <br>\n          &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/Rfrom.html\">R&gt;</a> name-add <br>\n          &nbsp;&nbsp; <a href=\"../core/THEN.html\">THEN</a> <a href=\"../core/Semi.html\">;</a>\n          </p><p>\n          <a href=\"../core/VARIABLE.html\">VARIABLE</a> included-names 0 included-names <a href=\"../core/Store.html\">!</a>\n          </p><p>\n          <a href=\"../core/Colon.html\">:</a> included <a href=\"../file/p.html\">(</a> i*x addr u -- j*x ) <br>\n          &nbsp;&nbsp; <a href=\"../core/TwoDUP.html\">2DUP</a> included-names name-join <br>\n          &nbsp;&nbsp; <a href=\"../file/INCLUDED.html\">INCLUDED</a> <a href=\"../core/Semi.html\">;</a>\n          </p><p>\n          <a href=\"../core/Colon.html\">:</a> <strong>REQUIRED</strong> <a href=\"../file/p.html\">(</a> i*x addr u -- i*x ) <br>\n          &nbsp;&nbsp; <a href=\"../core/TwoDUP.html\">2DUP</a> included-names <a href=\"../core/Fetch.html\">@</a> name-present? <a href=\"../core/ZeroEqual.html\">0=</a> <a href=\"../core/IF.html\">IF</a> <br>\n          &nbsp;&nbsp;&nbsp;&nbsp; included <br>\n          &nbsp;&nbsp; <a href=\"../core/ELSE.html\">ELSE</a> <br>\n          &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/TwoDROP.html\">2DROP</a> <br>\n          &nbsp;&nbsp; <a href=\"../core/THEN.html\">THEN</a> <a href=\"../core/Semi.html\">;</a>\n            \n          </p></div>\n        </div>\n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.11.6.2.---- REQUIRED -->\n      This test requires two additional files:\n      <code>required-helper1.fs</code> and\n      <code>required-helper2.fs</code>.\n      Both of which hold the text:\n            <div class=\"quote\">\n\n        <a href=\"../core/OnePlus.html\">1+</a>\n        \n        </div>\n      As for the test themselves:\n      <p>\n      <span class=\"tt\">T{ 0&nbsp;<br>\n      &nbsp;&nbsp;&nbsp;<a href=\"../file/Sq.html\">S\"</a>&nbsp;required-helper1.fs\"&nbsp;<strong>REQUIRED</strong>&nbsp;<a href=\"../core/bs.html\">\\</a>&nbsp;Increment&nbsp;TOS&nbsp;<br>\n      &nbsp;&nbsp;&nbsp;<a href=\"../file/REQUIRE.html\">REQUIRE</a>&nbsp;required-helper1.fs\t\t\t\t<a href=\"../core/bs.html\">\\</a>&nbsp;Ignore&nbsp;-&nbsp;already&nbsp;loaded&nbsp;<br>\n      &nbsp;&nbsp;&nbsp;<a href=\"../file/INCLUDE.html\">INCLUDE</a>&nbsp;required-helper1.fs\t\t\t\t<a href=\"../core/bs.html\">\\</a>&nbsp;Increment&nbsp;TOS&nbsp;<br>\n       -&gt; 2 }T</span> <br>\n      <span class=\"tt\">T{ 0&nbsp;<br>\n      &nbsp;&nbsp;&nbsp;<a href=\"../file/INCLUDE.html\">INCLUDE</a>&nbsp;required-helper2.fs\t\t\t\t<a href=\"../core/bs.html\">\\</a>&nbsp;Increment&nbsp;TOS&nbsp;<br>\n      &nbsp;&nbsp;&nbsp;<a href=\"../file/Sq.html\">S\"</a>&nbsp;required-helper2.fs\"&nbsp;<strong>REQUIRED</strong>&nbsp;<a href=\"../core/bs.html\">\\</a>&nbsp;Ignored&nbsp;-&nbsp;already&nbsp;loaded&nbsp;<br>\n      &nbsp;&nbsp;&nbsp;<a href=\"../file/REQUIRE.html\">REQUIRE</a>&nbsp;required-helper2.fs\t\t\t\t<a href=\"../core/bs.html\">\\</a>&nbsp;Ignored&nbsp;-&nbsp;already&nbsp;loaded&nbsp;<br>\n      &nbsp;&nbsp;&nbsp;<a href=\"../file/Sq.html\">S\"</a>&nbsp;required-helper2.fs\"&nbsp;<a href=\"../file/INCLUDED.html\">INCLUDED</a>\t<a href=\"../core/bs.html\">\\</a>&nbsp;Increment&nbsp;TOS&nbsp;<br>\n       -&gt; 2 }T</span>\n      \n      \n      </p>"
                    }
                }
            },
            "RESIZE-FILE": {
                "id": "file:RESIZE-FILE",
                "number": "11.6.1.2147",
                "name": "RESIZE-FILE",
                "english": " ",
                "list": "FILE",
                "basename": "RESIZE-FILE",
                "stackEffect": {
                    "html": {
                        " ": "( <em>ud fileid</em> -- <em>ior</em> )"
                    },
                    "plain": {
                        " ": "( ud fileid -- ior )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>ud fileid</em> -- <em>ior</em> )\n      <p>\n      Set the size of the file identified by <em>fileid</em> to\n      <em>ud</em>. <em>ior</em> is the implementation-defined I/O result\n      code.\n      </p><p>\n      If the resultant file is larger than the file before the\n      operation, the portion of the file added as a result of the\n      operation might not have been written.\n      </p><p>\n      At the conclusion of the operation, <a href=\"../file/FILE-SIZE.html\">FILE-SIZE</a> returns\n      the value <em>ud</em> and\n      <a href=\"file:FILE-POSITION\"><strong><code>FILE-</code></strong></a> \n      <a href=\"file:FILE-POSITION\"><strong><code>POSITION</code></strong></a>\n      returns an unspecified value.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../file/READ-FILE.html\">11.6.1.2080 READ-FILE</a>,\n      <a href=\"../file/READ-LINE.html\">11.6.1.2090 READ-LINE</a>.\n      <p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      <code>setpad</code> <br>\n      <span class=\"tt\">T{ fn2&nbsp;<a href=\"../file/RDivW.html\">R/W</a>&nbsp;<a href=\"../file/BIN.html\">BIN</a>&nbsp;<a href=\"../file/OPEN-FILE.html\">OPEN-FILE</a>&nbsp;<a href=\"../core/SWAP.html\">SWAP</a>&nbsp;fid2&nbsp;<a href=\"../core/Store.html\">!</a> -&gt; 0 }T</span> <br>\n      <span class=\"tt\">T{ 37.&nbsp;fid2&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<strong>RESIZE-FILE</strong> -&gt; 0 }T</span> <br>\n      <span class=\"tt\">T{ fid2&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<a href=\"../file/FILE-SIZE.html\">FILE-SIZE</a> -&gt; 37.&nbsp;0 }T</span> <br>\n      <span class=\"tt\">T{ 0.&nbsp;fid2&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<a href=\"../file/REPOSITION-FILE.html\">REPOSITION-FILE</a> -&gt; 0 }T</span> <br>\n      <span class=\"tt\">T{ cbuf&nbsp;buf&nbsp;100&nbsp;fid2&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<a href=\"../file/READ-FILE.html\">READ-FILE</a> -&gt; 37&nbsp;0 }T</span> <br>\n      <span class=\"tt\">T{ <a href=\"../core/PAD.html\">PAD</a>&nbsp;37&nbsp;buf&nbsp;37&nbsp;<a href=\"../string/COMPARE.html\">COMPARE</a> -&gt; 0 }T</span> <br>\n      <span class=\"tt\">T{ <a href=\"../core/PAD.html\">PAD</a>&nbsp;38&nbsp;buf&nbsp;38&nbsp;<a href=\"../string/COMPARE.html\">COMPARE</a> -&gt; 1 }T</span> <br>\n      <span class=\"tt\">T{ 500.&nbsp;fid2&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<strong>RESIZE-FILE</strong> -&gt; 0 }T</span> <br>\n      <span class=\"tt\">T{ fid2&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<a href=\"../file/FILE-SIZE.html\">FILE-SIZE</a> -&gt; 500.&nbsp;0 }T</span> <br>\n      <span class=\"tt\">T{ 0.&nbsp;fid2&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<a href=\"../file/REPOSITION-FILE.html\">REPOSITION-FILE</a> -&gt; 0 }T</span> <br>\n      <span class=\"tt\">T{ cbuf&nbsp;buf&nbsp;100&nbsp;fid2&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<a href=\"../file/READ-FILE.html\">READ-FILE</a> -&gt; 100&nbsp;0 }T</span> <br>\n      <span class=\"tt\">T{ <a href=\"../core/PAD.html\">PAD</a>&nbsp;37&nbsp;buf&nbsp;37&nbsp;<a href=\"../string/COMPARE.html\">COMPARE</a> -&gt; 0 }T</span> <br>\n      <span class=\"tt\">T{ fid2&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<a href=\"../file/CLOSE-FILE.html\">CLOSE-FILE</a> -&gt; 0 }T</span>\n      \n      \n      "
                    }
                }
            },
            "SOURCE-ID": {
                "id": "file:SOURCE-ID",
                "number": "11.6.1.2218",
                "name": "SOURCE-ID",
                "english": "source-i-d",
                "list": "FILE",
                "basename": "SOURCE-ID",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>0  |  -1  |  fileid</em> )"
                    },
                    "plain": {
                        " ": "( -- 0  |  -1  |  fileid )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>0  |  -1  |  fileid</em> )\n      <p>\n      Extend <a href=\"../core/SOURCE-ID.html\">6.2.2218 SOURCE-ID</a> to include text-file\n      input as follows:\n      </p><div class=\"center\">\n\n        <table class=\"center\">\n        <tbody><tr valign=\"top\"><td colspan=\"2\"><hr></td></tr>\n        <tr valign=\"top\"><td class=\"c\"><strong>SOURCE-ID</strong> </td><td>Input source </td></tr>\n        <tr valign=\"top\"><td colspan=\"2\"><hr></td></tr>\n        <tr valign=\"top\"><td class=\"c\"><em>fileid</em>\t</td><td>Text file \"<em>fileid</em>\" </td></tr>\n        <tr valign=\"top\"><td class=\"c\"><em>-1</em>\t\t</td><td>String (via <a href=\"../core/EVALUATE.html\">EVALUATE</a>) </td></tr>\n        <tr valign=\"top\"><td class=\"c\"><em>0</em>\t\t</td><td>User input device </td></tr>\n        <tr valign=\"top\"><td colspan=\"2\"><hr></td></tr>\n        <tr valign=\"top\"><td class=\"c\"></td></tr>\n        </tbody></table>\n        \n        </div>\n      <p>\n      An ambiguous condition exists if <strong>SOURCE-ID</strong> is used when\n      <a href=\"../block/BLK.html\">BLK</a> contains a non-zero value.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      <span class=\"tt\">T{ <strong>SOURCE-ID</strong>&nbsp;<a href=\"../core/DUP.html\">DUP</a>&nbsp;-1&nbsp;<a href=\"../core/Equal.html\">=</a>&nbsp;<a href=\"../core/SWAP.html\">SWAP</a>&nbsp;<a href=\"../core/ZeroEqual.html\">0=</a>&nbsp;<a href=\"../core/OR.html\">OR</a> -&gt; &lt;FALSE&gt; }T</span>\n      \n      \n      "
                    }
                }
            },
            "Seq": {
                "id": "file:Seq",
                "number": "11.6.2.2266",
                "name": "S\\\"",
                "english": "s-backslash-quote",
                "list": "FILE EXT",
                "basename": "Seq",
                "stackEffect": {
                    "html": {
                        "Interpretation:": "( <em>\"ccc&lt;quote&gt;\"</em> -- <em>c-addr u</em> )",
                        "Compilation:": "( <em>\"ccc&lt;quote&gt;\"</em> -- )",
                        "Run-time:": "( -- <em>c-addr u</em> )"
                    },
                    "plain": {
                        "Interpretation:": "( \"ccc<quote>\" -- c-addr u )",
                        "Compilation:": "( \"ccc<quote>\" -- )",
                        "Run-time:": "( -- c-addr u )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n\n      Extend the semantics of <a href=\"../core/Seq.html\">6.2.2266 S\\\"</a> to be:\n      <p>\n        \n      </p>"
                    },
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n ( <em>\"ccc&lt;quote&gt;\"</em> -- <em>c-addr u</em> )\n      <p>\n      Parse <em>ccc</em> delimited by <code>\"</code> (double quote) according to the\n      translation rules given in <a href=\"../core/Seq.html\">6.2.2266 S\\\"</a>.  Store the resulting string in a\n      transient buffer <em>c-addr u</em>.\n      </p><p>\n        \n      </p>"
                    },
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n ( <em>\"ccc&lt;quote&gt;\"</em> -- )\n      <p>\n      Parse <em>ccc</em> delimited by <code>\"</code> (double quote) according to the\n      translation rules given in <a href=\"../core/Seq.html\">6.2.2266 S\\\"</a>.  Append the run-time semantics\n      given below to the current definition.\n      </p><p>\n        \n      </p>"
                    },
                    "Run-time:": {
                        "name": "Run-time:",
                        "html": "\n\n ( -- <em>c-addr u</em> )\n      <p>\n      Return a string <em>c-addr u</em> describing the translation of <em>ccc</em>.\n      A program shall not alter the returned string.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/Seq.html\">6.2.2266 S\\\"</a> <strong><a href=\"../file.html#file:buffers\">11.3.4 Other transient regions</a></strong>,\n      <a href=\"../file/Sq.html\">11.6.1.2165 S\"</a>, <strong><a href=\"../rationale.html#rat:file:buffers\">A.11.3.4 Other transient regions</a></strong>.\n      \n      "
                    }
                }
            },
            "Sq": {
                "id": "file:Sq",
                "number": "11.6.1.2165",
                "name": "S\"",
                "english": "s-quote",
                "list": "FILE",
                "basename": "Sq",
                "stackEffect": {
                    "html": {
                        "Interpretation:": "( <em>\"ccc&lt;quote&gt;\"</em> -- <em>c-addr u</em> )",
                        "Compilation:": "( <em>\"ccc&lt;quote&gt;\"</em> -- )",
                        "Run-time:": "( -- <em>c-addr u</em> )"
                    },
                    "plain": {
                        "Interpretation:": "( \"ccc<quote>\" -- c-addr u )",
                        "Compilation:": "( \"ccc<quote>\" -- )",
                        "Run-time:": "( -- c-addr u )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n Extend the semantics of <a href=\"../core/Sq.html\">6.1.2165 S\"</a> to be:\n        \n      "
                    },
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      ( <em>\"ccc&lt;quote&gt;\"</em> -- <em>c-addr u</em> )\n      <p>\n      Parse <em>ccc</em> delimited by <code>\"</code> (double quote). Store\n      the resulting string in a transient buffer <em>c-addr u</em>.\n      </p><p>\n        \n      </p>"
                    },
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      ( <em>\"ccc&lt;quote&gt;\"</em> -- )\n      <p>\n      Parse <em>ccc</em> delimited by <code>\"</code> (double quote). Append\n      the run-time semantics given below to the current definition.\n      </p><p>\n        \n      </p>"
                    },
                    "Run-time:": {
                        "name": "Run-time:",
                        "html": "\n\n\n      ( -- <em>c-addr u</em> )\n      <p>\n      Return <em>c-addr</em> and <em>u</em> that describe a string\n      consisting of the characters <em>ccc</em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:parsing\">3.4.1 Parsing</a></strong>,\n      <a href=\"../core/Cq.html\">6.2.0855 C\"</a>,\n      <a href=\"../core/Sq.html\">6.1.2165 S\"</a>,\n      <strong><a href=\"../file.html#file:buffers\">11.3.4 Other transient regions</a></strong>, <br>\n      <a href=\"../file/Seq.html\">11.6.2.2266 S\\\"</a>,\n      <strong><a href=\"../rationale.html#rat:file:buffers\">A.11.3.4 Other transient regions</a></strong>,\n      <a href=\"../rationale.html#rat:file:Sq\">A.11.6.1.2165 S\"</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.11.6.1.2165 S\" -->\n      Typical use:\n      ... <strong>S\"</strong> <em>ccc</em><code>\"</code> ...\n      <p>\n      The interpretation semantics for <strong>S\"</strong> are intended to\n      provide a simple mechanism for entering a string in the\n      interpretation state. Since an implementation may choose to\n      provide only one buffer for interpreted strings, an\n      interpreted string is subject to being overwritten by the\n      next execution of <strong>S\"</strong> in interpretation state. It is\n      intended that no standard words other than <strong>S\"</strong> should\n      in themselves cause the interpreted string to be overwritten.\n      However, since words such as <a href=\"../core/EVALUATE.html\">EVALUATE</a>,\n      <a href=\"../block/LOAD.html\">LOAD</a>, <a href=\"../file/INCLUDE-FILE.html\">INCLUDE-FILE</a> and\n      <a href=\"../file/INCLUDED.html\">INCLUDED</a> can result in the interpretation of arbitrary\n      text, possibly including instances of <strong>S\"</strong>, the\n      interpreted string may be invalidated by some uses of these\n      words.\n      </p><p>\n      When the possibility of overwriting a string can arise, it is\n      prudent to copy the string to a \"safe\" buffer allocated by\n      the application.\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      <span class=\"tt\">T{ <strong>S\"</strong>&nbsp;A&nbsp;String\"<a href=\"../core/TwoDROP.html\">2DROP</a> -&gt;  }T</span>\n      &nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">There is no space between the \" and <a href=\"../core/TwoDROP.html\">2DROP</a></span>\n      \n      \n      "
                    }
                }
            },
            "WDivO": {
                "id": "file:W/O",
                "number": "11.6.1.2425",
                "name": "W/O",
                "english": "w-o",
                "list": "FILE",
                "basename": "WDivO",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>fam</em> )"
                    },
                    "plain": {
                        " ": "( -- fam )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>fam</em> )\n      <p>\n      <em>fam</em> is the implementation-defined value for selecting\n      the \"write only\" file access method.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../file/CREATE-FILE.html\">11.6.1.1010 CREATE-FILE</a>,\n      <a href=\"../file/OPEN-FILE.html\">11.6.1.1970 OPEN-FILE</a>.\n      \n      "
                    }
                }
            },
            "WRITE-FILE": {
                "id": "file:WRITE-FILE",
                "number": "11.6.1.2480",
                "name": "WRITE-FILE",
                "english": " ",
                "list": "FILE",
                "basename": "WRITE-FILE",
                "stackEffect": {
                    "html": {
                        " ": "( <em>c-addr u fileid</em> -- <em>ior</em> )"
                    },
                    "plain": {
                        " ": "( c-addr u fileid -- ior )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>c-addr u fileid</em> -- <em>ior</em> )\n      <p>\n      Write <em>u</em> characters from <em>c-addr</em> to the file\n      identified by <em>fileid</em> starting at its current position.\n      <em>ior</em> is the implementation-defined I/O result code.\n      </p><p>\n      At the conclusion of the operation, <a href=\"../file/FILE-POSITION.html\">FILE-POSITION</a> returns\n      the next file position after the last character written to the\n      file, and <a href=\"../file/FILE-SIZE.html\">FILE-SIZE</a> returns a value greater than or equal\n      to the value returned by <a href=\"../file/FILE-POSITION.html\">FILE-POSITION</a>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../file/READ-FILE.html\">11.6.1.2080 READ-FILE</a>,\n      <a href=\"../file/READ-LINE.html\">11.6.1.2090 READ-LINE</a>.\n      \n      "
                    }
                }
            },
            "WRITE-LINE": {
                "id": "file:WRITE-LINE",
                "number": "11.6.1.2485",
                "name": "WRITE-LINE",
                "english": " ",
                "list": "FILE",
                "basename": "WRITE-LINE",
                "stackEffect": {
                    "html": {
                        " ": "( <em>c-addr u fileid</em> -- <em>ior</em> )"
                    },
                    "plain": {
                        " ": "( c-addr u fileid -- ior )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>c-addr u fileid</em> -- <em>ior</em> )\n      <p>\n      Write <em>u</em> characters from <em>c-addr</em> followed by the\n      implementation-dependent line terminator to the file identified\n      by <em>fileid</em> starting at its current position. <em>ior</em> is\n      the implementation-defined I/O result code.\n      </p><p>\n      At the conclusion of the operation, <a href=\"../file/FILE-POSITION.html\">FILE-POSITION</a> returns\n      the next file position after the last character written to the\n      file, and <a href=\"../file/FILE-SIZE.html\">FILE-SIZE</a> returns a value greater than or equal\n      to the value returned by <a href=\"../file/FILE-POSITION.html\">FILE-POSITION</a>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../file/READ-FILE.html\">11.6.1.2080 READ-FILE</a>,\n      <a href=\"../file/READ-LINE.html\">11.6.1.2090 READ-LINE</a>.\n      <p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n      <div class=\"tt\">\n<a href=\"../core/Colon.html\">:</a> line1 <a href=\"../file/Sq.html\">S\"</a> Line 1\" <a href=\"../core/Semi.html\">;</a>\n        <p>\n        <span class=\"tt\">T{ fn1&nbsp;<a href=\"../file/WDivO.html\">W/O</a>&nbsp;<a href=\"../file/OPEN-FILE.html\">OPEN-FILE</a>&nbsp;<a href=\"../core/SWAP.html\">SWAP</a>&nbsp;fid1&nbsp;<a href=\"../core/Store.html\">!</a> -&gt; 0 }T</span> <br>\n        <span class=\"tt\">T{ line1&nbsp;fid1&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<strong>WRITE-LINE</strong> -&gt; 0 }T</span> <br>\n        <span class=\"tt\">T{ fid1&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<a href=\"../file/CLOSE-FILE.html\">CLOSE-FILE</a> -&gt; 0 }T</span>\n        \n        \n        </p></div>\n      "
                    }
                }
            },
            "p": {
                "id": "file:p",
                "number": "11.6.1.0080",
                "name": "(",
                "english": "paren",
                "list": "FILE",
                "basename": "p",
                "stackEffect": {
                    "html": {
                        " ": "( <em>\"ccc&lt;paren&gt;\"</em> -- )"
                    },
                    "plain": {
                        " ": "( \"ccc<paren>\" -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>\"ccc&lt;paren&gt;\"</em> -- )\n      <p>\n      Extend the semantics of <a href=\"../core/p.html\">6.1.0080 (</a> to include:\n      </p><p>\n      When parsing from a text file, if the end of the parse area is\n      reached before a right parenthesis is found, refill the input\n      buffer from the next line of the file, set <a href=\"../core/toIN.html\">&gt;IN</a> to\n      zero, and resume parsing, repeating this process until either a\n      right parenthesis is found or the end of the file is reached.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      <span class=\"tt\">T{ <strong>(</strong>&nbsp;1&nbsp;2&nbsp;3&nbsp;<br>\n      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;5&nbsp;6&nbsp;<br>\n      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;8&nbsp;9&nbsp;)&nbsp;11&nbsp;22&nbsp;33 -&gt; 11&nbsp;22&nbsp;33 }T</span>\n      \n      \n      "
                    }
                }
            }
        }
    },
    "floating": {
        "name": "floating",
        "words": {
            "DFALIGN": {
                "id": "floating:DFALIGN",
                "number": "12.6.2.1205",
                "name": "DFALIGN",
                "english": "d-f-align",
                "list": "FLOATING EXT",
                "basename": "DFALIGN",
                "stackEffect": {
                    "html": {
                        " ": "( -- )"
                    },
                    "plain": {
                        " ": "( -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- )\n      <p>\n      If the data-space pointer is not double-float aligned, reserve\n      enough data space to make it so.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../float.html#float:addr\">12.3.1.1 Addresses</a></strong>.\n      \n      "
                    }
                }
            },
            "DFALIGNED": {
                "id": "floating:DFALIGNED",
                "number": "12.6.2.1207",
                "name": "DFALIGNED",
                "english": "d-f-aligned",
                "list": "FLOATING EXT",
                "basename": "DFALIGNED",
                "stackEffect": {
                    "html": {
                        " ": "( <em>addr</em> -- <em>df-addr</em> )"
                    },
                    "plain": {
                        " ": "( addr -- df-addr )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>addr</em> -- <em>df-addr</em> )\n      <p>\n      <em>df-addr</em> is the first double-float-aligned address greater\n      than or equal to <em>addr</em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../float.html#float:addr\">12.3.1.1 Addresses</a></strong>.\n      \n      "
                    }
                }
            },
            "DFFIELDColon": {
                "id": "floating:DFFIELD:",
                "number": "12.6.2.1207.40",
                "name": "DFFIELD:",
                "english": "d-f-field-colon",
                "list": "FLOATING EXT",
                "basename": "DFFIELDColon",
                "stackEffect": {
                    "html": {
                        " ": "( <em>n<sub>1</sub> \"&lt;spaces&gt;name\"</em> -- <em>n<sub>2</sub></em> )",
                        "name Execution:": "( <em>addr<sub>1</sub></em> -- <em>addr<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( n1 \"<spaces>name\" -- n2 )",
                        "name Execution:": "( addr1 -- addr2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>n<sub>1</sub> \"&lt;spaces&gt;name\"</em> -- <em>n<sub>2</sub></em> )\n      <p>\n      Skip leading space delimiters. Parse <em>name</em> delimited by\n      a space. <em>Offset</em> is the first double-float aligned value\n      greater than or equal to <em>n<sub>1</sub></em>.  <em>n<sub>2</sub> = offset + 1</em>\n      double-float.\n      </p><p>\n      Create a definition for <em>name</em> with the execution semantics\n      given below.\n      </p><p>\n        \n      </p>"
                    },
                    "name Execution:": {
                        "name": "name Execution:",
                        "html": "\n\n\n      ( <em>addr<sub>1</sub></em> -- <em>addr<sub>2</sub></em> )\n      <p>\n      Add the <em>offset</em> calculated during the compile-time action to\n      <em>addr<sub>1</sub></em> giving the address <em>addr<sub>2</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../facility/PlusFIELD.html\">10.6.2.0135 +FIELD</a>,\n      <a href=\"../facility/BEGIN-STRUCTURE.html\">10.6.2.0763 BEGIN-STRUCTURE</a>, <br>\n      <a href=\"../facility/END-STRUCTURE.html\">10.6.2.1336 END-STRUCTURE</a>,\n      <a href=\"../rationale.html#rat:facility:FIELD:\">A.10.6.2.1518 FIELD:</a>.\n      \n      "
                    }
                }
            },
            "DFFetch": {
                "id": "floating:DF@",
                "number": "12.6.2.1204",
                "name": "DF@",
                "english": "d-f-fetch",
                "list": "FLOATING EXT",
                "basename": "DFFetch",
                "stackEffect": {
                    "html": {
                        " ": "( <em>df-addr</em> -- ) ( F: -- <em>r</em> ) or\n      ( <em>df-addr</em> -- <em>r</em> )"
                    },
                    "plain": {
                        " ": "( df-addr -- ) ( F: -- r ) or\n( df-addr -- r )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>df-addr</em> -- ) ( F: -- <em>r</em> ) or\n      ( <em>df-addr</em> -- <em>r</em> )\n      <p>\n      Fetch the 64-bit IEEE double-precision number stored at\n      <em>df-addr</em> to the floating-point stack as <em>r</em> in the\n      internal representation. If the IEEE double-precision\n      significand has more precision than the internal representation\n      it will be rounded to the internal representation using the\n      \"round to nearest\" rule. An ambiguous condition exists if the\n      exponent of the IEEE double-precision representation is too\n      large to be accommodated by the internal representation.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../float.html#float:addr\">12.3.1.1 Addresses</a></strong>,\n      <strong><a href=\"../float.html#float:ops\">12.3.2 Floating-point operations</a></strong>.\n      \n      "
                    }
                }
            },
            "DFLOATPlus": {
                "id": "floating:DFLOAT+",
                "number": "12.6.2.1208",
                "name": "DFLOAT+",
                "english": "d-float-plus",
                "list": "FLOATING EXT",
                "basename": "DFLOATPlus",
                "stackEffect": {
                    "html": {
                        " ": "( <em>df-addr<sub>1</sub></em> -- <em>df-addr<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( df-addr1 -- df-addr2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>df-addr<sub>1</sub></em> -- <em>df-addr<sub>2</sub></em> )\n      <p>\n      Add the size in address units of a 64-bit IEEE double-precision\n      number to <em>df-addr<sub>1</sub></em>, giving <em>df-addr<sub>2</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../float.html#float:addr\">12.3.1.1 Addresses</a></strong>.\n      \n      "
                    }
                }
            },
            "DFLOATS": {
                "id": "floating:DFLOATS",
                "number": "12.6.2.1209",
                "name": "DFLOATS",
                "english": "d-floats",
                "list": "FLOATING EXT",
                "basename": "DFLOATS",
                "stackEffect": {
                    "html": {
                        " ": "( <em>n<sub>1</sub></em> -- <em>n<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( n1 -- n2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>n<sub>1</sub></em> -- <em>n<sub>2</sub></em> )\n      <p>\n      <em>n<sub>2</sub></em> is the size in address units of <em>n<sub>1</sub></em> 64-bit\n      IEEE double-precision numbers.\n      \n      </p>"
                    }
                }
            },
            "DFStore": {
                "id": "floating:DF!",
                "number": "12.6.2.1203",
                "name": "DF!",
                "english": "d-f-store",
                "list": "FLOATING EXT",
                "basename": "DFStore",
                "stackEffect": {
                    "html": {
                        " ": "( <em>df-addr</em> -- ) ( F: <em>r</em> -- ) or\n      ( <em>r df-addr</em> -- )"
                    },
                    "plain": {
                        " ": "( df-addr -- ) ( F: r -- ) or\n( r df-addr -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>df-addr</em> -- ) ( F: <em>r</em> -- ) or\n      ( <em>r df-addr</em> -- )\n      <p>\n      Store the floating-point number <em>r</em> as a 64-bit IEEE\n      double-precision number at <em>df-addr</em>. If the significand\n      of the internal representation of <em>r</em> has more precision than\n      the IEEE double-precision format, it will be rounded using the\n      \"round to nearest\" rule. An ambiguous condition exists if the\n      exponent of <em>r</em> is too large to be accommodated in IEEE\n      double-precision format.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../float.html#float:addr\">12.3.1.1 Addresses</a></strong>,\n      <strong><a href=\"../float.html#float:ops\">12.3.2 Floating-point operations</a></strong>.\n      \n      "
                    }
                }
            },
            "DtoF": {
                "id": "floating:DtoF",
                "number": "12.6.1.1130",
                "name": "D>F",
                "english": "d-to-f",
                "list": "FLOATING",
                "basename": "DtoF",
                "stackEffect": {
                    "html": {
                        " ": "( <em>d</em> -- ) ( F: -- <em>r</em> ) or\n      ( <em>d</em> -- <em>r</em> )"
                    },
                    "plain": {
                        " ": "( d -- ) ( F: -- r ) or\n( d -- r )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>d</em> -- ) ( F: -- <em>r</em> ) or\n      ( <em>d</em> -- <em>r</em> )\n      <p>\n      <em>r</em> is the floating-point equivalent of <em>d</em>. An ambiguous\n      condition exists if <em>d</em> cannot be precisely represented as a\n      floating-point value.\n      \n      </p>"
                    }
                }
            },
            "FABS": {
                "id": "floating:FABS",
                "number": "12.6.2.1474",
                "name": "FABS",
                "english": "f-abs",
                "list": "FLOATING EXT",
                "basename": "FABS",
                "stackEffect": {
                    "html": {
                        " ": "( F: <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> ) or\n      ( <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( F: r1 -- r2 ) or\n( r1 -- r2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( F: <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> ) or\n      ( <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> )\n      <p>\n      <em>r<sub>2</sub></em> is the absolute value of <em>r<sub>1</sub></em>.\n      \n      </p>"
                    }
                }
            },
            "FACOS": {
                "id": "floating:FACOS",
                "number": "12.6.2.1476",
                "name": "FACOS",
                "english": "f-a-cos",
                "list": "FLOATING EXT",
                "basename": "FACOS",
                "stackEffect": {
                    "html": {
                        " ": "( F: <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> ) or\n      ( <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( F: r1 -- r2 ) or\n( r1 -- r2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( F: <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> ) or\n      ( <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> )\n      <p>\n      <em>r<sub>2</sub></em> is the principal radian angle whose cosine is\n      <em>r<sub>1</sub></em>. An ambiguous condition exists if <em> | r<sub>1</sub> | </em> is\n      greater than one.\n      \n      </p>"
                    }
                }
            },
            "FACOSH": {
                "id": "floating:FACOSH",
                "number": "12.6.2.1477",
                "name": "FACOSH",
                "english": "f-a-cosh",
                "list": "FLOATING EXT",
                "basename": "FACOSH",
                "stackEffect": {
                    "html": {
                        " ": "( F: <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> ) or\n      ( <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( F: r1 -- r2 ) or\n( r1 -- r2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( F: <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> ) or\n      ( <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> )\n      <p>\n      <em>r<sub>2</sub></em> is the floating-point value whose hyperbolic cosine is\n      <em>r<sub>1</sub></em>. An ambiguous condition exists if <em>r<sub>1</sub></em> is less\n      than one.\n      \n      </p>"
                    }
                }
            },
            "FALIGN": {
                "id": "floating:FALIGN",
                "number": "12.6.1.1479",
                "name": "FALIGN",
                "english": "f-align",
                "list": "FLOATING",
                "basename": "FALIGN",
                "stackEffect": {
                    "html": {
                        " ": "( -- )"
                    },
                    "plain": {
                        " ": "( -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- )\n      <p>\n      If the data-space pointer is not float aligned, reserve enough\n      data space to make it so.\n      \n      </p>"
                    }
                }
            },
            "FALIGNED": {
                "id": "floating:FALIGNED",
                "number": "12.6.1.1483",
                "name": "FALIGNED",
                "english": "f-aligned",
                "list": "FLOATING",
                "basename": "FALIGNED",
                "stackEffect": {
                    "html": {
                        " ": "( <em>addr</em> -- <em>f-addr</em> )"
                    },
                    "plain": {
                        " ": "( addr -- f-addr )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>addr</em> -- <em>f-addr</em> )\n      <p>\n      <em>f-addr</em> is the first float-aligned address greater than\n      or equal to <em>addr</em>.\n      \n      </p>"
                    }
                }
            },
            "FALOG": {
                "id": "floating:FALOG",
                "number": "12.6.2.1484",
                "name": "FALOG",
                "english": "f-a-log",
                "list": "FLOATING EXT",
                "basename": "FALOG",
                "stackEffect": {
                    "html": {
                        " ": "( F: <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> ) or\n      ( <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( F: r1 -- r2 ) or\n( r1 -- r2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( F: <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> ) or\n      ( <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> )\n      <p>\n      Raise ten to the power <em>r<sub>1</sub></em>, giving <em>r<sub>2</sub></em>.\n      \n      </p>"
                    }
                }
            },
            "FASIN": {
                "id": "floating:FASIN",
                "number": "12.6.2.1486",
                "name": "FASIN",
                "english": "f-a-sine",
                "list": "FLOATING EXT",
                "basename": "FASIN",
                "stackEffect": {
                    "html": {
                        " ": "( F: <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> ) or\n      ( <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( F: r1 -- r2 ) or\n( r1 -- r2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( F: <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> ) or\n      ( <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> )\n      <p>\n      <em>r<sub>2</sub></em> is the principal radian angle whose sine is <em>r<sub>1</sub></em>.\n      An ambiguous condition exists if <em> | r<sub>1</sub> | </em> is greater than one.\n      \n      </p>"
                    }
                }
            },
            "FASINH": {
                "id": "floating:FASINH",
                "number": "12.6.2.1487",
                "name": "FASINH",
                "english": "f-a-cinch",
                "list": "FLOATING EXT",
                "basename": "FASINH",
                "stackEffect": {
                    "html": {
                        " ": "( F: <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> ) or\n      ( <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( F: r1 -- r2 ) or\n( r1 -- r2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( F: <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> ) or\n      ( <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> )\n      <p>\n      <em>r<sub>2</sub></em> is the floating-point value whose hyperbolic sine is\n      <em>r<sub>1</sub></em>.\n      \n      </p>"
                    }
                }
            },
            "FATAN": {
                "id": "floating:FATAN",
                "number": "12.6.2.1488",
                "name": "FATAN",
                "english": "f-a-tan",
                "list": "FLOATING EXT",
                "basename": "FATAN",
                "stackEffect": {
                    "html": {
                        " ": "( F: <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> ) or\n      ( <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( F: r1 -- r2 ) or\n( r1 -- r2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( F: <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> ) or\n      ( <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> )\n      <p>\n      <em>r<sub>2</sub></em> is the principal radian angle whose tangent is\n      <em>r<sub>1</sub></em>.\n      \n      </p>"
                    }
                }
            },
            "FATANH": {
                "id": "floating:FATANH",
                "number": "12.6.2.1491",
                "name": "FATANH",
                "english": "f-a-tan-h",
                "list": "FLOATING EXT",
                "basename": "FATANH",
                "stackEffect": {
                    "html": {
                        " ": "( F: <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> ) or\n      ( <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( F: r1 -- r2 ) or\n( r1 -- r2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( F: <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> ) or\n      ( <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> )\n      <p>\n      <em>r<sub>2</sub></em> is the floating-point value whose hyperbolic tangent is\n      <em>r<sub>1</sub></em>. An ambiguous condition exists if <em>r<sub>1</sub></em> is outside\n      the range of -1E0 to 1E0.\n      \n      </p>"
                    }
                }
            },
            "FATANTwo": {
                "id": "floating:FATAN2",
                "number": "12.6.2.1489",
                "name": "FATAN2",
                "english": "f-a-tan-two",
                "list": "FLOATING EXT",
                "basename": "FATANTwo",
                "stackEffect": {
                    "html": {
                        " ": "( F: <em>r<sub>1</sub> r<sub>2</sub></em> -- <em>r<sub>3</sub></em> ) or\n      ( <em>r<sub>1</sub> r<sub>2</sub></em> -- <em>r<sub>3</sub></em> )"
                    },
                    "plain": {
                        " ": "( F: r1 r2 -- r3 ) or\n( r1 r2 -- r3 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( F: <em>r<sub>1</sub> r<sub>2</sub></em> -- <em>r<sub>3</sub></em> ) or\n      ( <em>r<sub>1</sub> r<sub>2</sub></em> -- <em>r<sub>3</sub></em> )\n      <p>\n      <em>r<sub>3</sub></em> is the principal radian angle (between -<em>π</em> and <em>π</em>)\n      whose tangent is <em>r<sub>1</sub>/r<sub>2</sub></em>.\n      A system that returns false for \"<code>-0E 0E 0E <a href=\"../floating/Ftilde.html\">F~</a></code>\"\n      shall return a value (approximating) <em>-π</em> when <em>r<sub>1</sub></em> <em>=</em> 0E\n      and <em>r<sub>2</sub></em> is negative.\n      An ambiguous condition exists if <em>r<sub>1</sub></em> and <em>r<sub>2</sub></em> are\n      zero.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../rationale.html#rat:floating:FATAN2\">A.12.6.2.1489 FATAN2</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.12.6.1.1489 FATAN2 -->\n      <a href=\"../floating/FSINCOS.html\">FSINCOS</a> and <strong>FATAN2</strong> are a complementary pair of\n      operators which convert angles to 2-vectors and vice-versa.\n      They are essential to most geometric and physical applications\n      since they correctly and unambiguously handle this conversion\n      in all cases except null vectors, even when the tangent of the\n      angle would be infinite.\n      <p>\n      <a href=\"../floating/FSINCOS.html\">FSINCOS</a> returns a Cartesian unit vector in the direction\n      of the given angle, measured counter-clockwise from the positive\n      X-axis. The order of results on the stack, namely <em>y</em> underneath\n      <em>x</em>, permits the 2-vector data type to be additionally viewed\n      and used as a ratio approximating the tangent of the angle.\n      Thus the phrase <a href=\"../floating/FSINCOS.html\">FSINCOS</a> <a href=\"../floating/FDiv.html\">F/</a> is functionally\n      equivalent to <a href=\"../floating/FTAN.html\">FTAN</a>, but is useful over only a limited\n      and discontinuous range of angles, whereas <a href=\"../floating/FSINCOS.html\">FSINCOS</a> and\n      <strong>FATAN2</strong> are useful for all angles.\n      </p><p>\n      The argument order for <strong>FATAN2</strong> is the same, converting a\n      vector in the conventional representation to a scalar angle.\n      Thus, for all angles, <a href=\"../floating/FSINCOS.html\">FSINCOS</a> <strong>FATAN2</strong> is an identity\n      within the accuracy of the arithmetic and the argument range of\n      <a href=\"../floating/FSINCOS.html\">FSINCOS</a>. Note that while <a href=\"../floating/FSINCOS.html\">FSINCOS</a> always returns a\n      valid unit vector, <strong>FATAN2</strong> will accept any non-null vector.\n      An ambiguous condition exists if the vector argument to\n      <strong>FATAN2</strong> has zero magnitude.\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n      <div class=\"tt\">\n<a href=\"../tools/BracketUNDEFINED.html\">[UNDEFINED]</a>  NaN <a href=\"../tools/BracketIF.html\">[IF]</a>  0e 0e <a href=\"../floating/FDiv.html\">F/</a> <a href=\"../floating/FCONSTANT.html\">FCONSTANT</a>  NaN <a href=\"../tools/BracketTHEN.html\">[THEN]</a> <br>\n        <a href=\"../tools/BracketUNDEFINED.html\">[UNDEFINED]</a> +Inf <a href=\"../tools/BracketIF.html\">[IF]</a>  1e 0e <a href=\"../floating/FDiv.html\">F/</a> <a href=\"../floating/FCONSTANT.html\">FCONSTANT</a> +Inf <a href=\"../tools/BracketTHEN.html\">[THEN]</a> <br>\n        <a href=\"../tools/BracketUNDEFINED.html\">[UNDEFINED]</a> -Inf <a href=\"../tools/BracketIF.html\">[IF]</a> -1e 0e <a href=\"../floating/FDiv.html\">F/</a> <a href=\"../floating/FCONSTANT.html\">FCONSTANT</a> -Inf <a href=\"../tools/BracketTHEN.html\">[THEN]</a>\n        <p>\n        <a href=\"../core/TRUE.html\">TRUE</a> verbose <a href=\"../core/Store.html\">!</a> <br>\n        <a href=\"../core/DECIMAL.html\">DECIMAL</a>\n        </p><p>\n        <span class=\"rm\">The test harness default for <code>EXACT?</code> is TRUE.\n        Uncomment the following line if your system needs it to\n        be FALSE</span> <br>\n        <a href=\"../core/bs.html\">\\</a> SET-NEAR\n        </p><p>\n        <a href=\"../core/VARIABLE.html\">VARIABLE</a> #errors    0 #errors <a href=\"../core/Store.html\">!</a>\n        </p><p>\n        <a href=\"../core/ColonNONAME.html\">:NONAME</a> <a href=\"../core/p.html\">(</a> c-addr u -- ) <br>\n        &nbsp;&nbsp; <a href=\"../core/p.html\">(</a> <span class=\"rm\">Display an error message followed by the\n        line that had the error@.</span> ) <br>\n        &nbsp;&nbsp; 1 #errors <a href=\"../core/PlusStore.html\">+!</a> error1 <a href=\"../core/Semi.html\">;</a> error-xt <a href=\"../core/Store.html\">!</a>\n        </p><p>\n        <a href=\"../tools/BracketUNDEFINED.html\">[UNDEFINED]</a> pi <a href=\"../tools/BracketIF.html\">[IF]</a> <br>\n        &nbsp;&nbsp; 0.3141592653589793238463E1 <a href=\"../floating/FCONSTANT.html\">FCONSTANT</a> pi <br>\n        <a href=\"../tools/BracketTHEN.html\">[THEN]</a>\n        </p><p>\n        <a href=\"../tools/BracketUNDEFINED.html\">[UNDEFINED]</a> -pi <a href=\"../tools/BracketIF.html\">[IF]</a> <br>\n        &nbsp;&nbsp; pi <a href=\"../floating/FNEGATE.html\">FNEGATE</a> <a href=\"../floating/FCONSTANT.html\">FCONSTANT</a> -pi <br>\n        <a href=\"../tools/BracketTHEN.html\">[THEN]</a>\n        </p><p>\n        <a href=\"../core/FALSE.html\">FALSE</a> <a href=\"../tools/BracketIF.html\">[IF]</a> <br>\n        &nbsp;&nbsp;  0.7853981633974483096157E0 <a href=\"../floating/FCONSTANT.html\">FCONSTANT</a>   pi/4 <br>\n        &nbsp;&nbsp; -0.7853981633974483096157E0 <a href=\"../floating/FCONSTANT.html\">FCONSTANT</a>  -pi/4 <br>\n        &nbsp;&nbsp;  0.1570796326794896619231E1 <a href=\"../floating/FCONSTANT.html\">FCONSTANT</a>   pi/2 <br>\n        &nbsp;&nbsp; -0.1570796326794896619231E1 <a href=\"../floating/FCONSTANT.html\">FCONSTANT</a>  -pi/2 <br>\n        &nbsp;&nbsp;  0.4712388980384689857694E1 <a href=\"../floating/FCONSTANT.html\">FCONSTANT</a>  3pi/2 <br>\n        &nbsp;&nbsp;  0.2356194490192344928847E1 <a href=\"../floating/FCONSTANT.html\">FCONSTANT</a>  3pi/4 <br>\n        &nbsp;&nbsp; -0.2356194490192344928847E1 <a href=\"../floating/FCONSTANT.html\">FCONSTANT</a> -3pi/4 <br>\n        <a href=\"../tools/BracketELSE.html\">[ELSE]</a> <br>\n        &nbsp;&nbsp;  pi   4e <a href=\"../floating/FDiv.html\">F/</a> <a href=\"../floating/FCONSTANT.html\">FCONSTANT</a>   pi/4 <br>\n        &nbsp;&nbsp; -pi   4e <a href=\"../floating/FDiv.html\">F/</a> <a href=\"../floating/FCONSTANT.html\">FCONSTANT</a>  -pi/4 <br>\n        &nbsp;&nbsp;  pi   2e <a href=\"../floating/FDiv.html\">F/</a> <a href=\"../floating/FCONSTANT.html\">FCONSTANT</a>   pi/2 <br>\n        &nbsp;&nbsp; -pi   2e <a href=\"../floating/FDiv.html\">F/</a> <a href=\"../floating/FCONSTANT.html\">FCONSTANT</a>  -pi/2 <br>\n        &nbsp;&nbsp;  pi/2 3e <a href=\"../floating/FTimes.html\">F*</a> <a href=\"../floating/FCONSTANT.html\">FCONSTANT</a>  3pi/2 <br>\n        &nbsp;&nbsp;  pi/4 3e <a href=\"../floating/FTimes.html\">F*</a> <a href=\"../floating/FCONSTANT.html\">FCONSTANT</a>  3pi/4 <br>\n        &nbsp;&nbsp; -pi/4 3e <a href=\"../floating/FTimes.html\">F*</a> <a href=\"../floating/FCONSTANT.html\">FCONSTANT</a> -3pi/4 <br>\n        <a href=\"../tools/BracketTHEN.html\">[THEN]</a>\n        </p><p>\n        verbose <a href=\"../core/Fetch.html\">@</a> <a href=\"../tools/BracketIF.html\">[IF]</a> <br>\n        &nbsp;&nbsp; <a href=\"../core/ColonNONAME.html\">:NONAME</a> <a href=\"../core/p.html\">(</a> -- fp.separate? ) <br>\n        &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/DEPTH.html\">DEPTH</a> <a href=\"../core/toR.html\">&gt;R</a> 1e <a href=\"../core/DEPTH.html\">DEPTH</a> <a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../floating/FDROP.html\">FDROP</a> <a href=\"../core/TwoRfrom.html\">2R&gt;</a> <a href=\"../core/Equal.html\">=</a> <a href=\"../core/Semi.html\">;</a> <a href=\"../core/EXECUTE.html\">EXECUTE</a> <br>\n        &nbsp;&nbsp; <a href=\"../core/CR.html\">CR</a> <a href=\"../core/Dotp.html\">.(</a> <span class=\"rm\">floating-point and data stacks</span> ) <br>\n        &nbsp;&nbsp; <a href=\"../tools/BracketIF.html\">[IF]</a> <a href=\"../core/Dotp.html\">.(</a> <span class=\"rm\">*separate*</span> ) <a href=\"../tools/BracketELSE.html\">[ELSE]</a> <a href=\"../core/Dotp.html\">.(</a> <span class=\"rm\">*not separate*</span> ) <a href=\"../tools/BracketTHEN.html\">[THEN]</a> <br>\n        &nbsp;&nbsp; <a href=\"../core/CR.html\">CR</a> <br>\n        <a href=\"../tools/BracketTHEN.html\">[THEN]</a>\n        </p><p>\n        TESTING normal values\n        </p><p>\n        <a href=\"../core/bs.html\">\\</a>   y   x              rad         deg <br>\n        <span class=\"tt\">T{ &nbsp;0e&nbsp;&nbsp;1e&nbsp;<strong>FATAN2</strong> -&gt; &nbsp;&nbsp;0e&nbsp;&nbsp; R}T</span>&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a>   0 <br>\n        <span class=\"tt\">T{ &nbsp;1e&nbsp;&nbsp;1e&nbsp;<strong>FATAN2</strong> -&gt; &nbsp;&nbsp;pi/4 R}T</span>&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a>  45 <br>\n        <span class=\"tt\">T{ &nbsp;1e&nbsp;&nbsp;0e&nbsp;<strong>FATAN2</strong> -&gt; &nbsp;&nbsp;pi/2 R}T</span>&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a>  90 <br>\n        <span class=\"tt\">T{ -1e&nbsp;-1e&nbsp;<strong>FATAN2</strong> -&gt; -3pi/4 R}T</span>&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> 135 <br>\n        <span class=\"tt\">T{ &nbsp;0e&nbsp;-1e&nbsp;<strong>FATAN2</strong> -&gt; &nbsp;&nbsp;pi&nbsp;&nbsp; R}T</span>&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> 180 <br>\n        <span class=\"tt\">T{ -1e&nbsp;&nbsp;1e&nbsp;<strong>FATAN2</strong> -&gt; &nbsp;-pi/4 R}T</span>&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> 225 <br>\n        <span class=\"tt\">T{ -1e&nbsp;&nbsp;0e&nbsp;<strong>FATAN2</strong> -&gt; &nbsp;-pi/2 R}T</span>&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> 270 <br>\n        <span class=\"tt\">T{ -1e&nbsp;&nbsp;1e&nbsp;<strong>FATAN2</strong> -&gt; &nbsp;-pi/4 R}T</span>&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> 315\n        </p><p>\n        TESTING Single UNIX 3 special values spec\n        </p><p>\n        <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">ISO C / Single UNIX Specification Version 3:</span> <br>\n        <a href=\"../core/bs.html\">\\</a> &nbsp;&nbsp; <a href=\"http://www.unix.org/single_unix_specification/\">http://www.unix.org/single_unix_specification/</a> <br>\n        <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Select \"Topic\", then \"Math Interfaces\", then \"<code>atan2()</code>\":</span> <br>\n        <a href=\"../core/bs.html\">\\</a> &nbsp;&nbsp; <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/atan2f.html\">http://www.opengroup.org/onlinepubs/009695399/</a> <br>\n        <a href=\"../core/bs.html\">\\</a> &nbsp;&nbsp; <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/atan2f.html\">functions/atan2f.html</a>\n        </p><p>\n        <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">If <em>y</em> is +/-0 and <em>x</em> is &lt; 0, +/-pi shall be returned.</span> <br>\n        <span class=\"tt\">T{ &nbsp;0e&nbsp;-1e&nbsp;<strong>FATAN2</strong> -&gt; &nbsp;pi R}T</span> <br>\n        <span class=\"tt\">T{ -0e&nbsp;-1e&nbsp;<strong>FATAN2</strong> -&gt; -pi R}T</span>\n        </p><p>\n        <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">If <em>y</em> is +/-0 and <em>x</em> is &gt; 0, +/-0 shall be returned.</span> <br>\n        <span class=\"tt\">T{ &nbsp;0e&nbsp;&nbsp;1e&nbsp;<strong>FATAN2</strong> -&gt; &nbsp;0e R}T</span><br>\n        <span class=\"tt\">T{ -0e&nbsp;&nbsp;1e&nbsp;<strong>FATAN2</strong> -&gt; -0e R}T</span><br>\n        <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">If <em>y</em> is &lt; 0 and <em>x</em> is +/-0, -pi/2 shall be returned.</span> <br>\n        <span class=\"tt\">T{ -1e&nbsp;&nbsp;0e&nbsp;<strong>FATAN2</strong> -&gt; -pi/2 R}T</span> <br>\n        <span class=\"tt\">T{ -1e&nbsp;-0e&nbsp;<strong>FATAN2</strong> -&gt; -pi/2 R}T</span> <br>\n        <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">If <em>y</em> is &gt; 0 and <em>x</em> is +/-0, pi/2 shall be returned.</span> <br>\n        <span class=\"tt\">T{ &nbsp;1e&nbsp;&nbsp;0e&nbsp;<strong>FATAN2</strong> -&gt; pi/2 R}T</span> <br>\n        <span class=\"tt\">T{ &nbsp;1e&nbsp;-0e&nbsp;<strong>FATAN2</strong> -&gt; pi/2 R}T</span> <br>\n        TESTING Single UNIX 3 special values optional spec\n        </p><p>\n        <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Optional ISO C / single UNIX specs:</span>\n        </p><p>\n        <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">If either <em>x</em> or <em>y</em> is NaN, a NaN shall be returned.</span> <br>\n        <span class=\"tt\">T{ NaN&nbsp;&nbsp;1e&nbsp;<strong>FATAN2</strong> -&gt; NaN R}T</span><br>\n        <span class=\"tt\">T{ &nbsp;1e&nbsp;NaN&nbsp;<strong>FATAN2</strong> -&gt; NaN R}T</span><br>\n        <span class=\"tt\">T{ NaN&nbsp;NaN&nbsp;<strong>FATAN2</strong> -&gt; NaN R}T</span>\n        </p><p>\n        <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">If <em>y</em> is +/-0 and <em>x</em> is -0, +/-pi shall be returned.</span> <br>\n        <span class=\"tt\">T{ &nbsp;0e&nbsp;-0e&nbsp;<strong>FATAN2</strong> -&gt; &nbsp;pi R}T</span><br>\n        <span class=\"tt\">T{ -0e&nbsp;-0e&nbsp;<strong>FATAN2</strong> -&gt; -pi R}T</span>\n        </p><p>\n        <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">If <em>y</em> is +/-0 and <em>x</em> is +0, +/-0 shall be returned.</span> <br>\n        <span class=\"tt\">T{ &nbsp;0e&nbsp;&nbsp;0e&nbsp;<strong>FATAN2</strong> -&gt; +0e R}T</span><br>\n        <span class=\"tt\">T{ -0e&nbsp;&nbsp;0e&nbsp;<strong>FATAN2</strong> -&gt; -0e R}T</span>\n        </p><p>\n        <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">For finite values of +/-<em>y</em> &gt; 0, if <em>x</em> is -Inf, +/-pi shall be returned.</span> <br>\n        <span class=\"tt\">T{ &nbsp;1e&nbsp;-Inf&nbsp;<strong>FATAN2</strong> -&gt; &nbsp;pi R}T</span><br>\n        <span class=\"tt\">T{ -1e&nbsp;-Inf&nbsp;<strong>FATAN2</strong> -&gt; -pi R}T</span>\n        </p><p>\n        <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">For finite values of +/-<em>y</em> &gt; 0, if <em>x</em> is +Inf, +/-0 shall be returned.</span> <br>\n        <span class=\"tt\">T{ &nbsp;1e&nbsp;+Inf&nbsp;<strong>FATAN2</strong> -&gt; +0e R}T</span><br>\n        <span class=\"tt\">T{ -1e&nbsp;+Inf&nbsp;<strong>FATAN2</strong> -&gt; -0e R}T</span>\n        </p><p>\n        <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">For finite values of <em>x</em>, if <em>y</em> is +/-Inf, +/-pi/2 shall be returned.</span> <br>\n        <span class=\"tt\">T{ +Inf&nbsp;&nbsp;1e&nbsp;<strong>FATAN2</strong> -&gt; &nbsp;pi/2 R}T</span><br>\n        <span class=\"tt\">T{ +Inf&nbsp;-1e&nbsp;<strong>FATAN2</strong> -&gt; &nbsp;pi/2 R}T</span><br>\n        <span class=\"tt\">T{ +Inf&nbsp;&nbsp;0e&nbsp;<strong>FATAN2</strong> -&gt; &nbsp;pi/2 R}T</span><br>\n        <span class=\"tt\">T{ +Inf&nbsp;-0e&nbsp;<strong>FATAN2</strong> -&gt; &nbsp;pi/2 R}T</span><br>\n        <span class=\"tt\">T{ -Inf&nbsp;&nbsp;1e&nbsp;<strong>FATAN2</strong> -&gt; -pi/2 R}T</span><br>\n        <span class=\"tt\">T{ -Inf&nbsp;-1e&nbsp;<strong>FATAN2</strong> -&gt; -pi/2 R}T</span><br>\n        <span class=\"tt\">T{ -Inf&nbsp;&nbsp;0e&nbsp;<strong>FATAN2</strong> -&gt; -pi/2 R}T</span><br>\n        <span class=\"tt\">T{ -Inf&nbsp;-0e&nbsp;<strong>FATAN2</strong> -&gt; -pi/2 R}T</span>\n        </p><p>\n        <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">If <em>y</em> is +/-Inf and <em>x</em> is -Inf, +/-3pi/4 shall be returned.</span> <br>\n        <span class=\"tt\">T{ +Inf&nbsp;-Inf&nbsp;<strong>FATAN2</strong> -&gt; &nbsp;3pi/4 R}T</span><br>\n        <span class=\"tt\">T{ -Inf&nbsp;-Inf&nbsp;<strong>FATAN2</strong> -&gt; -3pi/4 R}T</span>\n        </p><p>\n        <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">If <em>y</em> is +/-Inf and <em>x</em> is +Inf, +/-pi/4 shall be returned.</span> <br>\n        <span class=\"tt\">T{ +Inf&nbsp;+Inf&nbsp;<strong>FATAN2</strong> -&gt; &nbsp;pi/4 R}T</span><br>\n        <span class=\"tt\">T{ -Inf&nbsp;+Inf&nbsp;<strong>FATAN2</strong> -&gt; -pi/4 R}T</span>\n        </p><p>\n        verbose <a href=\"../core/Fetch.html\">@</a> <a href=\"../tools/BracketIF.html\">[IF]</a> <br>\n        &nbsp;&nbsp; <a href=\"../core/CR.html\">CR</a> <a href=\"../core/Dotp.html\">.(</a> <span class=\"rm\">#ERRORS:</span> ) #errors <a href=\"../core/Fetch.html\">@</a> <a href=\"../core/d.html\">.</a> <a href=\"../core/CR.html\">CR</a> <br>\n        <a href=\"../tools/BracketTHEN.html\">[THEN]</a>\n        \n        \n        </p></div>\n      "
                    }
                }
            },
            "FCONSTANT": {
                "id": "floating:FCONSTANT",
                "number": "12.6.1.1492",
                "name": "FCONSTANT",
                "english": "f-constant",
                "list": "FLOATING",
                "basename": "FCONSTANT",
                "stackEffect": {
                    "html": {
                        " ": "( <em>\"&lt;spaces&gt;name\"</em> -- ) ( F: <em>r</em> -- ) or\n      ( <em>r \"&lt;spaces&gt;name\"</em> -- )",
                        "name Execution:": "( -- ) ( F: -- <em>r</em> ) or\n      ( -- <em>r</em> )"
                    },
                    "plain": {
                        " ": "( \"<spaces>name\" -- ) ( F: r -- ) or\n( r \"<spaces>name\" -- )",
                        "name Execution:": "( -- ) ( F: -- r ) or\n( -- r )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>\"&lt;spaces&gt;name\"</em> -- ) ( F: <em>r</em> -- ) or\n      ( <em>r \"&lt;spaces&gt;name\"</em> -- )\n      <p>\n      Skip leading space delimiters. Parse <em>name</em> delimited by a\n      space. Create a definition for <em>name</em> with the execution\n      semantics defined below.\n      </p><p>\n      <em>name</em> is referred to as an \"f-constant\".\n      </p><p>\n        \n      </p>"
                    },
                    "name Execution:": {
                        "name": "name Execution:",
                        "html": "\n\n\n      ( -- ) ( F: -- <em>r</em> ) or\n      ( -- <em>r</em> )\n      <p>\n      Place <em>r</em> on the floating-point stack.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:parsing\">3.4.1 Parsing</a></strong>,\n      <a href=\"../rationale.html#rat:floating:FCONSTANT\">A.12.6.1.1492 FCONSTANT</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.12.6.1.1492 FCONSTANT -->\n      Typical use: <code>r</code> <strong>FCONSTANT</strong> <em>name</em>\n      \n      \n      "
                    }
                }
            },
            "FCOS": {
                "id": "floating:FCOS",
                "number": "12.6.2.1493",
                "name": "FCOS",
                "english": "f-cos",
                "list": "FLOATING EXT",
                "basename": "FCOS",
                "stackEffect": {
                    "html": {
                        " ": "( F: <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> ) or\n      ( <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( F: r1 -- r2 ) or\n( r1 -- r2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( F: <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> ) or\n      ( <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> )\n      <p>\n      <em>r<sub>2</sub></em> is the cosine of the radian angle <em>r<sub>1</sub></em>.\n      \n      </p>"
                    }
                }
            },
            "FCOSH": {
                "id": "floating:FCOSH",
                "number": "12.6.2.1494",
                "name": "FCOSH",
                "english": "f-cosh",
                "list": "FLOATING EXT",
                "basename": "FCOSH",
                "stackEffect": {
                    "html": {
                        " ": "( F: <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> ) or\n      ( <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( F: r1 -- r2 ) or\n( r1 -- r2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( F: <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> ) or\n      ( <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> )\n      <p>\n      <em>r<sub>2</sub></em> is the hyperbolic cosine of <em>r<sub>1</sub></em>.\n      \n      </p>"
                    }
                }
            },
            "FDEPTH": {
                "id": "floating:FDEPTH",
                "number": "12.6.1.1497",
                "name": "FDEPTH",
                "english": "f-depth",
                "list": "FLOATING",
                "basename": "FDEPTH",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>+n</em> )"
                    },
                    "plain": {
                        " ": "( -- +n )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>+n</em> )\n      <p>\n      <em>+n</em> is the number of values contained on the\n      floating-point stack. If the system has an environmental\n      restriction of keeping the floating-point numbers on the\n      data stack, <em>+n</em> is the current number of possible\n      floating-point values contained on the data stack.\n      \n      </p>"
                    }
                }
            },
            "FDROP": {
                "id": "floating:FDROP",
                "number": "12.6.1.1500",
                "name": "FDROP",
                "english": "f-drop",
                "list": "FLOATING",
                "basename": "FDROP",
                "stackEffect": {
                    "html": {
                        " ": "( F: <em>r</em> -- ) or\n      ( <em>r</em> -- )"
                    },
                    "plain": {
                        " ": "( F: r -- ) or\n( r -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( F: <em>r</em> -- ) or\n      ( <em>r</em> -- )\n      <p>\n      Remove <em>r</em> from the floating-point stack.\n      \n      </p>"
                    }
                }
            },
            "FDUP": {
                "id": "floating:FDUP",
                "number": "12.6.1.1510",
                "name": "FDUP",
                "english": "f-dupe",
                "list": "FLOATING",
                "basename": "FDUP",
                "stackEffect": {
                    "html": {
                        " ": "( F: <em>r</em> -- <em>r r</em> ) or\n      ( <em>r</em> -- <em>r r</em> )"
                    },
                    "plain": {
                        " ": "( F: r -- r r ) or\n( r -- r r )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( F: <em>r</em> -- <em>r r</em> ) or\n      ( <em>r</em> -- <em>r r</em> )\n      <p>\n      Duplicate <em>r</em>.\n      \n      </p>"
                    }
                }
            },
            "FDiv": {
                "id": "floating:F/",
                "number": "12.6.1.1430",
                "name": "F/",
                "english": "f-slash",
                "list": "FLOATING",
                "basename": "FDiv",
                "stackEffect": {
                    "html": {
                        " ": "( F: <em>r<sub>1</sub> r<sub>2</sub></em> -- <em>r<sub>3</sub></em> ) or\n      ( <em>r<sub>1</sub> r<sub>2</sub></em> -- <em>r<sub>3</sub></em> )"
                    },
                    "plain": {
                        " ": "( F: r1 r2 -- r3 ) or\n( r1 r2 -- r3 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( F: <em>r<sub>1</sub> r<sub>2</sub></em> -- <em>r<sub>3</sub></em> ) or\n      ( <em>r<sub>1</sub> r<sub>2</sub></em> -- <em>r<sub>3</sub></em> )\n      <p>\n      Divide <em>r<sub>1</sub></em> by <em>r<sub>2</sub></em>, giving the quotient\n      <em>r<sub>3</sub></em>. An ambiguous condition exists if <em>r<sub>2</sub></em> is\n      zero, or the quotient lies outside \tof the range of a\n      floating-point number.\n      \n      </p>"
                    }
                }
            },
            "FEXP": {
                "id": "floating:FEXP",
                "number": "12.6.2.1515",
                "name": "FEXP",
                "english": "f-e-x-p",
                "list": "FLOATING EXT",
                "basename": "FEXP",
                "stackEffect": {
                    "html": {
                        " ": "( F: <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> ) or\n      ( <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( F: r1 -- r2 ) or\n( r1 -- r2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( F: <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> ) or\n      ( <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> )\n      <p>\n      Raise <em>e</em> to the power <em>r<sub>1</sub></em>, giving <em>r<sub>2</sub></em>.\n      \n      </p>"
                    }
                }
            },
            "FEXPMOne": {
                "id": "floating:FEXPM1",
                "number": "12.6.2.1516",
                "name": "FEXPM1",
                "english": "f-e-x-p-m-one",
                "list": "FLOATING EXT",
                "basename": "FEXPMOne",
                "stackEffect": {
                    "html": {
                        " ": "( F: <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> ) or\n      ( <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( F: r1 -- r2 ) or\n( r1 -- r2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( F: <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> ) or\n      ( <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> )\n      <p>\n      Raise <em>e</em> to the power <em>r<sub>1</sub></em> and subtract one, giving <em>r<sub>2</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../rationale.html#rat:floating:FEXPM1\">A.12.6.2.1516 FEXPM1</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.12.6.1.1516 FEXPM1 -->\n      This function allows accurate computation when its arguments\n      are close to zero, and provides a useful base for the standard\n      exponential functions. Hyperbolic functions such as\n      <span class=\"sf\">sinh(<em>x</em>)</span> can be efficiently and accurately\n      implemented by using <strong>FEXPM1</strong>; accuracy is lost in this\n      function for small values of <em>x</em> if the word <a href=\"../floating/FEXP.html\">FEXP</a> is\n      used.\n      <p>\n      An important application of this word is in finance; say a loan\n      is repaid at 15% per year; what is the daily rate? On a computer\n      with single-precision (six decimal digit) accuracy:\n      </p><p>\n      </p><ol style=\"list-style-type: decimal\">\n      <li> Using <a href=\"../floating/FLN.html\">FLN</a> and <a href=\"../floating/FEXP.html\">FEXP</a>:\n      <a href=\"../floating/FLN.html\">FLN</a> of 1.15 = 0.139762, <br>\n      divide by 365 = 3.82910E-4, <br>\n      form the exponent using <a href=\"../floating/FEXP.html\">FEXP</a> = 1.00038, and <br>\n      subtract one (1) and convert to percentage = 0.038%.\n      </li>\n</ol>\n      Thus we only have two-digit accuracy.\n      <ol style=\"list-style-type: decimal\">\n      <li> Using <a href=\"../floating/FLNPOne.html\">FLNP1</a> and <strong>FEXPM1</strong>:\n      <a href=\"../floating/FLNPOne.html\">FLNP1</a> of 0.15 = 0.139762, (this is the same value\n      as in the first example, although with the argument closer\n      to zero it may not be so) <br>\n      divide by 365 = 3.82910E-4, <br>\n      form the exponent and subtract one (1) using\n      <strong>FEXPM1</strong> = 3.82983E-4, and <br>\n      convert to percentage = 0.0382983%.\n      </li>\n</ol>\n      This calculation method allows the hyperbolic functions to be\n      computed with six-digit accuracy. For example, <span class=\"sf\">sinh</span>\n      can be defined as:\n      <p>\n            </p><div class=\"quote\">\n        <div class=\"tt\">\n<a href=\"../core/Colon.html\">:</a> <a href=\"../floating/FSINH.html\">FSINH</a>  <a href=\"../core/p.html\">(</a> r1 -- r2 ) <br>\n          &nbsp;&nbsp; <strong>FEXPM1</strong>  <a href=\"../floating/FDUP.html\">FDUP</a> \n          <a href=\"../floating/FDUP.html\">FDUP</a> 1.0E0 <a href=\"../floating/FPlus.html\">F+</a>  <a href=\"../floating/FDiv.html\">F/</a>  <a href=\"../floating/FPlus.html\">F+</a> \n          2.0E0 <a href=\"../floating/FDiv.html\">F/</a>\n          <a href=\"../core/Semi.html\">;</a>\n          \n          </div>\n        </div>\n      \n      \n      "
                    }
                }
            },
            "FEd": {
                "id": "floating:FEd",
                "number": "12.6.2.1513",
                "name": "FE.",
                "english": "f-e-dot",
                "list": "FLOATING EXT",
                "basename": "FEd",
                "stackEffect": {
                    "html": {
                        " ": "( -- ) ( F: <em>r</em> -- ) or\n      ( <em>r</em> -- )"
                    },
                    "plain": {
                        " ": "( -- ) ( F: r -- ) or\n( r -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- ) ( F: <em>r</em> -- ) or\n      ( <em>r</em> -- )\n      <p>\n      Display, with a trailing space, the top number on the\n      floating-point stack using engineering notation, where the\n      significand is greater than or equal to 1.0 and less than\n      1000.0 and the decimal exponent is a multiple of three.\n      </p><p>\n      An ambiguous condition exists if the value of <a href=\"../core/BASE.html\">BASE</a>\n      is not (decimal) ten or if the character string representation\n      exceeds the size of the pictured numeric output string buffer.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/BASE.html\">6.1.0750 BASE</a>,\n      <strong><a href=\"../float.html#float:ops\">12.3.2 Floating-point operations</a></strong>,\n      <a href=\"../floating/REPRESENT.html\">12.6.1.2143 REPRESENT</a>.\n      \n      "
                    }
                }
            },
            "FFIELDColon": {
                "id": "floating:FFIELD:",
                "number": "12.6.2.1517",
                "name": "FFIELD:",
                "english": "f-field-colon",
                "list": "FLOATING EXT",
                "basename": "FFIELDColon",
                "stackEffect": {
                    "html": {
                        " ": "( <em>n<sub>1</sub> \"&lt;spaces&gt;name\"</em> -- <em>n<sub>2</sub></em> )",
                        "name Execution:": "( <em>addr<sub>1</sub></em> -- <em>addr<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( n1 \"<spaces>name\" -- n2 )",
                        "name Execution:": "( addr1 -- addr2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>n<sub>1</sub> \"&lt;spaces&gt;name\"</em> -- <em>n<sub>2</sub></em> )\n      <p>\n      Skip leading space delimiters. Parse <em>name</em> delimited by\n      a space. <em>Offset</em> is the first float aligned value greater\n      than or equal to <em>n<sub>1</sub></em>.  <em>n<sub>2</sub> = offset + 1</em> float.\n      </p><p>\n      Create a definition for <em>name</em> with the execution semantics\n      given below.\n      </p><p>\n        \n      </p>"
                    },
                    "name Execution:": {
                        "name": "name Execution:",
                        "html": "\n\n\n      ( <em>addr<sub>1</sub></em> -- <em>addr<sub>2</sub></em> )\n      <p>\n      Add the <em>offset</em> calculated during the compile-time action to\n      <em>addr<sub>1</sub></em> giving the address <em>addr<sub>2</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../facility/PlusFIELD.html\">10.6.2.0135 +FIELD</a>,\n      <a href=\"../facility/BEGIN-STRUCTURE.html\">10.6.2.0763 BEGIN-STRUCTURE</a>, <br>\n      <a href=\"../facility/END-STRUCTURE.html\">10.6.2.1336 END-STRUCTURE</a>,\n      <a href=\"../rationale.html#rat:facility:FIELD:\">A.10.6.2.1518 FIELD:</a>.\n      \n      "
                    }
                }
            },
            "FFetch": {
                "id": "floating:F@",
                "number": "12.6.1.1472",
                "name": "F@",
                "english": "f-fetch",
                "list": "FLOATING",
                "basename": "FFetch",
                "stackEffect": {
                    "html": {
                        " ": "( <em>f-addr</em> -- ) ( F: -- <em>r</em> ) or\n      ( <em>f-addr</em> -- <em>r</em> )"
                    },
                    "plain": {
                        " ": "( f-addr -- ) ( F: -- r ) or\n( f-addr -- r )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>f-addr</em> -- ) ( F: -- <em>r</em> ) or\n      ( <em>f-addr</em> -- <em>r</em> )\n      <p>\n      <em>r</em> is the value stored at <em>f-addr</em>.\n      \n      </p>"
                    }
                }
            },
            "FLITERAL": {
                "id": "floating:FLITERAL",
                "number": "12.6.1.1552",
                "name": "FLITERAL",
                "english": "f-literal",
                "list": "FLOATING",
                "basename": "FLITERAL",
                "stackEffect": {
                    "html": {
                        "Compilation:": "( F: <em>r</em> -- ) or\n      ( <em>r</em> -- )",
                        "Run-time:": "( F: -- <em>r</em> ) or\n      ( -- <em>r</em> )"
                    },
                    "plain": {
                        "Compilation:": "( F: r -- ) or\n( r -- )",
                        "Run-time:": "( F: -- r ) or\n( -- r )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      ( F: <em>r</em> -- ) or\n      ( <em>r</em> -- )\n      <p>\n      Append the run-time semantics given below to the current\n      definition.\n      </p><p>\n        \n      </p>"
                    },
                    "Run-time:": {
                        "name": "Run-time:",
                        "html": "\n\n\n      ( F: -- <em>r</em> ) or\n      ( -- <em>r</em> )\n      <p>\n      Place <em>r</em> on the floating-point stack.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../rationale.html#rat:floating:FLITERAL\">A.12.6.1.1552 FLITERAL</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.12.6.1.1552 FLITERAL -->\n      Typical use:\n      <a href=\"../core/Colon.html\">:</a> <code>X</code> ...\n      <a href=\"../core/Bracket.html\">[</a> ... <a href=\"../core/p.html\">(</a> r ) <a href=\"../right-bracket.html\">]</a>\n      <strong>FLITERAL</strong> ...\n      <a href=\"../core/Semi.html\">;</a>\n      \n      \n      "
                    }
                }
            },
            "FLN": {
                "id": "floating:FLN",
                "number": "12.6.2.1553",
                "name": "FLN",
                "english": "f-l-n",
                "list": "FLOATING EXT",
                "basename": "FLN",
                "stackEffect": {
                    "html": {
                        " ": "( F: <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> ) or\n      ( <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( F: r1 -- r2 ) or\n( r1 -- r2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( F: <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> ) or\n      ( <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> )\n      <p>\n      <em>r<sub>2</sub></em> is the natural logarithm of <em>r<sub>1</sub></em>. An ambiguous\n      condition exists if <em>r<sub>1</sub></em> is less than or equal to zero.\n      \n      </p>"
                    }
                }
            },
            "FLNPOne": {
                "id": "floating:FLNP1",
                "number": "12.6.2.1554",
                "name": "FLNP1",
                "english": "f-l-n-p-one",
                "list": "FLOATING EXT",
                "basename": "FLNPOne",
                "stackEffect": {
                    "html": {
                        " ": "( F: <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> ) or\n      ( <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( F: r1 -- r2 ) or\n( r1 -- r2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( F: <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> ) or\n      ( <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> )\n      <p>\n      <em>r<sub>2</sub></em> is the natural logarithm of the quantity <em>r<sub>1</sub></em>\n      plus one. An ambiguous condition exists if <em>r<sub>1</sub></em> is less\n      than or equal to negative one.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../rationale.html#rat:floating:FEXPM1\">A.12.6.2.1516 FEXPM1</a>.\n      \n      \n      "
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.12.6.1.1554 FLNP1 -->\n      This function allows accurate compilation when its arguments\n      are close to zero, and provides a useful base for the standard\n      logarithmic functions. For example, <a href=\"../floating/FLN.html\">FLN</a> can be\n      implemented as:\n      <p>\n            </p><div class=\"quote\">\n        <div class=\"tt\">\n<a href=\"../core/Colon.html\">:</a> <a href=\"../floating/FLN.html\">FLN</a>  \n          1.0E0 <a href=\"../floating/FMinus.html\">F-</a>   <strong>FLNP1</strong>\n          <a href=\"../core/Semi.html\">;</a>\n          \n          </div>\n        </div>\n        \n      "
                    }
                }
            },
            "FLOATPlus": {
                "id": "floating:FLOAT+",
                "number": "12.6.1.1555",
                "name": "FLOAT+",
                "english": "float-plus",
                "list": "FLOATING",
                "basename": "FLOATPlus",
                "stackEffect": {
                    "html": {
                        " ": "( <em>f-addr<sub>1</sub></em> -- <em>f-addr<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( f-addr1 -- f-addr2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>f-addr<sub>1</sub></em> -- <em>f-addr<sub>2</sub></em> )\n      <p>\n      Add the size in address units of a floating-point number to\n      <em>f-addr<sub>1</sub></em>, giving <em>f-addr<sub>2</sub></em>.\n      \n      </p>"
                    }
                }
            },
            "FLOATS": {
                "id": "floating:FLOATS",
                "number": "12.6.1.1556",
                "name": "FLOATS",
                "english": " ",
                "list": "FLOATING",
                "basename": "FLOATS",
                "stackEffect": {
                    "html": {
                        " ": "( <em>n<sub>1</sub></em> -- <em>n<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( n1 -- n2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>n<sub>1</sub></em> -- <em>n<sub>2</sub></em> )\n      <p>\n      <em>n<sub>2</sub></em> is the size in address units of <em>n<sub>1</sub></em> floating-point\n      numbers.\n      \n      </p>"
                    }
                }
            },
            "FLOG": {
                "id": "floating:FLOG",
                "number": "12.6.2.1557",
                "name": "FLOG",
                "english": "f-log",
                "list": "FLOATING EXT",
                "basename": "FLOG",
                "stackEffect": {
                    "html": {
                        " ": "( F: <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> ) or\n      ( <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( F: r1 -- r2 ) or\n( r1 -- r2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( F: <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> ) or\n      ( <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> )\n      <p>\n      <em>r<sub>2</sub></em> is the base-ten logarithm of <em>r<sub>1</sub></em>. An ambiguous\n      condition exists if <em>r<sub>1</sub></em> is less than or equal to zero.\n      \n      </p>"
                    }
                }
            },
            "FLOOR": {
                "id": "floating:FLOOR",
                "number": "12.6.1.1558",
                "name": "FLOOR",
                "english": " ",
                "list": "FLOATING",
                "basename": "FLOOR",
                "stackEffect": {
                    "html": {
                        " ": "( F: <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> ) or\n      ( <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( F: r1 -- r2 ) or\n( r1 -- r2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( F: <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> ) or\n      ( <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> )\n      <p>\n      Round <em>r<sub>1</sub></em> to an integral value using the \"round toward\n      negative infinity\" rule, giving <em>r<sub>2</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../float.html#float:ops\">12.3.2 Floating-point operations</a></strong>, <a href=\"../floating/FROUND.html\">12.6.1.1612 FROUND</a>,\n      <a href=\"../floating/FTRUNC.html\">12.6.2.1627 FTRUNC</a>.\n      \n      "
                    }
                }
            },
            "FMAX": {
                "id": "floating:FMAX",
                "number": "12.6.1.1562",
                "name": "FMAX",
                "english": "f-max",
                "list": "FLOATING",
                "basename": "FMAX",
                "stackEffect": {
                    "html": {
                        " ": "( F: <em>r<sub>1</sub> r<sub>2</sub></em> -- <em>r<sub>3</sub></em> ) or\n      ( <em>r<sub>1</sub> r<sub>2</sub></em> -- <em>r<sub>3</sub></em> )"
                    },
                    "plain": {
                        " ": "( F: r1 r2 -- r3 ) or\n( r1 r2 -- r3 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( F: <em>r<sub>1</sub> r<sub>2</sub></em> -- <em>r<sub>3</sub></em> ) or\n      ( <em>r<sub>1</sub> r<sub>2</sub></em> -- <em>r<sub>3</sub></em> )\n      <p>\n      <em>r<sub>3</sub></em> is the greater of <em>r<sub>1</sub></em> and <em>r<sub>2</sub></em>.\n      \n      </p>"
                    }
                }
            },
            "FMIN": {
                "id": "floating:FMIN",
                "number": "12.6.1.1565",
                "name": "FMIN",
                "english": "f-min",
                "list": "FLOATING",
                "basename": "FMIN",
                "stackEffect": {
                    "html": {
                        " ": "( F: <em>r<sub>1</sub> r<sub>2</sub></em> -- <em>r<sub>3</sub></em> ) or\n      ( <em>r<sub>1</sub> r<sub>2</sub></em> -- <em>r<sub>3</sub></em> )"
                    },
                    "plain": {
                        " ": "( F: r1 r2 -- r3 ) or\n( r1 r2 -- r3 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( F: <em>r<sub>1</sub> r<sub>2</sub></em> -- <em>r<sub>3</sub></em> ) or\n      ( <em>r<sub>1</sub> r<sub>2</sub></em> -- <em>r<sub>3</sub></em> )\n      <p>\n      <em>r<sub>3</sub></em> is the lesser of <em>r<sub>1</sub></em> and <em>r<sub>2</sub></em>.\n      \n      </p>"
                    }
                }
            },
            "FMinus": {
                "id": "floating:F-",
                "number": "12.6.1.1425",
                "name": "F-",
                "english": "f-minus",
                "list": "FLOATING",
                "basename": "FMinus",
                "stackEffect": {
                    "html": {
                        " ": "( F: <em>r<sub>1</sub> r<sub>2</sub></em> -- <em>r<sub>3</sub></em> ) or\n      ( <em>r<sub>1</sub> r<sub>2</sub></em> -- <em>r<sub>3</sub></em> )"
                    },
                    "plain": {
                        " ": "( F: r1 r2 -- r3 ) or\n( r1 r2 -- r3 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( F: <em>r<sub>1</sub> r<sub>2</sub></em> -- <em>r<sub>3</sub></em> ) or\n      ( <em>r<sub>1</sub> r<sub>2</sub></em> -- <em>r<sub>3</sub></em> )\n      <p>\n      Subtract <em>r<sub>2</sub></em> from <em>r<sub>1</sub></em>, giving <em>r<sub>3</sub></em>.\n      \n      </p>"
                    }
                }
            },
            "FNEGATE": {
                "id": "floating:FNEGATE",
                "number": "12.6.1.1567",
                "name": "FNEGATE",
                "english": "f-negate",
                "list": "FLOATING",
                "basename": "FNEGATE",
                "stackEffect": {
                    "html": {
                        " ": "( F: <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> ) or\n      ( <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( F: r1 -- r2 ) or\n( r1 -- r2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( F: <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> ) or\n      ( <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> )\n      <p>\n      <em>r<sub>2</sub></em> is the negation of <em>r<sub>1</sub></em>.\n      \n      </p>"
                    }
                }
            },
            "FOVER": {
                "id": "floating:FOVER",
                "number": "12.6.1.1600",
                "name": "FOVER",
                "english": "f-over",
                "list": "FLOATING",
                "basename": "FOVER",
                "stackEffect": {
                    "html": {
                        " ": "( F: <em>r<sub>1</sub> r<sub>2</sub></em> -- <em>r<sub>1</sub> r<sub>2</sub> r<sub>1</sub></em> ) or\n      ( <em>r<sub>1</sub> r<sub>2</sub></em> -- <em>r<sub>1</sub> r<sub>2</sub> r<sub>1</sub></em> )"
                    },
                    "plain": {
                        " ": "( F: r1 r2 -- r1 r2 r1 ) or\n( r1 r2 -- r1 r2 r1 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( F: <em>r<sub>1</sub> r<sub>2</sub></em> -- <em>r<sub>1</sub> r<sub>2</sub> r<sub>1</sub></em> ) or\n      ( <em>r<sub>1</sub> r<sub>2</sub></em> -- <em>r<sub>1</sub> r<sub>2</sub> r<sub>1</sub></em> )\n      <p>\n      Place a copy of <em>r<sub>1</sub></em> on top of the floating-point stack.\n      \n      </p>"
                    }
                }
            },
            "FPlus": {
                "id": "floating:F+",
                "number": "12.6.1.1420",
                "name": "F+",
                "english": "f-plus",
                "list": "FLOATING",
                "basename": "FPlus",
                "stackEffect": {
                    "html": {
                        " ": "( F: <em>r<sub>1</sub> r<sub>2</sub></em> -- <em>r<sub>3</sub></em> ) or\n      ( <em>r<sub>1</sub> r<sub>2</sub></em> -- <em>r<sub>3</sub></em> )"
                    },
                    "plain": {
                        " ": "( F: r1 r2 -- r3 ) or\n( r1 r2 -- r3 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( F: <em>r<sub>1</sub> r<sub>2</sub></em> -- <em>r<sub>3</sub></em> ) or\n      ( <em>r<sub>1</sub> r<sub>2</sub></em> -- <em>r<sub>3</sub></em> )\n      <p>\n      Add <em>r<sub>1</sub></em> to <em>r<sub>2</sub></em> giving the sum <em>r<sub>3</sub></em>.\n      \n      </p>"
                    }
                }
            },
            "FROT": {
                "id": "floating:FROT",
                "number": "12.6.1.1610",
                "name": "FROT",
                "english": "f-rote",
                "list": "FLOATING",
                "basename": "FROT",
                "stackEffect": {
                    "html": {
                        " ": "( F: <em>r<sub>1</sub> r<sub>2</sub> r<sub>3</sub></em> -- <em>r<sub>2</sub> r<sub>3</sub> r<sub>1</sub></em> ) or\n      ( <em>r<sub>1</sub> r<sub>2</sub> r<sub>3</sub></em> -- <em>r<sub>2</sub> r<sub>3</sub> r<sub>1</sub></em> )"
                    },
                    "plain": {
                        " ": "( F: r1 r2 r3 -- r2 r3 r1 ) or\n( r1 r2 r3 -- r2 r3 r1 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( F: <em>r<sub>1</sub> r<sub>2</sub> r<sub>3</sub></em> -- <em>r<sub>2</sub> r<sub>3</sub> r<sub>1</sub></em> ) or\n      ( <em>r<sub>1</sub> r<sub>2</sub> r<sub>3</sub></em> -- <em>r<sub>2</sub> r<sub>3</sub> r<sub>1</sub></em> )\n      <p>\n      Rotate the top three floating-point stack entries.\n      \n      </p>"
                    }
                }
            },
            "FROUND": {
                "id": "floating:FROUND",
                "number": "12.6.1.1612",
                "name": "FROUND",
                "english": "f-round",
                "list": "FLOATING",
                "basename": "FROUND",
                "stackEffect": {
                    "html": {
                        " ": "( F: <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> ) or\n      ( <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( F: r1 -- r2 ) or\n( r1 -- r2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( F: <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> ) or\n      ( <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> )\n      <p>\n      Round <em>r<sub>1</sub></em> to an integral value using the \"round to nearest\"\n      rule, giving <em>r<sub>2</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../float.html#float:ops\">12.3.2 Floating-point operations</a></strong>,\n      <a href=\"../floating/FLOOR.html\">12.6.1.1558 FLOOR</a>, <a href=\"../floating/FTRUNC.html\">12.6.2.1627 FTRUNC</a>.\n      \n      "
                    }
                }
            },
            "FSIN": {
                "id": "floating:FSIN",
                "number": "12.6.2.1614",
                "name": "FSIN",
                "english": "f-sine",
                "list": "FLOATING EXT",
                "basename": "FSIN",
                "stackEffect": {
                    "html": {
                        " ": "( F: <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> ) or\n      ( <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( F: r1 -- r2 ) or\n( r1 -- r2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( F: <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> ) or\n      ( <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> )\n      <p>\n      <em>r<sub>2</sub></em> is the sine of the radian angle <em>r<sub>1</sub></em>.\n      \n      </p>"
                    }
                }
            },
            "FSINCOS": {
                "id": "floating:FSINCOS",
                "number": "12.6.2.1616",
                "name": "FSINCOS",
                "english": "f-sine-cos",
                "list": "FLOATING EXT",
                "basename": "FSINCOS",
                "stackEffect": {
                    "html": {
                        " ": "( F: <em>r<sub>1</sub></em> -- <em>r<sub>2</sub> r<sub>3</sub></em> ) or\n      ( <em>r<sub>1</sub></em> -- <em>r<sub>2</sub> r<sub>3</sub></em> )"
                    },
                    "plain": {
                        " ": "( F: r1 -- r2 r3 ) or\n( r1 -- r2 r3 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( F: <em>r<sub>1</sub></em> -- <em>r<sub>2</sub> r<sub>3</sub></em> ) or\n      ( <em>r<sub>1</sub></em> -- <em>r<sub>2</sub> r<sub>3</sub></em> )\n      <p>\n      <em>r<sub>2</sub></em> is the sine of the radian angle <em>r<sub>1</sub></em>. <em>r<sub>3</sub></em>\n      is the cosine of the radian angle <em>r<sub>1</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../rationale.html#rat:floating:FATAN2\">A.12.6.2.1489 FATAN2</a>.\n      \n      "
                    }
                }
            },
            "FSINH": {
                "id": "floating:FSINH",
                "number": "12.6.2.1617",
                "name": "FSINH",
                "english": "f-cinch",
                "list": "FLOATING EXT",
                "basename": "FSINH",
                "stackEffect": {
                    "html": {
                        " ": "( F: <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> ) or\n      ( <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( F: r1 -- r2 ) or\n( r1 -- r2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( F: <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> ) or\n      ( <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> )\n      <p>\n      <em>r<sub>2</sub></em> is the hyperbolic sine of <em>r<sub>1</sub></em>.\n      \n      </p>"
                    }
                }
            },
            "FSQRT": {
                "id": "floating:FSQRT",
                "number": "12.6.2.1618",
                "name": "FSQRT",
                "english": "f-square-root",
                "list": "FLOATING EXT",
                "basename": "FSQRT",
                "stackEffect": {
                    "html": {
                        " ": "( F: <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> ) or\n      ( <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( F: r1 -- r2 ) or\n( r1 -- r2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( F: <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> ) or\n      ( <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> )\n      <p>\n      <em>r<sub>2</sub></em> is the square root of <em>r<sub>1</sub></em>. An ambiguous\n      condition exists if <em>r<sub>1</sub></em> is less than zero.\n      \n      </p>"
                    }
                }
            },
            "FSWAP": {
                "id": "floating:FSWAP",
                "number": "12.6.1.1620",
                "name": "FSWAP",
                "english": "f-swap",
                "list": "FLOATING",
                "basename": "FSWAP",
                "stackEffect": {
                    "html": {
                        " ": "( F: <em>r<sub>1</sub> r<sub>2</sub></em> -- <em>r<sub>2</sub> r<sub>1</sub></em> ) or\n      ( <em>r<sub>1</sub> r<sub>2</sub></em> -- <em>r<sub>2</sub> r<sub>1</sub></em> )"
                    },
                    "plain": {
                        " ": "( F: r1 r2 -- r2 r1 ) or\n( r1 r2 -- r2 r1 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( F: <em>r<sub>1</sub> r<sub>2</sub></em> -- <em>r<sub>2</sub> r<sub>1</sub></em> ) or\n      ( <em>r<sub>1</sub> r<sub>2</sub></em> -- <em>r<sub>2</sub> r<sub>1</sub></em> )\n      <p>\n      Exchange the top two floating-point stack items.\n      \n      </p>"
                    }
                }
            },
            "FSd": {
                "id": "floating:FSd",
                "number": "12.6.2.1613",
                "name": "FS.",
                "english": "f-s-dot",
                "list": "FLOATING EXT",
                "basename": "FSd",
                "stackEffect": {
                    "html": {
                        " ": "( -- ) ( F: <em>r</em> -- ) or\n      ( <em>r</em> -- )"
                    },
                    "plain": {
                        " ": "( -- ) ( F: r -- ) or\n( r -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- ) ( F: <em>r</em> -- ) or\n      ( <em>r</em> -- )\n      <p>\n      Display, with a trailing space, the top number on the\n      floating-point stack in scientific notation:\n      &lt;<em>significand</em>&gt;&lt;<em>exponent</em>&gt;\n      where:\n      </p><div class=\"center\">\n\n        <table class=\"center\">\n        <tbody><tr valign=\"top\"><td class=\"r\">&lt;<em>significand</em>&gt; </td><td> <span style=\"font-family: sans-serif\">:=</span> </td><td>[<strong>-</strong>]&lt;<em>digit</em>&gt;<strong>.</strong>&lt;<em>digits0</em>&gt; </td></tr>\n        <tr valign=\"top\"><td class=\"r\">&lt;<em>exponent</em>&gt;\t  </td><td> <span style=\"font-family: sans-serif\">:=</span> </td><td><strong>E</strong>[<strong>-</strong>]&lt;<em>digits</em>&gt;\n        </td></tr></tbody></table>\n        \n        </div>\n      <p>\n      An ambiguous condition exists if the value of <a href=\"../core/BASE.html\">BASE</a>\n      is not (decimal) ten or if the character string representation\n      exceeds the size of the pictured numeric output string buffer.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/BASE.html\">6.1.0750 BASE</a>,\n      <strong><a href=\"../float.html#float:ops\">12.3.2 Floating-point operations</a></strong>,\n      <a href=\"../floating/REPRESENT.html\">12.6.1.2143 REPRESENT</a>.\n      \n      "
                    }
                }
            },
            "FStore": {
                "id": "floating:F!",
                "number": "12.6.1.1400",
                "name": "F!",
                "english": "f-store",
                "list": "FLOATING",
                "basename": "FStore",
                "stackEffect": {
                    "html": {
                        " ": "( <em>f-addr</em> -- ) ( F: <em>r</em> -- ) or\n      ( <em>r f-addr</em> -- )"
                    },
                    "plain": {
                        " ": "( f-addr -- ) ( F: r -- ) or\n( r f-addr -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>f-addr</em> -- ) ( F: <em>r</em> -- ) or\n      ( <em>r f-addr</em> -- )\n      <p>\n      Store <em>r</em> at <em>f-addr</em>.\n      \n      </p>"
                    }
                }
            },
            "FTAN": {
                "id": "floating:FTAN",
                "number": "12.6.2.1625",
                "name": "FTAN",
                "english": "f-tan",
                "list": "FLOATING EXT",
                "basename": "FTAN",
                "stackEffect": {
                    "html": {
                        " ": "( F: <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> ) or\n      ( <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( F: r1 -- r2 ) or\n( r1 -- r2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( F: <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> ) or\n      ( <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> )\n      <p>\n      <em>r<sub>2</sub></em> is the tangent of the radian angle <em>r<sub>1</sub></em>. An\n      ambiguous condition exists if <em><span style=\"font-style: normal\"></span>(r<sub>1</sub>)</em> is zero.\n      \n      </p>"
                    }
                }
            },
            "FTANH": {
                "id": "floating:FTANH",
                "number": "12.6.2.1626",
                "name": "FTANH",
                "english": "f-tan-h",
                "list": "FLOATING EXT",
                "basename": "FTANH",
                "stackEffect": {
                    "html": {
                        " ": "( F: <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> ) or\n      ( <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( F: r1 -- r2 ) or\n( r1 -- r2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( F: <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> ) or\n      ( <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> )\n      <p>\n      <em>r<sub>2</sub></em> is the hyperbolic tangent of <em>r<sub>1</sub></em>.\n      \n      </p>"
                    }
                }
            },
            "FTRUNC": {
                "id": "floating:FTRUNC",
                "number": "12.6.2.1627",
                "name": "FTRUNC",
                "english": "f-trunc",
                "list": "FLOATING EXT",
                "basename": "FTRUNC",
                "stackEffect": {
                    "html": {
                        " ": "( F: <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> ) or ( <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( F: r1 -- r2 ) or ( r1 -- r2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( F: <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> ) or ( <em>r<sub>1</sub></em> -- <em>r<sub>2</sub></em> )\n      <p>\n      Round <em>r<sub>1</sub></em> to an integral value using the \"round\n      towards zero\" rule, giving <em>r<sub>2</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../float.html#float:ops\">12.3.2 Floating-point operations</a></strong>, <a href=\"../floating/FROUND.html\">12.6.1.1612 FROUND</a>, <a href=\"../floating/FLOOR.html\">12.6.1.1558 FLOOR</a>.\n      <p>\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n\n      <a href=\"../core/Colon.html\">:</a> <strong>FTRUNC</strong>   <a href=\"../core/p.html\">(</a> r1 -- r2 ) <br>\n      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../floating/FDUP.html\">FDUP</a> <a href=\"../floating/FZeroEqual.html\">F0=</a> <a href=\"../core/ZeroEqual.html\">0=</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/IF.html\">IF</a>\t&nbsp;&nbsp; <a href=\"../floating/FDUP.html\">FDUP</a> <a href=\"../floating/FZeroless.html\">F0&lt;</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/IF.html\">IF</a>\t&nbsp;&nbsp; <a href=\"../floating/FNEGATE.html\">FNEGATE</a> <a href=\"../floating/FLOOR.html\">FLOOR</a> <a href=\"../floating/FNEGATE.html\">FNEGATE</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/ELSE.html\">ELSE</a>&nbsp;&nbsp; <a href=\"../floating/FLOOR.html\">FLOOR</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/THEN.html\">THEN</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/THEN.html\">THEN</a>&nbsp;&nbsp; <a href=\"../core/Semi.html\">;</a>\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      <code>SET-EXACT</code>\n      <p>\n      <span class=\"tt\">T{ -0E&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>FTRUNC</strong>&nbsp;<a href=\"../floating/FZeroEqual.html\">F0=</a> -&gt; &lt;TRUE&gt; }T</span> <br>\n      <span class=\"tt\">T{ -1E-9&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>FTRUNC</strong>&nbsp;<a href=\"../floating/FZeroEqual.html\">F0=</a> -&gt; &lt;TRUE&gt; }T</span> <br>\n      <span class=\"tt\">T{ -0.9E&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>FTRUNC</strong>&nbsp;<a href=\"../floating/FZeroEqual.html\">F0=</a> -&gt; &lt;TRUE&gt; }T</span> <br>\n      <span class=\"tt\">T{ -1E&nbsp;&nbsp;1E-5&nbsp;F+&nbsp;<strong>FTRUNC</strong>&nbsp;<a href=\"../floating/FZeroEqual.html\">F0=</a> -&gt; &lt;TRUE&gt; }T</span> <br>\n      <span class=\"tt\">T{ 0E&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>FTRUNC</strong>&nbsp;&nbsp;&nbsp;&nbsp; -&gt; &nbsp;0E&nbsp;&nbsp; R}T</span> <br>\n      <span class=\"tt\">T{ 1E-9&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>FTRUNC</strong>&nbsp;&nbsp;&nbsp;&nbsp; -&gt; &nbsp;0E&nbsp;&nbsp; R}T</span> <br>\n      <span class=\"tt\">T{ -1E&nbsp;-1E-5&nbsp;F+&nbsp;<strong>FTRUNC</strong>&nbsp;&nbsp;&nbsp;&nbsp; -&gt; -1E&nbsp;&nbsp; R}T</span> <br>\n      <span class=\"tt\">T{ 3.14E&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>FTRUNC</strong>&nbsp;&nbsp;&nbsp;&nbsp; -&gt; &nbsp;3E&nbsp;&nbsp; R}T</span> <br>\n      <span class=\"tt\">T{ 3.99E&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>FTRUNC</strong>&nbsp;&nbsp;&nbsp;&nbsp; -&gt; &nbsp;3E&nbsp;&nbsp; R}T</span> <br>\n      <span class=\"tt\">T{ 4E&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>FTRUNC</strong>&nbsp;&nbsp;&nbsp;&nbsp; -&gt; &nbsp;4E&nbsp;&nbsp; R}T</span> <br>\n      <span class=\"tt\">T{ -4E&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>FTRUNC</strong>&nbsp;&nbsp;&nbsp;&nbsp; -&gt; -4E&nbsp;&nbsp; R}T</span> <br>\n      <span class=\"tt\">T{ -4.1E&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>FTRUNC</strong>&nbsp;&nbsp;&nbsp;&nbsp; -&gt; -4E&nbsp;&nbsp; R}T</span>\n      \n      \n      </p>"
                    }
                }
            },
            "FTimes": {
                "id": "floating:F*",
                "number": "12.6.1.1410",
                "name": "F*",
                "english": "f-star",
                "list": "FLOATING",
                "basename": "FTimes",
                "stackEffect": {
                    "html": {
                        " ": "( F: <em>r<sub>1</sub> r<sub>2</sub></em> -- <em>r<sub>3</sub></em> ) or\n      ( <em>r<sub>1</sub> r<sub>2</sub></em> -- <em>r<sub>3</sub></em> )"
                    },
                    "plain": {
                        " ": "( F: r1 r2 -- r3 ) or\n( r1 r2 -- r3 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( F: <em>r<sub>1</sub> r<sub>2</sub></em> -- <em>r<sub>3</sub></em> ) or\n      ( <em>r<sub>1</sub> r<sub>2</sub></em> -- <em>r<sub>3</sub></em> )\n      <p>\n      Multiply <em>r<sub>1</sub></em> by <em>r<sub>2</sub></em> giving <em>r<sub>3</sub></em>.\n      \n      </p>"
                    }
                }
            },
            "FTimesTimes": {
                "id": "floating:F**",
                "number": "12.6.2.1415",
                "name": "F**",
                "english": "f-star-star",
                "list": "FLOATING EXT",
                "basename": "FTimesTimes",
                "stackEffect": {
                    "html": {
                        " ": "( F: <em>r<sub>1</sub> r<sub>2</sub></em> -- <em>r<sub>3</sub></em> ) or\n      ( <em>r<sub>1</sub> r<sub>2</sub></em> -- <em>r<sub>3</sub></em> )"
                    },
                    "plain": {
                        " ": "( F: r1 r2 -- r3 ) or\n( r1 r2 -- r3 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( F: <em>r<sub>1</sub> r<sub>2</sub></em> -- <em>r<sub>3</sub></em> ) or\n      ( <em>r<sub>1</sub> r<sub>2</sub></em> -- <em>r<sub>3</sub></em> )\n      <p>\n      Raise <em>r<sub>1</sub></em> to the power <em>r<sub>2</sub></em>, giving the product\n      <em>r<sub>3</sub></em>.\n      \n      </p>"
                    }
                }
            },
            "FVALUE": {
                "id": "floating:FVALUE",
                "number": "12.6.2.1628",
                "name": "FVALUE",
                "english": "f-value",
                "list": "FLOATING EXT",
                "basename": "FVALUE",
                "stackEffect": {
                    "html": {
                        " ": "( F: <em>r</em> -- ) ( <em>\"&lt;spaces&gt;name\"</em> -- ) or\n      ( <em>r \"&lt;spaces&gt;name\"</em> -- )",
                        "name Execution:": "( F: -- <em>r</em> ) or ( -- <em>r</em> )",
                        "TO name Run-time:": "( F: <em>r</em> -- ) or ( <em>r</em> -- )"
                    },
                    "plain": {
                        " ": "( F: r -- ) ( \"<spaces>name\" -- ) or\n( r \"<spaces>name\" -- )",
                        "name Execution:": "( F: -- r ) or ( -- r )",
                        "TO name Run-time:": "( F: r -- ) or ( r -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( F: <em>r</em> -- ) ( <em>\"&lt;spaces&gt;name\"</em> -- ) or\n      ( <em>r \"&lt;spaces&gt;name\"</em> -- )\n      <p>\n      Skip leading space delimiters.  Parse <em>name</em> delimited by a\n      space.  Create a definition for <em>name</em> with the execution\n      semantics defined below, with an initial value equal to <em>r</em>.\n      </p><p>\n      <em>name</em> is referred to as a \"f-value\".\n      </p><p>\n        \n      </p>"
                    },
                    "name Execution:": {
                        "name": "name Execution:",
                        "html": "\n\n\n      ( F: -- <em>r</em> ) or ( -- <em>r</em> )\n      <p>\n      Place <em>r</em> on the floating point stack.  The value of\n      <em>r</em> is that given when <em>name</em> was created, until the\n      phrase \"<em>r</em> <a href=\"../core/TO.html\">TO</a> <em>name</em>\" is executed, causing\n      a new value of <em>r</em> to be assigned to <em>name</em>.\n      </p><p>\n        \n      </p>"
                    },
                    "TO name Run-time:": {
                        "name": "TO name Run-time:",
                        "html": "\n\n\n      ( F: <em>r</em> -- ) or ( <em>r</em> -- )\n      <p>\n      Assign the value <em>r</em> to <em>name</em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:parsing\">3.4.1 Parsing</a></strong>, <a href=\"../core/TO.html\">6.2.2295 TO</a>\n      <p>\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n\n            <div class=\"rm\">\nThe implementation of <strong>FVALUE</strong> requires detailed\n        knowledge of the host implementation of <a href=\"../core/VALUE.html\">VALUE</a> and\n        <a href=\"../core/TO.html\">TO</a>.\n        <p>\n                </p><div class=\"quote\">\n          <div class=\"tt\">\n<a href=\"../core/VARIABLE.html\">VARIABLE</a> %var <br>\n            <a href=\"../core/Colon.html\">:</a> <a href=\"../core/TO.html\">TO</a> 1 %var <a href=\"../core/Store.html\">!</a> <a href=\"../core/Semi.html\">;</a>\n            <p>\n            <a href=\"../core/Colon.html\">:</a> <strong>FVALUE</strong> <a href=\"../core/p.html\">(</a> F: r -- ) <a href=\"../core/p.html\">(</a> \"&lt;spaces&gt;name\" -- ) <br>\n            &nbsp;&nbsp; <a href=\"../core/CREATE.html\">CREATE</a> F, <br>\n            &nbsp;&nbsp; <a href=\"../core/DOES.html\">DOES&gt;</a> %var <a href=\"../core/Fetch.html\">@</a> <a href=\"../core/IF.html\">IF</a> <a href=\"../floating/FStore.html\">F!</a> <a href=\"../core/ELSE.html\">ELSE</a> <a href=\"../floating/FFetch.html\">F@</a> <a href=\"../core/THEN.html\">THEN</a> <br>\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0 %var <a href=\"../core/Store.html\">!</a> <a href=\"../core/Semi.html\">;</a>\n            </p><p>\n            <a href=\"../core/Colon.html\">:</a> <a href=\"../core/VALUE.html\">VALUE</a> <a href=\"../core/p.html\">(</a> x \"&lt;spaces&gt;name\" -- ) <br>\n            &nbsp;&nbsp; <a href=\"../core/CREATE.html\">CREATE</a> <a href=\"../core/Comma.html\">,</a> <br>\n            &nbsp;&nbsp; <a href=\"../core/DOES.html\">DOES&gt;</a> %var <a href=\"../core/Fetch.html\">@</a> <a href=\"../core/IF.html\">IF</a>  <a href=\"../core/Store.html\">!</a> <a href=\"../core/ELSE.html\">ELSE</a>  <a href=\"../core/Fetch.html\">@</a> <a href=\"../core/THEN.html\">THEN</a> <br>\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0 %var <a href=\"../core/Store.html\">!</a> <a href=\"../core/Semi.html\">;</a>\n            \n            </p></div>\n          </div>\n          \n        </div>\n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n      <div class=\"tt\">\n<span class=\"tt\">T{ 0e0&nbsp;<strong>FVALUE</strong>&nbsp;Tval -&gt;  }T</span> <br>\n        <span class=\"tt\">T{ Tval -&gt; 0e0 R}T</span> <br>\n        <span class=\"tt\">T{ 1e0&nbsp;<a href=\"../core/TO.html\">TO</a>&nbsp;Tval -&gt;  }T</span> <br>\n        <span class=\"tt\">T{ Tval -&gt; 1e0 R}T</span> <br>\n        \n        <a href=\"../core/Colon.html\">:</a> setTval Tval <a href=\"../floating/FSWAP.html\">FSWAP</a> <a href=\"../core/TO.html\">TO</a> Tval <a href=\"../core/Semi.html\">;</a> <br>\n        <span class=\"tt\">T{ 2e0&nbsp;setTval&nbsp;Tval -&gt; 1e0&nbsp;2e0 RR}T</span> <br>\n        \n        <span class=\"tt\">T{ 5e0&nbsp;<a href=\"../core/TO.html\">TO</a>&nbsp;Tval -&gt;  }T</span> <br>\n        <a href=\"../core/Colon.html\">:</a> [execute] <a href=\"../core/EXECUTE.html\">EXECUTE</a> <a href=\"../core/Semi.html\">;</a> <a href=\"../core/IMMEDIATE.html\">IMMEDIATE</a> <br>\n        <span class=\"tt\">T{ <a href=\"../core/Tick.html\">'</a>&nbsp;Tval&nbsp;<a href=\"../right-bracket.html\">]</a>&nbsp;[execute]&nbsp;<a href=\"../core/Bracket.html\">[</a> -&gt; 2e0 R}T</span>\n        \n        \n        </div>\n      "
                    }
                }
            },
            "FVARIABLE": {
                "id": "floating:FVARIABLE",
                "number": "12.6.1.1630",
                "name": "FVARIABLE",
                "english": "f-variable",
                "list": "FLOATING",
                "basename": "FVARIABLE",
                "stackEffect": {
                    "html": {
                        " ": "( <em>\"&lt;spaces&gt;name\"</em> -- )",
                        "name Execution:": "( -- <em>f-addr</em> )"
                    },
                    "plain": {
                        " ": "( \"<spaces>name\" -- )",
                        "name Execution:": "( -- f-addr )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>\"&lt;spaces&gt;name\"</em> -- )\n      <p>\n      Skip leading space delimiters. Parse <em>name</em> delimited by a\n      space. Create a definition for <em>name</em> with the execution\n      semantics defined below. Reserve <code>1</code> <a href=\"../floating/FLOATS.html\">FLOATS</a>\n      address units of data space at a float-aligned address.\n      </p><p>\n      <em>name</em> is referred to as an \"f-variable\".\n      </p><p>\n        \n      </p>"
                    },
                    "name Execution:": {
                        "name": "name Execution:",
                        "html": "\n\n\n      ( -- <em>f-addr</em> )\n      <p>\n      <em>f-addr</em> is the address of the data space reserved by\n      <strong>FVARIABLE</strong> when it created <em>name</em>. A program is\n      responsible for initializing the contents of the reserved\n      space.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:parsing\">3.4.1 Parsing</a></strong>,\n      <a href=\"../rationale.html#rat:floating:FVARIABLE\">A.12.6.1.1630 FVARIABLE</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.12.6.1.1630 FVARIABLE -->\n      Typical use:\n      <strong>FVARIABLE</strong> <em>name</em>\n      \n      \n      "
                    }
                }
            },
            "FZeroEqual": {
                "id": "floating:F0=",
                "number": "12.6.1.1450",
                "name": "F0=",
                "english": "f-zero-equals",
                "list": "FLOATING",
                "basename": "FZeroEqual",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>flag</em> ) ( F: <em>r</em> -- ) or\n      ( <em>r</em> -- <em>flag</em> )"
                    },
                    "plain": {
                        " ": "( -- flag ) ( F: r -- ) or\n( r -- flag )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>flag</em> ) ( F: <em>r</em> -- ) or\n      ( <em>r</em> -- <em>flag</em> )\n      <p>\n      <em>flag</em> is true if and only if <em>r</em> is equal to\n      zero.\n      \n      </p>"
                    }
                }
            },
            "FZeroless": {
                "id": "floating:F0less",
                "number": "12.6.1.1440",
                "name": "F0<",
                "english": "f-zero-less-than",
                "list": "FLOATING",
                "basename": "FZeroless",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>flag</em> ) ( F: <em>r</em> -- ) or\n      ( <em>r</em> -- <em>flag</em> )"
                    },
                    "plain": {
                        " ": "( -- flag ) ( F: r -- ) or\n( r -- flag )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>flag</em> ) ( F: <em>r</em> -- ) or\n      ( <em>r</em> -- <em>flag</em> )\n      <p>\n      <em>flag</em> is true if and only if <em>r</em> is less than\n      zero.\n      \n      </p>"
                    }
                }
            },
            "Fd": {
                "id": "floating:Fd",
                "number": "12.6.2.1427",
                "name": "F.",
                "english": "f-dot",
                "list": "FLOATING EXT",
                "basename": "Fd",
                "stackEffect": {
                    "html": {
                        " ": "( -- ) ( F: <em>r</em> -- ) or\n      ( <em>r</em> -- )"
                    },
                    "plain": {
                        " ": "( -- ) ( F: r -- ) or\n( r -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- ) ( F: <em>r</em> -- ) or\n      ( <em>r</em> -- )\n      <p>\n      Display, with a trailing space, the top number on the\n      floating-point stack using fixed-point notation:\n            </p><div class=\"quote\">\n\n        [<strong>-</strong>] &lt;<em>digits</em>&gt;<strong>.</strong>&lt;<em>digits0</em>&gt;\n        \n        </div>\n      An ambiguous condition exists if the value of <a href=\"../core/BASE.html\">BASE</a>\n      is not (decimal) ten or if the character string representation\n      exceeds the size of the pictured numeric output string buffer.\n      <p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../floating/toFLOAT.html\">12.6.1.0558 &gt;FLOAT</a>,\n      <a href=\"../rationale.html#rat:floating:Fd\">A.12.6.2.1427 F.</a>\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.12.6.1.1427 F. -->\n      For example, <code>1E3</code> <strong>F.</strong> displays <code>1000.</code>\n      \n      \n      "
                    }
                }
            },
            "Fless": {
                "id": "floating:Fless",
                "number": "12.6.1.1460",
                "name": "F<",
                "english": "f-less-than",
                "list": "FLOATING",
                "basename": "Fless",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>flag</em> ) ( F: <em>r<sub>1</sub> r<sub>2</sub></em> -- ) or\n      ( <em>r<sub>1</sub> r<sub>2</sub></em> -- <em>flag</em> )"
                    },
                    "plain": {
                        " ": "( -- flag ) ( F: r1 r2 -- ) or\n( r1 r2 -- flag )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>flag</em> ) ( F: <em>r<sub>1</sub> r<sub>2</sub></em> -- ) or\n      ( <em>r<sub>1</sub> r<sub>2</sub></em> -- <em>flag</em> )\n      <p>\n      <em>flag</em> is true if and only if <em>r<sub>1</sub></em> is less than\n      <em>r<sub>2</sub></em>.\n      \n      </p>"
                    }
                }
            },
            "Ftilde": {
                "id": "floating:Ftilde",
                "number": "12.6.2.1640",
                "name": "F~",
                "english": "f-proximate",
                "list": "FLOATING EXT",
                "basename": "Ftilde",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>flag</em> ) ( F: <em>r<sub>1</sub> r<sub>2</sub> r<sub>3</sub></em> -- ) or\n      ( <em>r<sub>1</sub> r<sub>2</sub> r<sub>3</sub></em> -- <em>flag</em> )"
                    },
                    "plain": {
                        " ": "( -- flag ) ( F: r1 r2 r3 -- ) or\n( r1 r2 r3 -- flag )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>flag</em> ) ( F: <em>r<sub>1</sub> r<sub>2</sub> r<sub>3</sub></em> -- ) or\n      ( <em>r<sub>1</sub> r<sub>2</sub> r<sub>3</sub></em> -- <em>flag</em> )\n      <p>\n      If <em>r<sub>3</sub></em> is positive, <em>flag</em> is true if the absolute\n      value of (<em>r<sub>1</sub></em> minus <em>r<sub>2</sub></em>) is less than <em>r<sub>3</sub></em>.\n      </p><p>\n      If <em>r<sub>3</sub></em> is zero, <em>flag</em> is true if the\n      implementation-dependent encoding of <em>r<sub>1</sub></em> and <em>r<sub>2</sub></em>\n      are exactly identical (positive and negative zero are unequal if\n      they have distinct encodings).\n      </p><p>\n      If <em>r<sub>3</sub></em> is negative, <em>flag</em> is true if the absolute value\n      of (<em>r<sub>1</sub></em> minus <em>r<sub>2</sub></em>) is less than the absolute value of\n      <em>r<sub>3</sub></em> times the sum of the absolute values of <em>r<sub>1</sub></em> and\n      <em>r<sub>2</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../rationale.html#rat:floating:Ftilde\">A.12.6.2.1640 F~</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.12.6.1.1640 F\\tilde -->\n      This provides the three types of \"floating point equality\"\n      in common use — \"close\" in absolute terms, exact equality\n      as represented, and \"relatively close\".\n      \n      \n      "
                    }
                }
            },
            "FtoD": {
                "id": "floating:FtoD",
                "number": "12.6.1.1470",
                "name": "F>D",
                "english": "f-to-d",
                "list": "FLOATING",
                "basename": "FtoD",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>d</em> ) ( F: <em>r</em> -- ) or\n      ( <em>r</em> -- <em>d</em> )"
                    },
                    "plain": {
                        " ": "( -- d ) ( F: r -- ) or\n( r -- d )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>d</em> ) ( F: <em>r</em> -- ) or\n      ( <em>r</em> -- <em>d</em> )\n      <p>\n      <em>d</em> is the double-cell signed-integer equivalent of the\n      integer portion of <em>r</em>. The fractional portion of <em>r</em>\n      is discarded. An ambiguous condition exists if the integer portion\n      of <em>r</em> cannot be represented as a double-cell\n      signed integer.\n      </p><p>\n        \n      </p>"
                    },
                    "Note:": {
                        "name": "Note:",
                        "html": "\n\n Rounding the floating-point value prior to calling <strong>F&gt;D</strong>\n      is advised, because <strong>F&gt;D</strong> rounds towards zero.\n      \n      "
                    }
                }
            },
            "FtoS": {
                "id": "floating:FtoS",
                "number": "12.6.2.1471",
                "name": "F>S",
                "english": "F to S",
                "list": "FLOATING EXT",
                "basename": "FtoS",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>n</em> ) ( F: <em>r</em> -- ) or ( <em>r</em> -- <em>n</em> )"
                    },
                    "plain": {
                        " ": "( -- n ) ( F: r -- ) or ( r -- n )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>n</em> ) ( F: <em>r</em> -- ) or ( <em>r</em> -- <em>n</em> )\n      <p>\n      <em>n</em> is the single-cell signed-integer equivalent of the\n      integer portion of <em>r</em>.  The fractional portion of\n      <em>r</em> is discarded.  An ambiguous condition exists if\n      the integer portion of <em>r</em> cannot be represented as a\n      single-cell signed integer.\n      </p><p>\n        \n      </p>"
                    },
                    "Note:": {
                        "name": "Note:",
                        "html": "\n\n Rounding the floating-point value prior to calling <strong>F&gt;S</strong> is\n      advised, because <strong>F&gt;S</strong> rounds towards zero.\n      <p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../floating/StoF.html\">12.6.2.2175 S&gt;F</a>.\n      <p>\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n\n      <a href=\"../core/Colon.html\">:</a> <strong>F&gt;S</strong> <a href=\"../core/p.html\">(</a> r -- n ) <br>\n      &nbsp;&nbsp; <a href=\"../floating/FtoD.html\">F&gt;D</a> <a href=\"../double/DtoS.html\">D&gt;S</a> <br>\n      <a href=\"../core/Semi.html\">;</a>\n      \n      \n      "
                    }
                }
            },
            "PRECISION": {
                "id": "floating:PRECISION",
                "number": "12.6.2.2035",
                "name": "PRECISION",
                "english": " ",
                "list": "FLOATING EXT",
                "basename": "PRECISION",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>u</em> )"
                    },
                    "plain": {
                        " ": "( -- u )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>u</em> )\n      <p>\n      Return the number of significant digits currently used by\n      <a href=\"../floating/Fd.html\">F.</a>, <a href=\"../floating/FEd.html\">FE.</a>, or <a href=\"../floating/FSd.html\">FS.</a> as <em>u</em>.\n      \n      </p>"
                    }
                }
            },
            "REPRESENT": {
                "id": "floating:REPRESENT",
                "number": "12.6.1.2143",
                "name": "REPRESENT",
                "english": " ",
                "list": "FLOATING",
                "basename": "REPRESENT",
                "stackEffect": {
                    "html": {
                        " ": "( <em>c-addr u</em> -- <em>n flag<sub>1</sub> flag<sub>2</sub></em> ) ( F: <em>r</em> -- ) or\n      ( <em>r c-addr u</em> -- <em>n flag<sub>1</sub> flag<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( c-addr u -- n flag1 flag2 ) ( F: r -- ) or\n( r c-addr u -- n flag1 flag2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>c-addr u</em> -- <em>n flag<sub>1</sub> flag<sub>2</sub></em> ) ( F: <em>r</em> -- ) or\n      ( <em>r c-addr u</em> -- <em>n flag<sub>1</sub> flag<sub>2</sub></em> )\n      <p>\n      At <em>c-addr</em>, place the character-string external\n      representation of the significand of the floating-point number\n      <em>r</em>. Return the decimal-base exponent as <em>n</em>, the sign as\n      <em>flag<sub>1</sub></em> and \"valid result\" as <em>flag<sub>2</sub></em>.\n      The character string shall consist of the <em>u</em> most significant\n      digits of the significand represented as a decimal fraction with\n      the implied decimal point to the left of the first digit, and\n      the first digit zero only if all digits are zero. The significand\n      is rounded to <em>u</em> digits following the \"round to nearest\" rule;\n      <em>n</em> is adjusted, if necessary, to correspond to the rounded\n      magnitude of the significand. If <em>flag<sub>2</sub></em> is <em>true</em>\n      then <em>r</em> was in the implementation-defined range of floating-point\n      numbers. If <em>flag<sub>1</sub></em> is <em>true</em> then <em>r</em> is negative.\n      </p><p>\n      An ambiguous condition exists if the value of <a href=\"../core/BASE.html\">BASE</a>\n      is not decimal ten.\n      </p><p>\n      When <em>flag<sub>2</sub></em> is <em>false</em>, <em>n</em> and <em>flag<sub>1</sub></em>\n      are implementation defined, as are the contents of <em>c-addr</em>.\n      Under these circumstances, the string at <em>c-addr</em> shall\n      consist of graphic characters.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:digits\">3.2.1.2 Digit conversion</a></strong>,\n      <a href=\"../core/BASE.html\">6.1.0750 BASE</a>,\n      <strong><a href=\"../float.html#float:ops\">12.3.2 Floating-point operations</a></strong>, <br>\n      <a href=\"../rationale.html#rat:floating:REPRESENT\">A.12.6.1.2143 REPRESENT</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.12.6.1.2143 REPRESENT -->\n      This word provides a primitive for floating-point display.\n      Some floating-point formats, including those specified by\n      IEEE-754, allow representations of numbers outside of an\n      implementation-defined range. These include plus and minus\n      infinities, denormalized numbers, and others. In these cases\n      we expect that <strong>REPRESENT</strong> will usually be implemented\n      to return appropriate character strings, such as \"+infinity\"\n      or \"nan\", possibly truncated.\n      \n      \n      "
                    }
                }
            },
            "SET-PRECISION": {
                "id": "floating:SET-PRECISION",
                "number": "12.6.2.2200",
                "name": "SET-PRECISION",
                "english": " ",
                "list": "FLOATING EXT",
                "basename": "SET-PRECISION",
                "stackEffect": {
                    "html": {
                        " ": "( <em>u</em> -- )"
                    },
                    "plain": {
                        " ": "( u -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>u</em> -- )\n      <p>\n      Set the number of significant digits currently used by <a href=\"../floating/Fd.html\">F.</a>,\n      <a href=\"../floating/FEd.html\">FE.</a>, or <a href=\"../floating/FSd.html\">FS.</a> to <em>u</em>.\n      \n      </p>"
                    }
                }
            },
            "SFALIGN": {
                "id": "floating:SFALIGN",
                "number": "12.6.2.2204",
                "name": "SFALIGN",
                "english": "s-f-align",
                "list": "FLOATING EXT",
                "basename": "SFALIGN",
                "stackEffect": {
                    "html": {
                        " ": "( -- )"
                    },
                    "plain": {
                        " ": "( -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- )\n      <p>\n      If the data-space pointer is not single-float aligned, reserve\n      enough data space to make it so.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../float.html#float:addr\">12.3.1.1 Addresses</a></strong>.\n      \n      "
                    }
                }
            },
            "SFALIGNED": {
                "id": "floating:SFALIGNED",
                "number": "12.6.2.2206",
                "name": "SFALIGNED",
                "english": "s-f-aligned",
                "list": "FLOATING EXT",
                "basename": "SFALIGNED",
                "stackEffect": {
                    "html": {
                        " ": "( <em>addr</em> -- <em>sf-addr</em> )"
                    },
                    "plain": {
                        " ": "( addr -- sf-addr )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>addr</em> -- <em>sf-addr</em> )\n      <p>\n      <em>sf-addr</em> is the first single-float-aligned address greater\n      than or equal to <em>addr</em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../float.html#float:addr\">12.3.1.1 Addresses</a></strong>.\n      \n      "
                    }
                }
            },
            "SFFIELDColon": {
                "id": "floating:SFFIELD:",
                "number": "12.6.2.2206.40",
                "name": "SFFIELD:",
                "english": "s-f-field-colon",
                "list": "FLOATING EXT",
                "basename": "SFFIELDColon",
                "stackEffect": {
                    "html": {
                        " ": "( <em>n<sub>1</sub> \"&lt;spaces&gt;name\"</em> -- <em>n<sub>2</sub></em> )",
                        "name Execution:": "( <em>addr<sub>1</sub></em> -- <em>addr<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( n1 \"<spaces>name\" -- n2 )",
                        "name Execution:": "( addr1 -- addr2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>n<sub>1</sub> \"&lt;spaces&gt;name\"</em> -- <em>n<sub>2</sub></em> )\n      <p>\n      Skip leading space delimiters. Parse <em>name</em> delimited by\n      a space. <em>Offset</em> is the first single-float aligned value\n      greater than or equal to <em>n<sub>1</sub></em>.  <em>n<sub>2</sub> = offset + 1</em>\n      single-float.\n      </p><p>\n      Create a definition for <em>name</em> with the execution semantics\n      given below.\n      </p><p>\n        \n      </p>"
                    },
                    "name Execution:": {
                        "name": "name Execution:",
                        "html": "\n\n\n      ( <em>addr<sub>1</sub></em> -- <em>addr<sub>2</sub></em> )\n      <p>\n      Add the <em>offset</em> calculated during the compile-time action to\n      <em>addr<sub>1</sub></em> giving the address <em>addr<sub>2</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../facility/PlusFIELD.html\">10.6.2.0135 +FIELD</a>,\n      <a href=\"../facility/BEGIN-STRUCTURE.html\">10.6.2.0763 BEGIN-STRUCTURE</a>, <br>\n      <a href=\"../facility/END-STRUCTURE.html\">10.6.2.1336 END-STRUCTURE</a>,\n      <a href=\"../rationale.html#rat:facility:FIELD:\">A.10.6.2.1518 FIELD:</a>.\n      \n      "
                    }
                }
            },
            "SFFetch": {
                "id": "floating:SF@",
                "number": "12.6.2.2203",
                "name": "SF@",
                "english": "s-f-fetch",
                "list": "FLOATING EXT",
                "basename": "SFFetch",
                "stackEffect": {
                    "html": {
                        " ": "( <em>sf-addr</em> -- ) ( F: -- <em>r</em> ) or\n      ( <em>sf-addr</em> -- <em>r</em> )"
                    },
                    "plain": {
                        " ": "( sf-addr -- ) ( F: -- r ) or\n( sf-addr -- r )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>sf-addr</em> -- ) ( F: -- <em>r</em> ) or\n      ( <em>sf-addr</em> -- <em>r</em> )\n      <p>\n      Fetch the 32-bit IEEE single-precision number stored at\n      <em>sf-addr</em> to the floating-point stack as <em>r</em> in the\n      internal representation. If the IEEE single-precision\n      significand has more precision than the internal representation,\n      it will be rounded to the internal representation using the\n      \"round to nearest\" rule. An ambiguous condition exists if the\n      exponent of the IEEE single-precision representation is too\n      large to be accommodated by the internal representation.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../float.html#float:addr\">12.3.1.1 Addresses</a></strong>,\n      <strong><a href=\"../float.html#float:ops\">12.3.2 Floating-point operations</a></strong>.\n      \n      "
                    }
                }
            },
            "SFLOATPlus": {
                "id": "floating:SFLOAT+",
                "number": "12.6.2.2207",
                "name": "SFLOAT+",
                "english": "s-float-plus",
                "list": "FLOATING EXT",
                "basename": "SFLOATPlus",
                "stackEffect": {
                    "html": {
                        " ": "( <em>sf-addr<sub>1</sub></em> -- <em>sf-addr<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( sf-addr1 -- sf-addr2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>sf-addr<sub>1</sub></em> -- <em>sf-addr<sub>2</sub></em> )\n      <p>\n      Add the size in address units of a 32-bit IEEE single-precision\n      number to <em>sf-addr<sub>1</sub></em>, giving <em>sf-addr<sub>2</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../float.html#float:addr\">12.3.1.1 Addresses</a></strong>.\n      \n      "
                    }
                }
            },
            "SFLOATS": {
                "id": "floating:SFLOATS",
                "number": "12.6.2.2208",
                "name": "SFLOATS",
                "english": "s-floats",
                "list": "FLOATING EXT",
                "basename": "SFLOATS",
                "stackEffect": {
                    "html": {
                        " ": "( <em>n<sub>1</sub></em> -- <em>n<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( n1 -- n2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>n<sub>1</sub></em> -- <em>n<sub>2</sub></em> )\n      <p>\n      <em>n<sub>2</sub></em> is the size in address units of <em>n<sub>1</sub></em> 32-bit IEEE\n      single-precision numbers.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../float.html#float:addr\">12.3.1.1 Addresses</a></strong>.\n      \n      "
                    }
                }
            },
            "SFStore": {
                "id": "floating:SF!",
                "number": "12.6.2.2202",
                "name": "SF!",
                "english": "s-f-store",
                "list": "FLOATING EXT",
                "basename": "SFStore",
                "stackEffect": {
                    "html": {
                        " ": "( <em>sf-addr</em> -- ) ( F: <em>r</em> -- ) or\n      ( <em>r sf-addr</em> -- )"
                    },
                    "plain": {
                        " ": "( sf-addr -- ) ( F: r -- ) or\n( r sf-addr -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>sf-addr</em> -- ) ( F: <em>r</em> -- ) or\n      ( <em>r sf-addr</em> -- )\n      <p>\n      Store the floating-point number <em>r</em> as a 32-bit IEEE\n      single-precision number at <em>sf-addr</em>. If the significand\n      of the internal representation of <em>r</em> has more precision\n      than the IEEE single-precision format, it will be rounded using\n      the \"round to nearest\" rule. An ambiguous condition exists if\n      the exponent of <em>r</em> is too large to be accommodated by the\n      IEEE single-precision format.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../float.html#float:addr\">12.3.1.1 Addresses</a></strong>,\n      <strong><a href=\"../float.html#float:ops\">12.3.2 Floating-point operations</a></strong>.\n      \n      "
                    }
                }
            },
            "StoF": {
                "id": "floating:StoF",
                "number": "12.6.2.2175",
                "name": "S>F",
                "english": "S to F",
                "list": "FLOATING EXT",
                "basename": "StoF",
                "stackEffect": {
                    "html": {
                        " ": "( <em>n</em> -- ) ( F: -- <em>r</em> ) or ( <em>n</em> -- <em>r</em> )"
                    },
                    "plain": {
                        " ": "( n -- ) ( F: -- r ) or ( n -- r )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>n</em> -- ) ( F: -- <em>r</em> ) or ( <em>n</em> -- <em>r</em> )\n      <p>\n      <em>r</em> is the floating-point equivalent of the single-cell\n      value <em>n</em>.  An ambiguous condition exists if <em>n</em>\n      can not be precisely represented as a floating-point value.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../floating/FtoS.html\">12.6.2.1471 F&gt;S</a>.\n      <p>\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n\n      <a href=\"../core/Colon.html\">:</a> <strong>S&gt;F</strong> <a href=\"../core/p.html\">(</a> n -- r ) <br>\n      &nbsp;&nbsp; <a href=\"../core/StoD.html\">S&gt;D</a> <a href=\"../floating/DtoF.html\">D&gt;F</a> <br>\n      <a href=\"../core/Semi.html\">;</a>\n      \n      \n      "
                    }
                }
            },
            "toFLOAT": {
                "id": "floating:toFLOAT",
                "number": "12.6.1.0558",
                "name": ">FLOAT",
                "english": "to-float",
                "list": "FLOATING",
                "basename": "toFLOAT",
                "stackEffect": {
                    "html": {
                        " ": "( <em>c-addr u</em> -- <em>true  |  false</em> )\n      ( F: -- <em>r  | ~</em> ) or\n      ( <em>c-addr u</em> -- <em>r true  |  false</em> )"
                    },
                    "plain": {
                        " ": "( c-addr u -- true  |  false )\n( F: -- r  | ~ ) or\n( c-addr u -- r true  |  false )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>c-addr u</em> -- <em>true  |  false</em> )\n      ( F: -- <em>r  | ~</em> ) or\n      ( <em>c-addr u</em> -- <em>r true  |  false</em> )\n      <p>\n      An attempt is made to convert the string specified by <em>c-addr</em>\n      and <em>u</em> to internal floating-point representation. If the\n      string represents a valid floating-point number in the syntax below,\n      its value <em>r</em> and <em>true</em> are returned. If the string does\n      not represent a valid floating-point number only <em>false</em> is\n      returned.\n      </p><p>\n      A string of blanks should be treated as a special case\n      representing zero.\n      </p><p>\n      The syntax of a convertible string\n      </p><div class=\"center\">\n\n        <table class=\"center\">\n        <tbody><tr valign=\"top\"><td class=\"r\"></td><td> <span style=\"font-family: sans-serif\">:=</span> </td><td>&lt;<em>significand</em>&gt;[&lt;<em>exponent</em>&gt;] </td></tr>\n        <tr valign=\"top\"><td class=\"r\">&lt;<em>significand</em>&gt;\t</td><td> <span style=\"font-family: sans-serif\">:=</span> </td><td>[&lt;<em>sign</em>&gt;]{&lt;<em>digits</em>&gt;[<strong>.</strong>&lt;<em>digits0</em>&gt;]\n        | <strong>.</strong>&lt;<em>digits</em>&gt; } </td></tr>\n        <tr valign=\"top\"><td class=\"r\">&lt;<em>exponent</em>&gt;\t\t</td><td> <span style=\"font-family: sans-serif\">:=</span> </td><td>&lt;<em>marker</em>&gt;&lt;<em>digits0</em>&gt; </td></tr>\n        <tr valign=\"top\"><td class=\"r\">&lt;<em>marker</em>&gt;\t\t</td><td> <span style=\"font-family: sans-serif\">:=</span> </td><td>{&lt;<em>e-form</em>&gt; | &lt;<em>sign-form</em>&gt;}</td></tr>\n        <tr valign=\"top\"><td class=\"r\">&lt;<em>e-form</em>&gt;\t\t</td><td> <span style=\"font-family: sans-serif\">:=</span> </td><td>&lt;<em>e-char</em>&gt;[&lt;<em>sign-form</em>&gt;] </td></tr>\n        <tr valign=\"top\"><td class=\"r\">&lt;<em>sign-form</em>&gt; \t</td><td> <span style=\"font-family: sans-serif\">:=</span> </td><td>{ <strong>+</strong> | <strong>-</strong> } </td></tr>\n        <tr valign=\"top\"><td class=\"r\">&lt;<em>e-char</em>&gt;\t\t</td><td> <span style=\"font-family: sans-serif\">:=</span> </td><td>{ <strong>D</strong> | <strong>d</strong> |\n        <strong>E</strong> | <strong>e</strong> } </td></tr>\n        <tr valign=\"top\"><td class=\"r\"></td></tr>\n        </tbody></table>\n        \n        </div>\n      <p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../rationale.html#rat:floating:toFLOAT\">A.12.6.1.0558 &gt;FLOAT</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.12.6.1.0558 >FLOAT -->\n      <strong>&gt;FLOAT</strong> enables programs to read floating-point data in\n      legible ASCII format. It accepts a much broader syntax than\n      does the text interpreter since the latter defines rules for\n      composing source programs whereas <strong>&gt;FLOAT</strong> defines rules\n      for accepting data. <strong>&gt;FLOAT</strong> is defined as broadly as is\n      feasible to permit input of data from Forth-2012 systems\n      as well as other widely used standard programming environments.\n      <p>\n      This is a synthesis of common FORTRAN practice. Embedded spaces\n      are explicitly forbidden in much scientific usage, as are other\n      field separators such as comma or slash.\n      </p><p>\n      While <strong>&gt;FLOAT</strong> is not required to treat a string of blanks\n      as zero, this behavior is strongly encouraged, since a future\n      version of this standard may include such a requirement.\n      \n      \n      </p>"
                    }
                }
            }
        }
    },
    "local": {
        "name": "local",
        "words": {
            "LOCAL": {
                "id": "local:LOCAL",
                "number": "13.6.1.0086",
                "name": "(LOCAL)",
                "english": "paren-local-paren",
                "list": "LOCAL",
                "basename": "LOCAL",
                "stackEffect": {
                    "html": {
                        "Execution:": "( <em>c-addr u</em> -- )",
                        "local Execution:": "( -- <em>x</em> )",
                        "TO local Run-time:": "( <em>x</em> -- )"
                    },
                    "plain": {
                        "Execution:": "( c-addr u -- )",
                        "local Execution:": "( -- x )",
                        "TO local Run-time:": "( x -- )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Execution:": {
                        "name": "Execution:",
                        "html": "\n\n\n      ( <em>c-addr u</em> -- )\n      <p>\n      When executed during compilation, <strong>(LOCAL)</strong> passes a\n      message to the system that has one of two meanings. If <em>u</em>\n      is non-zero, the message identifies a new <em>local</em> whose\n      definition name is given by the string of characters identified\n      by <em>c-addr u</em>. If <em>u</em> is zero, the message is \"last\n      local\" and <em>c-addr</em> has no significance.\n      </p><p>\n      The result of executing <strong>(LOCAL)</strong> during compilation of a\n      definition is to create a set of named local identifiers, each\n      of which is a definition name, that only have execution\n      semantics within the scope of that definition's source.\n      </p><p>\n        \n      </p>"
                    },
                    "local Execution:": {
                        "name": "local Execution:",
                        "html": "\n\n\n      ( -- <em>x</em> )\n      <p>\n      Push the local's value, <em>x</em>, onto the stack. The local's\n      value is initialized as described in <strong><a href=\"../locals.html#local:locals\">13.3.3 Processing locals</a></strong> and may be changed by preceding the local's\n      name with <a href=\"../core/TO.html\">TO</a>. An ambiguous condition exists when local is\n      executed while in interpretation state.\n      </p><p>\n        \n      </p>"
                    },
                    "TO local Run-time:": {
                        "name": "TO local Run-time:",
                        "html": "\n\n ( <em>x</em> -- )\n      <p>\n      Assign the value <em>x</em> to the local value <em>local</em>.\n      </p><p>\n        \n      </p>"
                    },
                    "Note:": {
                        "name": "Note:",
                        "html": "\n\n\n      This word is not intended for direct use in a definition to\n      declare that definition's locals. It is instead used by system\n      or user compiling words. These compiling words in turn define\n      their own syntax, and may be used directly in definitions to\n      declare locals. In this context, the syntax for <strong>(LOCAL)</strong>\n      is defined in terms of a sequence of compile-time messages and\n      is described in detail in section <strong><a href=\"../locals.html#local:locals\">13.3.3 Processing locals</a></strong>.\n      <p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:command\">3.4 The Forth text interpreter</a></strong> and\n      <a href=\"../core/TO.html\">6.2.2295 TO</a>.\n      \n      "
                    }
                }
            },
            "LOCALS": {
                "id": "local:LOCALS",
                "number": "13.6.2.1795",
                "name": "LOCALS|",
                "english": "locals-bar",
                "list": "LOCAL EXT",
                "basename": "LOCALS",
                "stackEffect": {
                    "html": {
                        "Compilation:": "( <em>\"&lt;spaces&gt;name<sub>1</sub>\" \"&lt;spaces&gt;name<sub>2</sub>\" ... \"&lt;spaces&gt;name<sub>n</sub>\" \" | \"</em> -- )",
                        "Run-time:": "( <em>x<sub>n</sub> ... x<sub>2</sub> x<sub>1</sub></em> -- )"
                    },
                    "plain": {
                        "Compilation:": "( \"<spaces>name1\" \"<spaces>name2\" ... \"<spaces>namen\" \" | \" -- )",
                        "Run-time:": "( xn ... x2 x1 -- )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      ( <em>\"&lt;spaces&gt;name<sub>1</sub>\" \"&lt;spaces&gt;name<sub>2</sub>\" ... \"&lt;spaces&gt;name<sub>n</sub>\" \" | \"</em> -- )\n      <p>\n      Create up to eight local identifiers by repeatedly skipping\n      leading spaces, parsing <em>name</em>, and executing\n      <a href=\"../local/LOCAL.html\">13.6.1.0086 (LOCAL)</a>. The list of locals to be defined\n      is terminated by <em> | </em>. Append the run-time semantics given\n      below to the current definition.\n      </p><p>\n        \n      </p>"
                    },
                    "Run-time:": {
                        "name": "Run-time:",
                        "html": "\n\n\n      ( <em>x<sub>n</sub> ... x<sub>2</sub> x<sub>1</sub></em> -- )\n      <p>\n      Initialize up to eight local identifiers as described in\n      <a href=\"../local/LOCAL.html\">13.6.1.0086 (LOCAL)</a>, each of which takes as its\n      initial value the top stack item, removing it from the stack.\n      Identifier <em>name<sub>1</sub></em> is initialized with <em>x<sub>1</sub></em>,\n      identifier <em>name<sub>2</sub></em> with <em>x<sub>2</sub></em>, etc. When invoked,\n      each local will return its value. The value of a local may be\n      changed using <a href=\"../core/TO.html\">6.2.2295 TO</a>.\n      </p><p>\n        \n      </p>"
                    },
                    "Note:": {
                        "name": "Note:",
                        "html": "\n\n This word is obsolescent and is included as a concession to\n      existing implementations.\n      <p>\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n\n      <a href=\"../core/Colon.html\">:</a> <strong>LOCALS|</strong> <a href=\"../core/p.html\">(</a> \"name...name |\" -- ) <br>\n      &nbsp;&nbsp; <a href=\"../core/BEGIN.html\">BEGIN</a> <br>\n      &nbsp;&nbsp;  <a href=\"../core/BL.html\">BL</a> <a href=\"../core/WORD.html\">WORD</a>   <a href=\"../core/COUNT.html\">COUNT</a> <a href=\"../core/OVER.html\">OVER</a> <a href=\"../core/CFetch.html\">C@</a> <br>\n      &nbsp;&nbsp;  <a href=\"../core/BracketCHAR.html\">[CHAR]</a> | <a href=\"../core/Minus.html\">-</a> <a href=\"../core/OVER.html\">OVER</a> 1 <a href=\"../core/Minus.html\">-</a> <a href=\"../core/OR.html\">OR</a>   <a href=\"../core/WHILE.html\">WHILE</a> <br>\n      &nbsp;&nbsp;  <a href=\"../local/LOCAL.html\">(LOCAL)</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/REPEAT.html\">REPEAT</a> <a href=\"../core/TwoDROP.html\">2DROP</a>   0 0 <a href=\"../local/LOCAL.html\">(LOCAL)</a> <br>\n      <a href=\"../core/Semi.html\">;</a> <a href=\"../core/IMMEDIATE.html\">IMMEDIATE</a>\n      \n      "
                    }
                }
            },
            "bColon": {
                "id": "local:b:",
                "number": "13.6.2.2550",
                "name": "{:",
                "english": "brace-colon",
                "list": "LOCAL EXT",
                "basename": "bColon",
                "stackEffect": {
                    "html": {
                        "Compilation:": "( <em>i * x \"&lt;spaces&gt;ccc <code>:}</code>\"</em> -- )",
                        "Run-time:": "( <em>x<sub>1</sub> ... x<sub>n</sub></em> -- )",
                        "name Execution:": "( -- <em>x</em> )",
                        "TO name Run-time:": "( <em>x</em> -- )"
                    },
                    "plain": {
                        "Compilation:": "( i * x \"<spaces>ccc :}\" -- )",
                        "Run-time:": "( x1 ... xn -- )",
                        "name Execution:": "( -- x )",
                        "TO name Run-time:": "( x -- )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      ( <em>i * x \"&lt;spaces&gt;ccc <code>:}</code>\"</em> -- )\n      <p>\n      Parse <em>ccc</em> according to the following syntax:\n      </p><div class=\"center\">\n\n        <strong>{:</strong> &lt;<em>arg</em>&gt;* [<strong>|</strong> &lt;<em>val</em>&gt;*] [<strong>–&nbsp;–</strong> &lt;<em>out</em>&gt;*] <code>:}</code>\n        \n        </div>\n      where &lt;<em>arg</em>&gt;, &lt;<em>val</em>&gt; and &lt;<em>out</em>&gt; are local names, and\n      <em>i</em> is the number of &lt;<em>arg</em>&gt; names given.\n      <p>\n      The following ambiguous conditions exist when:\n      </p><ul>\n      <li> a local name ends in \"<code>:</code>\", \"<code>[</code>\", \"<code>^</code>\";\n      </li>\n      <li> a local name is a single non-alphabetic character;\n      </li>\n      <li> the text between <strong>{:</strong> and <code>:}</code> extends\n      over more than one line;\n      </li>\n      <li> <strong>{:</strong> ... <code>:}</code> is used more than once in a word.\n      </li>\n</ul>\n      <p>\n      Append the run-time semantics below. \n      </p><p>\n        \n      </p>"
                    },
                    "Run-time:": {
                        "name": "Run-time:",
                        "html": "\n\n\n      ( <em>x<sub>1</sub> ... x<sub>n</sub></em> -- )\n      <p>\n      Create locals for &lt;<em>arg</em>&gt;s and &lt;<em>val</em>&gt;s. &lt;<em>out</em>&gt;s are ignored.\n      </p><p>\n      </p><ol style=\"list-style-type: decimal\">\n      <li> names are initialized from the data stack, with the\n      top of the stack being assigned to the right most &lt;<em>arg</em>&gt; name.\n      <p>\n      </p></li>\n      <li> names are uninitialized.\n      </li>\n</ol>\n      <p>\n      &lt;<em>val</em>&gt; and &lt;<em>arg</em>&gt; names have the execution semantics\n      given below.\n      </p><p>\n        \n      </p>"
                    },
                    "name Execution:": {
                        "name": "name Execution:",
                        "html": "\n\n\n      ( -- <em>x</em> )\n      <p>\n      Place the value currently assigned to <em>name</em> on the stack.\n      An ambiguous condition exists when <em>name</em> is executed while\n      in interpretation state.\n      </p><p>\n        \n      </p>"
                    },
                    "TO name Run-time:": {
                        "name": "TO name Run-time:",
                        "html": "\n\n\n      ( <em>x</em> -- )\n      <p>\n      Set <em>name</em> to the value <em>x</em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../notation.html#notation:BNF\">2.2.5 BNF notation</a></strong>,\n      <a href=\"../core/VALUE.html\">6.2.2405 VALUE</a>,\n      <a href=\"../core/TO.html\">6.2.2295 TO</a>,\n      <a href=\"../rationale.html#rat:local:b:\">A.13.6.2.2550 {:</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n\n      The Forth 94 Technical Committee was unable to identify any\n      common practice for locals.  It provided a way to define locals\n      and a method of parsing them in the hope that a common practice\n      would emerge.\n      <p>\n      Since then, common practice has emerged.  Most implementations that\n      provide <a href=\"../local/LOCAL.html\">(LOCAL)</a> and  <a href=\"../local/LOCALS.html\">LOCALS|</a> also provide some form of the\n      { ... } notation; however, the phrase { ... } conflicts with\n      other systems.  The <strong>{:</strong> ... <code>:}</code> notation is a compromise\n      to avoid name conflicts.\n      </p><p>\n      The notation provides for different kinds of local: those that are\n      initialized from the data stack at run-time, uninitialized locals, and\n      outputs.  Initialized locals are separated from uninitialized locals by\n      `<code>|</code>'.  The definition of locals is terminated by\n      `<code>--</code>' or `<code>:}</code>'.\n      </p><p>\n      All text between `<code>--</code>' and `<code>:}</code>' is ignored.  This eases\n      documentation by allowing a complete stack comment in the locals definition.\n      </p><p>\n      The `<code>|</code>' (ASCII $7C) character is widely used as the\n      separator between local arguments and local values.  Some implementations\n      have used `<code>\\</code>' (ASCII $5C) or `<code>¦</code>' ($A6).\n      Systems are free to continue to provide these alternative separators.\n      However, only the recognition of the `<code>|</code>' separator is\n      mandatory. Therefore portable programs must use the `<code>|</code>'\n      separator.\n      </p><p>\n      A number of systems extend the locals notation in various ways.  Some of\n      these extensions may emerge as common practice.  This standard has reserved\n      the notation used by these extensions to avoid difficulties when porting\n      code to these systems.  In particular local names ending in\n      `<code>:</code>' (colon),\n      `<code>[</code>' (open bracket), or\n      `<code>^</code>' (caret) are reserved.\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n\n      12345 <a href=\"../core/CONSTANT.html\">CONSTANT</a> undefined-value\n      <p>\n      <a href=\"../core/Colon.html\">:</a> match-or-end? <a href=\"../core/p.html\">(</a> c-addr1 u1 c-addr2 u2 -- f ) <br>\n      &nbsp;&nbsp;&nbsp;2 <a href=\"../core/PICK.html\">PICK</a> <a href=\"../core/ZeroEqual.html\">0=</a> <a href=\"../core/toR.html\">&gt;R</a> <a href=\"../string/COMPARE.html\">COMPARE</a> <a href=\"../core/ZeroEqual.html\">0=</a> <a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/OR.html\">OR</a> <a href=\"../core/Semi.html\">;</a>\n      </p><p>\n      <a href=\"../core/Colon.html\">:</a> scan-args <br>\n      &nbsp;&nbsp;&nbsp;<a href=\"../core/bs.html\">\\</a> 0 c-addr1 u1 -- c-addr1 u1 ... c-addrn un n c-addrn+1 un+1<br>\n      &nbsp;&nbsp;&nbsp;<a href=\"../core/BEGIN.html\">BEGIN</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp;\t<a href=\"../core/TwoDUP.html\">2DUP</a> <a href=\"../core/Sq.html\">S\"</a> |\"    match-or-end? <a href=\"../core/ZeroEqual.html\">0=</a> <a href=\"../core/WHILE.html\">WHILE</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp;\t<a href=\"../core/TwoDUP.html\">2DUP</a> <a href=\"../core/Sq.html\">S\"</a> --\" match-or-end? <a href=\"../core/ZeroEqual.html\">0=</a> <a href=\"../core/WHILE.html\">WHILE</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp;\t<a href=\"../core/TwoDUP.html\">2DUP</a> <a href=\"../core/Sq.html\">S\"</a> :}\"  match-or-end? <a href=\"../core/ZeroEqual.html\">0=</a> <a href=\"../core/WHILE.html\">WHILE</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp;\t<a href=\"../core/ROT.html\">ROT</a> <a href=\"../core/OnePlus.html\">1+</a> <a href=\"../core/PARSE-NAME.html\">PARSE-NAME</a> <br>\n      &nbsp;&nbsp;&nbsp;<a href=\"../core/AGAIN.html\">AGAIN</a> <a href=\"../core/THEN.html\">THEN</a> <a href=\"../core/THEN.html\">THEN</a> <a href=\"../core/THEN.html\">THEN</a> <a href=\"../core/Semi.html\">;</a>\n      </p><p>\n      <a href=\"../core/Colon.html\">:</a> scan-locals <br>\n      &nbsp;&nbsp;&nbsp;<a href=\"../core/bs.html\">\\</a> n c-addr1 u1 -- c-addr1 u1 ... c-addrn un n c-addrn+1 un+1 <br>\n      &nbsp;&nbsp;&nbsp;<a href=\"../core/TwoDUP.html\">2DUP</a> <a href=\"../core/Sq.html\">S\"</a> |\" <a href=\"../string/COMPARE.html\">COMPARE</a> <a href=\"../core/ZeroEqual.html\">0=</a> <a href=\"../core/ZeroEqual.html\">0=</a> <a href=\"../core/IF.html\">IF</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp;\t<a href=\"../core/EXIT.html\">EXIT</a> <br>\n      &nbsp;&nbsp;&nbsp;<a href=\"../core/THEN.html\">THEN</a> <br>\n      &nbsp;&nbsp;&nbsp;<a href=\"../core/TwoDROP.html\">2DROP</a> <a href=\"../core/PARSE-NAME.html\">PARSE-NAME</a> <br>\n      &nbsp;&nbsp;&nbsp;<a href=\"../core/BEGIN.html\">BEGIN</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp;\t<a href=\"../core/TwoDUP.html\">2DUP</a> <a href=\"../core/Sq.html\">S\"</a> --\" match-or-end? <a href=\"../core/ZeroEqual.html\">0=</a> <a href=\"../core/WHILE.html\">WHILE</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp;\t<a href=\"../core/TwoDUP.html\">2DUP</a> <a href=\"../core/Sq.html\">S\"</a> :}\"  match-or-end? <a href=\"../core/ZeroEqual.html\">0=</a> <a href=\"../core/WHILE.html\">WHILE</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp;\t<a href=\"../core/ROT.html\">ROT</a> <a href=\"../core/OnePlus.html\">1+</a> <a href=\"../core/PARSE-NAME.html\">PARSE-NAME</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp;\t<a href=\"../core/POSTPONE.html\">POSTPONE</a> undefined-value <br>\n      &nbsp;&nbsp;&nbsp;<a href=\"../core/AGAIN.html\">AGAIN</a> <a href=\"../core/THEN.html\">THEN</a> <a href=\"../core/THEN.html\">THEN</a> <a href=\"../core/Semi.html\">;</a>\n      </p><p>\n      <a href=\"../core/Colon.html\">:</a> scan-end <a href=\"../core/p.html\">(</a> c-addr1 u1 -- c-addr2 u2 ) <br>\n      &nbsp;&nbsp;&nbsp;<a href=\"../core/BEGIN.html\">BEGIN</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp;\t<a href=\"../core/TwoDUP.html\">2DUP</a> <a href=\"../core/Sq.html\">S\"</a> :}\" match-or-end? <a href=\"../core/ZeroEqual.html\">0=</a> <a href=\"../core/WHILE.html\">WHILE</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp;\t<a href=\"../core/TwoDROP.html\">2DROP</a> <a href=\"../core/PARSE-NAME.html\">PARSE-NAME</a> <br>\n      &nbsp;&nbsp;&nbsp;<a href=\"../core/REPEAT.html\">REPEAT</a> <a href=\"../core/Semi.html\">;</a>\n      </p><p>\n      <a href=\"../core/Colon.html\">:</a> define-locals <a href=\"../core/p.html\">(</a> c-addr1 u1 ... c-addrn un n -- ) <br>\n      &nbsp;&nbsp;&nbsp;0 <a href=\"../core/qDO.html\">?DO</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp;\t<a href=\"../local/LOCAL.html\">(LOCAL)</a> <br>\n      &nbsp;&nbsp;&nbsp;<a href=\"../core/LOOP.html\">LOOP</a> <br>\n      &nbsp;&nbsp;&nbsp;0 0 <a href=\"../local/LOCAL.html\">(LOCAL)</a> <a href=\"../core/Semi.html\">;</a>\n      </p><p>\n      <a href=\"../core/Colon.html\">:</a> {: <a href=\"../core/p.html\">(</a> -- ) <br>\n      &nbsp;&nbsp;&nbsp;0 <a href=\"../core/PARSE-NAME.html\">PARSE-NAME</a> <br>\n      &nbsp;&nbsp;&nbsp;scan-args scan-locals scan-end <br>\n      &nbsp;&nbsp;&nbsp;<a href=\"../core/TwoDROP.html\">2DROP</a> define-locals <br>\n      <a href=\"../core/Semi.html\">;</a> <a href=\"../core/IMMEDIATE.html\">IMMEDIATE</a>\n      \n      \n      </p>"
                    }
                }
            }
        }
    },
    "memory": {
        "name": "memory",
        "words": {
            "ALLOCATE": {
                "id": "memory:ALLOCATE",
                "number": "14.6.1.0707",
                "name": "ALLOCATE",
                "english": " ",
                "list": "MEMORY",
                "basename": "ALLOCATE",
                "stackEffect": {
                    "html": {
                        " ": "( <em>u</em> -- <em>a-addr ior</em> )"
                    },
                    "plain": {
                        " ": "( u -- a-addr ior )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>u</em> -- <em>a-addr ior</em> )\n      <p>\n      Allocate <em>u</em> address units of contiguous data space. The\n      data-space pointer is unaffected by this operation. The initial\n      content of the allocated space is undefined.\n      </p><p>\n      If the allocation succeeds, <em>a-addr</em> is the aligned\n      starting address of the allocated space and <em>ior</em> is\n      zero.\n      </p><p>\n      If the operation fails, <em>a-addr</em> does not represent a valid\n      address and <em>ior</em> is the implementation-defined I/O result\n      code.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/HERE.html\">6.1.1650 HERE</a>,\n      <a href=\"../memory/FREE.html\">14.6.1.1605 FREE</a>,\n      <a href=\"../memory/RESIZE.html\">14.6.1.2145 RESIZE</a>.\n      <p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n            <div class=\"tt\">\n<a href=\"../core/VARIABLE.html\">VARIABLE</a> datsp <br>\n        <a href=\"../core/HERE.html\">HERE</a> datsp <a href=\"../core/Store.html\">!</a>\n        <p>\n        <span class=\"tt\">T{ 50&nbsp;<a href=\"../core/CELLS.html\">CELLS</a>&nbsp;<strong>ALLOCATE</strong>&nbsp;<a href=\"../core/SWAP.html\">SWAP</a>&nbsp;addr&nbsp;<a href=\"../core/Store.html\">!</a> -&gt; 0 }T</span> <br>\n        <span class=\"tt\">T{ addr&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<a href=\"../core/ALIGNED.html\">ALIGNED</a> -&gt; addr&nbsp;<a href=\"../core/Fetch.html\">@</a> }T</span>\t\t\t\t&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Test address is aligned</span> <br>\n        <span class=\"tt\">T{ <a href=\"../core/HERE.html\">HERE</a> -&gt; datsp&nbsp;<a href=\"../core/Fetch.html\">@</a> }T</span>\t\t\t\t\t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Check data space pointer is unaffected</span><br>\n        addr <a href=\"../core/Fetch.html\">@</a> 50 write-cell-mem <br>\n        addr <a href=\"../core/Fetch.html\">@</a> 50 check-cell-mem &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Check we can access the heap</span> <br>\n        <span class=\"tt\">T{ addr&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<a href=\"../memory/FREE.html\">FREE</a> -&gt; 0 }T</span>\n        </p><p>\n        <span class=\"tt\">T{ 99&nbsp;<strong>ALLOCATE</strong>&nbsp;<a href=\"../core/SWAP.html\">SWAP</a>&nbsp;addr&nbsp;<a href=\"../core/Store.html\">!</a> -&gt; 0 }T</span> <br>\n        <span class=\"tt\">T{ addr&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<a href=\"../core/ALIGNED.html\">ALIGNED</a> -&gt; addr&nbsp;<a href=\"../core/Fetch.html\">@</a> }T</span> &nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Test address is aligned</span> <br>\n        <span class=\"tt\">T{ addr&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<a href=\"../memory/FREE.html\">FREE</a> -&gt; 0 }T</span> <br>\n        <span class=\"tt\">T{ <a href=\"../core/HERE.html\">HERE</a> -&gt; datsp&nbsp;<a href=\"../core/Fetch.html\">@</a> }T</span>\t\t\t\t\t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Data space pointer unaffected by <a href=\"../memory/FREE.html\">FREE</a></span><br>\n        <span class=\"tt\">T{ -1&nbsp;<strong>ALLOCATE</strong>&nbsp;<a href=\"../core/SWAP.html\">SWAP</a>&nbsp;<a href=\"../core/DROP.html\">DROP</a>&nbsp;<a href=\"../core/ZeroEqual.html\">0=</a> -&gt; &lt;FALSE&gt; }T</span> &nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Memory allocate failed</span>\n        \n        \n        </p></div>\n      "
                    }
                }
            },
            "FREE": {
                "id": "memory:FREE",
                "number": "14.6.1.1605",
                "name": "FREE",
                "english": " ",
                "list": "MEMORY",
                "basename": "FREE",
                "stackEffect": {
                    "html": {
                        " ": "( <em>a-addr</em> -- <em>ior</em> )"
                    },
                    "plain": {
                        " ": "( a-addr -- ior )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>a-addr</em> -- <em>ior</em> )\n      <p>\n      Return the contiguous region of data space indicated by\n      <em>a-addr</em> to the system for later allocation. <em>a-addr</em>\n      shall indicate a region of data space that was previously\n      obtained by <a href=\"../memory/ALLOCATE.html\">ALLOCATE</a> or <a href=\"../memory/RESIZE.html\">RESIZE</a>. The data-space\n      pointer is unaffected by this operation.\n      </p><p>\n      If the operation succeeds, <em>ior</em> is zero. If the operation\n      fails, <em>ior</em> is the implementation-defined I/O result code.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/HERE.html\">6.1.1650 HERE</a>,\n      <a href=\"../memory/ALLOCATE.html\">14.6.1.0707 ALLOCATE</a>,\n      <a href=\"../memory/RESIZE.html\">14.6.1.2145 RESIZE</a>.\n      <p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      <span class=\"rm\">See <a href=\"../testsuite.html#test:memory:ALLOCATE\">F.14.6.1.0707 ALLOCATE</a></span>\n      \n      \n      "
                    }
                }
            },
            "RESIZE": {
                "id": "memory:RESIZE",
                "number": "14.6.1.2145",
                "name": "RESIZE",
                "english": " ",
                "list": "MEMORY",
                "basename": "RESIZE",
                "stackEffect": {
                    "html": {
                        " ": "( <em>a-addr<sub>1</sub> u</em> -- <em>a-addr<sub>2</sub> ior</em> )"
                    },
                    "plain": {
                        " ": "( a-addr1 u -- a-addr2 ior )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>a-addr<sub>1</sub> u</em> -- <em>a-addr<sub>2</sub> ior</em> )\n      <p>\n      Change the allocation of the contiguous data space starting at\n      the address <em>a-addr<sub>1</sub></em>, previously allocated by\n      <a href=\"../memory/ALLOCATE.html\">ALLOCATE</a> or <strong>RESIZE</strong>, to <em>u</em> address units.\n      <em>u</em> may be either larger or smaller than the current\n      size of the region. The data-space pointer is unaffected by\n      this operation.\n      </p><p>\n      If the operation succeeds, <em>a-addr<sub>2</sub></em> is the aligned\n      starting address of <em>u</em> address units of allocated memory\n      and <em>ior</em> is zero. <em>a-addr<sub>2</sub></em> may be, but need\n      not be, the same as <em>a-addr<sub>1</sub></em>. If they are not the same,\n      the values contained in the region at <em>a-addr<sub>1</sub></em> are copied\n      to <em>a-addr<sub>2</sub></em>, up to the minimum size of either of the\n      two regions. If they are the same, the values contained in the\n      region are preserved to the minimum of <em>u</em> or the original\n      size.  If <em>a-addr<sub>2</sub></em> is not the same as <em>a-addr<sub>1</sub></em>,\n      the region of memory at <em>a-addr<sub>1</sub></em> is returned to the system\n      according to the operation of <a href=\"../memory/FREE.html\">FREE</a>.\n      </p><p>\n      If the operation fails, <em>a-addr<sub>2</sub></em> equals <em>a-addr<sub>1</sub></em>,\n      the region of memory at <em>a-addr<sub>1</sub></em> is unaffected, and\n      <em>ior</em> is the implementation-defined I/O result code.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/HERE.html\">6.1.1650 HERE</a>,\n      <a href=\"../memory/ALLOCATE.html\">14.6.1.0707 ALLOCATE</a>,\n      <a href=\"../memory/FREE.html\">14.6.1.1605 FREE</a>.\n      <p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n      <div class=\"tt\">\n<span class=\"tt\">T{ 50&nbsp;<a href=\"../core/CHARS.html\">CHARS</a>&nbsp;<a href=\"../memory/ALLOCATE.html\">ALLOCATE</a>&nbsp;<a href=\"../core/SWAP.html\">SWAP</a>&nbsp;addr&nbsp;<a href=\"../core/Store.html\">!</a> -&gt; 0 }T</span> <br>\n        addr <a href=\"../core/Fetch.html\">@</a> 50 write-char-mem addr <a href=\"../core/Fetch.html\">@</a> 50 check-char-mem\n        <p>\n        <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Resize smaller does not change content.</span> <br>\n        <span class=\"tt\">T{ addr&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;28&nbsp;<a href=\"../core/CHARS.html\">CHARS</a>&nbsp;<strong>RESIZE</strong>&nbsp;<a href=\"../core/SWAP.html\">SWAP</a>&nbsp;addr&nbsp;<a href=\"../core/Store.html\">!</a> -&gt; 0 }T</span> <br>\n        addr <a href=\"../core/Fetch.html\">@</a> 28 check-char-mem\n        </p><p>\n        <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Resize larger does not change original content.</span> <br>\n        <span class=\"tt\">T{ addr&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;100&nbsp;<a href=\"../core/CHARS.html\">CHARS</a>&nbsp;<strong>RESIZE</strong>&nbsp;<a href=\"../core/SWAP.html\">SWAP</a>&nbsp;addr&nbsp;<a href=\"../core/Store.html\">!</a> -&gt; 0 }T</span> <br>\n        addr <a href=\"../core/Fetch.html\">@</a> 28 check-char-mem\n        </p><p>\n        <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Resize error does not change <em>addr</em></span> <br>\n        <span class=\"tt\">T{ addr&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;-1&nbsp;<strong>RESIZE</strong>&nbsp;<a href=\"../core/ZeroEqual.html\">0=</a> -&gt; addr&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;&lt;FALSE&gt; }T</span>\n        </p><p>\n        <span class=\"tt\">T{ addr&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<a href=\"../memory/FREE.html\">FREE</a> -&gt; 0 }T</span> <br>\n        <span class=\"tt\">T{ <a href=\"../core/HERE.html\">HERE</a> -&gt; datsp&nbsp;<a href=\"../core/Fetch.html\">@</a> }T</span> &nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Data space pointer is unaffected</span>\n        \n        \n        </p></div>\n      "
                    }
                }
            }
        }
    },
    "search": {
        "name": "search",
        "words": {
            "ALSO": {
                "id": "search:ALSO",
                "number": "16.6.2.0715",
                "name": "ALSO",
                "english": " ",
                "list": "SEARCH EXT",
                "basename": "ALSO",
                "stackEffect": {
                    "html": {
                        " ": "( -- )"
                    },
                    "plain": {
                        " ": "( -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- )\n      <p>\n      Transform the search order consisting of <em>wid<sub>n</sub></em>, ...\n      <em>wid<sub>2</sub></em>, <em>wid<sub>1</sub></em> (where <em>wid<sub>1</sub></em> is searched\n      first) into <em>wid<sub>n</sub></em>, ... <em>wid<sub>2</sub></em>, <em>wid<sub>1</sub></em>,\n      <em>wid<sub>1</sub></em>. An ambiguous condition exists if there are too\n      many word lists in the search order.\n      </p><p>\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n\n      <a href=\"../core/Colon.html\">:</a> <strong>ALSO</strong> <a href=\"../core/p.html\">(</a> -- ) <br>\n      &nbsp;&nbsp; <a href=\"../search/GET-ORDER.html\">GET-ORDER</a> <a href=\"../core/OVER.html\">OVER</a> <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../core/OnePlus.html\">1+</a> <a href=\"../search/SET-ORDER.html\">SET-ORDER</a> <br>\n      <a href=\"../core/Semi.html\">;</a>\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      <span class=\"tt\">T{ <strong>ALSO</strong>&nbsp;<a href=\"../search/GET-ORDER.html\">GET-ORDER</a>&nbsp;<a href=\"../search/ONLY.html\">ONLY</a> -&gt; get-orderlist&nbsp;<a href=\"../core/OVER.html\">OVER</a>&nbsp;<a href=\"../core/SWAP.html\">SWAP</a>&nbsp;<a href=\"../core/OnePlus.html\">1+</a> }T</span>\n      \n      \n      "
                    }
                }
            },
            "DEFINITIONS": {
                "id": "search:DEFINITIONS",
                "number": "16.6.1.1180",
                "name": "DEFINITIONS",
                "english": " ",
                "list": "SEARCH",
                "basename": "DEFINITIONS",
                "stackEffect": {
                    "html": {
                        " ": "( -- )"
                    },
                    "plain": {
                        " ": "( -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- )\n      <p>\n      Make the compilation word list the same as the first word list\n      in the search order. Specifies that the names of subsequent\n      definitions will be placed in the compilation word list.\n      Subsequent changes in the search order will not affect the\n      compilation word list.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../search.html#search:find\">16.3.3 Finding definition names</a></strong>.\n      <p>\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n\n      <a href=\"../core/Colon.html\">:</a> discard <a href=\"../core/p.html\">(</a> x1 ... xn u -- ) \\ <span class=\"rm\">Drop u+1 stack items</span> <br>\n      &nbsp;&nbsp; 0 <a href=\"../core/qDO.html\">?DO</a> <a href=\"../core/DROP.html\">DROP</a> <a href=\"../core/LOOP.html\">LOOP</a> <br>\n      <a href=\"../core/Semi.html\">;</a>\n      <p>\n      <a href=\"../core/Colon.html\">:</a> <strong>DEFINITIONS</strong> <a href=\"../core/p.html\">(</a> -- ) <br>\n      &nbsp;&nbsp; <a href=\"../search/GET-ORDER.html\">GET-ORDER</a> <a href=\"../core/SWAP.html\">SWAP</a>  <a href=\"../search/SET-CURRENT.html\">SET-CURRENT</a> discard <br>\n      <a href=\"../core/Semi.html\">;</a>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n      <div class=\"tt\">\n<span class=\"tt\">T{ <a href=\"../search/ONLY.html\">ONLY</a>&nbsp;<a href=\"../search/FORTH.html\">FORTH</a>&nbsp;<strong>DEFINITIONS</strong> -&gt;  }T</span> <br>\n        <span class=\"tt\">T{ <a href=\"../search/GET-CURRENT.html\">GET-CURRENT</a> -&gt; FORTH-WORDLIST }T</span>\n        <p>\n        <span class=\"tt\">T{ <a href=\"../search/GET-ORDER.html\">GET-ORDER</a>&nbsp;wid2&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<a href=\"../core/SWAP.html\">SWAP</a>&nbsp;<a href=\"../core/OnePlus.html\">1+</a>&nbsp;<a href=\"../search/SET-ORDER.html\">SET-ORDER</a>&nbsp;<strong>DEFINITIONS</strong>&nbsp;<a href=\"../search/GET-CURRENT.html\">GET-CURRENT</a><br>\n         -&gt; wid2&nbsp;<a href=\"../core/Fetch.html\">@</a> }T</span> <br>\n        <span class=\"tt\">T{ <a href=\"../search/GET-ORDER.html\">GET-ORDER</a> -&gt; get-orderlist&nbsp;wid2&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<a href=\"../core/SWAP.html\">SWAP</a>&nbsp;<a href=\"../core/OnePlus.html\">1+</a> }T</span> <br>\n        <span class=\"tt\">T{ <a href=\"../search/PREVIOUS.html\">PREVIOUS</a>&nbsp;<a href=\"../search/GET-ORDER.html\">GET-ORDER</a> -&gt; get-orderlist }T</span> <br>\n        <span class=\"tt\">T{ <strong>DEFINITIONS</strong>&nbsp;<a href=\"../search/GET-CURRENT.html\">GET-CURRENT</a> -&gt; FORTH-WORDLIST }T</span>\n        </p><p>\n        <a href=\"../core/Colon.html\">:</a> alsowid2 <a href=\"../search/ALSO.html\">ALSO</a> <a href=\"../search/GET-ORDER.html\">GET-ORDER</a> wid2 <a href=\"../core/Fetch.html\">@</a> <a href=\"../core/ROT.html\">ROT</a> <a href=\"../core/DROP.html\">DROP</a> <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../search/SET-ORDER.html\">SET-ORDER</a> <a href=\"../core/Semi.html\">;</a> <br>\n        alsowid2 <br>\n        <a href=\"../core/Colon.html\">:</a> w1 1234 <a href=\"../core/Semi.html\">;</a> <br>\n        <strong>DEFINITIONS</strong>\n        <a href=\"../core/Colon.html\">:</a> w1 -9876 <a href=\"../core/Semi.html\">;</a> <a href=\"../core/IMMEDIATE.html\">IMMEDIATE</a>\n        </p><p>\n        <a href=\"../search/ONLY.html\">ONLY</a> <a href=\"../search/FORTH.html\">FORTH</a> <br>\n        <span class=\"tt\">T{ w1 -&gt; 1234 }T</span> <br>\n        <strong>DEFINITIONS</strong> <br>\n        <span class=\"tt\">T{ w1 -&gt; 1234 }T</span> <br>\n        alsowid2 <br>\n        <span class=\"tt\">T{ w1 -&gt; -9876 }T</span> <br>\n        <strong>DEFINITIONS</strong>\n        <span class=\"tt\">T{ w1 -&gt; -9876 }T</span>\n        </p><p>\n        <a href=\"../search/ONLY.html\">ONLY</a> <a href=\"../search/FORTH.html\">FORTH</a> <strong>DEFINITIONS</strong> <br>\n        <a href=\"../core/Colon.html\">:</a> so5  <a href=\"../core/DUP.html\">DUP</a> <a href=\"../core/IF.html\">IF</a> <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../core/EXECUTE.html\">EXECUTE</a> <a href=\"../core/THEN.html\">THEN</a> <a href=\"../core/Semi.html\">;</a>\n        </p><p>\n        <span class=\"tt\">T{ <a href=\"../core/Sq.html\">S\"</a>&nbsp;w1\"&nbsp;wid1&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<a href=\"../search/SEARCH-WORDLIST.html\">SEARCH-WORDLIST</a>&nbsp;so5 -&gt; -1&nbsp;&nbsp;1234 }T</span> <br>\n        <span class=\"tt\">T{ <a href=\"../core/Sq.html\">S\"</a>&nbsp;w1\"&nbsp;wid2&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<a href=\"../search/SEARCH-WORDLIST.html\">SEARCH-WORDLIST</a>&nbsp;so5 -&gt; &nbsp;1&nbsp;-9876 }T</span>\n        </p><p>\n        <a href=\"../core/Colon.html\">:</a> c\"w1\" <a href=\"../core/Cq.html\">C\"</a> w1\" <a href=\"../core/Semi.html\">;</a> <br>\n        <span class=\"tt\">T{ alsowid2&nbsp;c\"w1\"&nbsp;<a href=\"../search/FIND.html\">FIND</a>&nbsp;so5 -&gt; &nbsp;1&nbsp;-9876 }T</span> <br>\n        <span class=\"tt\">T{ <a href=\"../search/PREVIOUS.html\">PREVIOUS</a>&nbsp;c\"w1\"&nbsp;<a href=\"../search/FIND.html\">FIND</a>&nbsp;so5 -&gt; -1&nbsp;&nbsp;1234 }T</span>\n        \n        \n        </p></div>\n      "
                    }
                }
            },
            "FIND": {
                "id": "search:FIND",
                "number": "16.6.1.1550",
                "name": "FIND",
                "english": " ",
                "list": "SEARCH",
                "basename": "FIND",
                "stackEffect": {
                    "html": {
                        " ": "Extend the semantics of <a href=\"../core/FIND.html\">6.1.1550 FIND</a> to be:\n      ( <em>c-addr</em> -- <em>c-addr 0  |  xt 1  |  xt -1</em> )"
                    },
                    "plain": {
                        " ": "Extend the semantics of <a href=\"../core/FIND.html\">6.1.1550 FIND to be:\n( c-addr -- c-addr 0  |  xt 1  |  xt -1 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n Extend the semantics of <a href=\"../core/FIND.html\">6.1.1550 FIND</a> to be:\n      ( <em>c-addr</em> -- <em>c-addr 0  |  xt 1  |  xt -1</em> )\n      <p>\n      Find the definition named in the counted string at <em>c-addr</em>.\n      If the definition is not found after searching all the word lists\n      in the search order, return <em>c-addr</em> and zero. If\n      the definition is found, return <em>xt</em>. If the definition is\n      immediate, also return one (<em>1</em>); otherwise also return\n      minus-one (<em>-1</em>). For a given string, the values returned\n      by <strong>FIND</strong> while compiling may differ from those returned\n      while not compiling.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:find\">3.4.2 Finding definition names</a></strong>,\n      <a href=\"../core/Tick.html\">6.1.0070 '</a>,\n      <a href=\"../core/FIND.html\">6.1.1550 FIND</a>,\n      <a href=\"../core/POSTPONE.html\">6.1.2033 POSTPONE</a>,\n      <a href=\"../core/BracketTick.html\">6.1.2510 [']</a>.\n      <p>\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n\n      <span class=\"rm\">Assuming <code>#order</code> and <code>context</code> are defined as per <a href=\"../implement.html#imp:search:GET-ORDER\">E.16.6.1.1647 GET-ORDER</a>.</span>\n      <p>\n      </p><div class=\"tabbing\">\n        <a href=\"../core/Colon.html\">:</a> <strong>FIND</strong> <a href=\"../core/p.html\">(</a> c-addr -- c-addr 0 | xt 1 | xt -1 )  <br>\n        &nbsp;&nbsp;&nbsp;0 \t\t\t\t\t\t\t\t\t\t\t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t<a href=\"../core/p.html\">(</a> c-addr 0 ) <br>\n        &nbsp;&nbsp;&nbsp;#order <a href=\"../core/Fetch.html\">@</a> 0 <a href=\"../core/qDO.html\">?DO</a>  <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/OVER.html\">OVER</a> <a href=\"../core/COUNT.html\">COUNT</a>\t\t\t\t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t<a href=\"../core/p.html\">(</a> c-addr 0 c-addr' u ) <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/I.html\">I</a> <a href=\"../core/CELLS.html\">CELLS</a> context <a href=\"../core/Plus.html\">+</a> <a href=\"../core/Fetch.html\">@</a>\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t<a href=\"../core/p.html\">(</a> c-addr 0 c-addr' u wid ) <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../search/SEARCH-WORDLIST.html\">SEARCH-WORDLIST</a>\t\t\t\t\t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t<a href=\"../core/p.html\">(</a> c-addr 0; 0 | w 1 | q -1 ) <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/qDUP.html\">?DUP</a> <a href=\"../core/IF.html\">IF</a>\t\t\t\t\t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t<a href=\"../core/p.html\">(</a> c-addr 0; w 1 | w -1 )  <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t<a href=\"../core/TwoSWAP.html\">2SWAP</a> <a href=\"../core/TwoDROP.html\">2DROP</a> <a href=\"../core/LEAVE.html\">LEAVE</a>\t\t\t&nbsp;&nbsp;\t\t<a href=\"../core/p.html\">(</a> w 1 | w -1 )  <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/THEN.html\">THEN</a>\t\t\t\t\t\t\t\t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t<a href=\"../core/p.html\">(</a> c-addr 0 )  <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/LOOP.html\">LOOP</a>\t\t\t\t\t\t\t\t\t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t<a href=\"../core/p.html\">(</a> c-addr 0 | w 1 | w -1 )  <br>\n        &nbsp;&nbsp;&nbsp;<a href=\"../core/Semi.html\">;</a>\n        <br>\n        \n        </div>\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n      <div class=\"tt\">\n<a href=\"../core/Colon.html\">:</a> c\"dup\" <a href=\"../core/Cq.html\">C\"</a> DUP\" <a href=\"../core/Semi.html\">;</a> <br>\n        <a href=\"../core/Colon.html\">:</a> c\".(\"  <a href=\"../core/Cq.html\">C\"</a> .(\"  <a href=\"../core/Semi.html\">;</a> <br>\n        <a href=\"../core/Colon.html\">:</a> c\"x\"   <a href=\"../core/Cq.html\">C\"</a> unknown word\" <a href=\"../core/Semi.html\">;</a>\n        <p>\n        <span class=\"tt\">T{ c\"dup\"&nbsp;<strong>FIND</strong> -&gt; xt&nbsp;&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;-1 }T</span> <br>\n        <span class=\"tt\">T{ c\".(\"&nbsp;&nbsp;<strong>FIND</strong> -&gt; xti&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;&nbsp;1 }T</span> <br>\n        <span class=\"tt\">T{ c\"x\"&nbsp;&nbsp;&nbsp;<strong>FIND</strong> -&gt; c\"x\"&nbsp;&nbsp;&nbsp;0 }T</span>\n        \n        \n        </p></div>\n      "
                    }
                }
            },
            "FORTH-WORDLIST": {
                "id": "search:FORTH-WORDLIST",
                "number": "16.6.1.1595",
                "name": "FORTH-WORDLIST",
                "english": " ",
                "list": "SEARCH",
                "basename": "FORTH-WORDLIST",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>wid</em> )"
                    },
                    "plain": {
                        " ": "( -- wid )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>wid</em> )\n      <p>\n      Return <em>wid</em>, the identifier of the word list that includes\n      all standard words provided by the implementation. This word list\n      is initially the compilation word list and is part of the initial\n      search order.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      <span class=\"tt\">T{ <strong>FORTH-WORDLIST</strong>&nbsp;wid1&nbsp;<a href=\"../core/Store.html\">!</a> -&gt;  }T</span>\n      \n      \n      "
                    }
                }
            },
            "FORTH": {
                "id": "search:FORTH",
                "number": "16.6.2.1590",
                "name": "FORTH",
                "english": " ",
                "list": "SEARCH EXT",
                "basename": "FORTH",
                "stackEffect": {
                    "html": {
                        " ": "( -- )"
                    },
                    "plain": {
                        " ": "( -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- )\n      <p>\n      Transform the search order consisting of <em>wid<sub>n</sub></em>, ...\n      <em>wid<sub>2</sub></em>, <em>wid<sub>1</sub></em> (where <em>wid<sub>1</sub></em> is searched\n      first) into <em>wid<sub>n</sub></em>, ... <em>wid<sub>2</sub></em>,\n      <em>wid<sub><a href=\"../search/FORTH-WORDLIST.html\">FORTH-WORDLIST</a></sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n\n      <a href=\"../core/Colon.html\">:</a> (wordlist) <a href=\"../core/p.html\">(</a> wid \"&lt;name&gt;\" -- ; ) <br>\n      &nbsp;&nbsp; <a href=\"../core/CREATE.html\">CREATE</a> <a href=\"../core/Comma.html\">,</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/DOES.html\">DOES&gt;</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/Fetch.html\">@</a>  <a href=\"../core/toR.html\">&gt;R</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../search/GET-ORDER.html\">GET-ORDER</a> <a href=\"../core/NIP.html\">NIP</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../search/SET-ORDER.html\">SET-ORDER</a> <br>\n      <a href=\"../core/Semi.html\">;</a>\n      <p>\n      <a href=\"../search/FORTH-WORDLIST.html\">FORTH-WORDLIST</a> (wordlist) <strong>FORTH</strong>\n      \n      \n      </p>"
                    }
                }
            },
            "GET-CURRENT": {
                "id": "search:GET-CURRENT",
                "number": "16.6.1.1643",
                "name": "GET-CURRENT",
                "english": " ",
                "list": "SEARCH",
                "basename": "GET-CURRENT",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>wid</em> )"
                    },
                    "plain": {
                        " ": "( -- wid )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>wid</em> )\n      <p>\n      Return <em>wid</em>, the identifier of the compilation word list.\n      \n      </p>"
                    }
                }
            },
            "GET-ORDER": {
                "id": "search:GET-ORDER",
                "number": "16.6.1.1647",
                "name": "GET-ORDER",
                "english": " ",
                "list": "SEARCH",
                "basename": "GET-ORDER",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>wid<sub>n</sub> ... wid<sub>1</sub> n</em> )"
                    },
                    "plain": {
                        " ": "( -- widn ... wid1 n )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>wid<sub>n</sub> ... wid<sub>1</sub> n</em> )\n      <p>\n      Returns the number of word lists <em>n</em> in the search order\n      and the word list identifiers <em>wid<sub>n</sub></em> ... <em>wid<sub>1</sub></em>\n      identifying these word lists. <em>wid<sub>1</sub></em> identifies the word\n      list that is searched first, and <em>wid<sub>n</sub></em> the word list that\n      is searched last. The search order is unaffected.\n      </p><p>\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n\n      <span class=\"rm\">Here is a very simple search order implementation:</span>\n      <p>\n      <a href=\"../core/VARIABLE.html\">VARIABLE</a> #order\n      </p><p>\n      <a href=\"../core/CREATE.html\">CREATE</a> context    16 <a href=\"../core/p.html\">(</a> wordlists ) <a href=\"../core/CELLS.html\">CELLS</a> <a href=\"../core/ALLOT.html\">ALLOT</a>\n      </p><p>\n      <a href=\"../core/Colon.html\">:</a> <strong>GET-ORDER</strong> <a href=\"../core/p.html\">(</a> -- wid1 ... widn n ) <br>\n      &nbsp;&nbsp; #order <a href=\"../core/Fetch.html\">@</a> 0 <a href=\"../core/qDO.html\">?DO</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; #order <a href=\"../core/Fetch.html\">@</a> <a href=\"../core/I.html\">I</a> <a href=\"../core/Minus.html\">-</a> <a href=\"../core/OneMinus.html\">1-</a> <a href=\"../core/CELLS.html\">CELLS</a> context <a href=\"../core/Plus.html\">+</a> <a href=\"../core/Fetch.html\">@</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/LOOP.html\">LOOP</a> <br>\n      &nbsp;&nbsp; #order <a href=\"../core/Fetch.html\">@</a> <br>\n      <a href=\"../core/Semi.html\">;</a>\n      \n      \n      </p>"
                    }
                }
            },
            "ONLY": {
                "id": "search:ONLY",
                "number": "16.6.2.1965",
                "name": "ONLY",
                "english": " ",
                "list": "SEARCH EXT",
                "basename": "ONLY",
                "stackEffect": {
                    "html": {
                        " ": "( -- )"
                    },
                    "plain": {
                        " ": "( -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- )\n      <p>\n      Set the search order to the implementation-defined minimum search\n      order. The minimum search order shall include the words\n      <a href=\"../search/FORTH-WORDLIST.html\">FORTH-WORDLIST</a> and <a href=\"../search/SET-ORDER.html\">SET-ORDER</a>.\n      </p><p>\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n\n      <a href=\"../core/Colon.html\">:</a> <strong>ONLY</strong> <a href=\"../core/p.html\">(</a> -- ) -1 <a href=\"../search/SET-ORDER.html\">SET-ORDER</a> <a href=\"../core/Semi.html\">;</a>\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n      <div class=\"tt\">\n<span class=\"tt\">T{ <strong>ONLY</strong>&nbsp;<a href=\"../search/FORTH.html\">FORTH</a>&nbsp;<a href=\"../search/GET-ORDER.html\">GET-ORDER</a> -&gt; get-orderlist }T</span>\n        <p>\n        <a href=\"../core/Colon.html\">:</a> so1 <a href=\"../search/SET-ORDER.html\">SET-ORDER</a> ; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">In case it is unavailable in the forth wordlist</span>\n        </p><p>\n        <span class=\"tt\">T{ <strong>ONLY</strong>&nbsp;<a href=\"../search/FORTH-WORDLIST.html\">FORTH-WORDLIST</a>&nbsp;1&nbsp;<a href=\"../search/SET-ORDER.html\">SET-ORDER</a>&nbsp;get-orderlist&nbsp;so1 -&gt;  }T</span> <br>\n        <span class=\"tt\">T{ <a href=\"../search/GET-ORDER.html\">GET-ORDER</a> -&gt; get-orderlist }T</span>\n        \n        \n        </p></div>\n      "
                    }
                }
            },
            "ORDER": {
                "id": "search:ORDER",
                "number": "16.6.2.1985",
                "name": "ORDER",
                "english": " ",
                "list": "SEARCH EXT",
                "basename": "ORDER",
                "stackEffect": {
                    "html": {
                        " ": "( -- )"
                    },
                    "plain": {
                        " ": "( -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- )\n      <p>\n      Display the word lists in the search order in their search order\n      sequence, from first searched to last searched. Also display the\n      word list into which new definitions will be placed. The display\n      format is implementation dependent.\n      </p><p>\n      <strong>ORDER</strong> may be implemented using pictured numeric output\n      words. Consequently, its use may corrupt the transient region\n      identified by <a href=\"../core/num-end.html\">#&gt;</a>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:transient\">3.3.3.6 Other transient regions</a></strong>.\n      <p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n      <div class=\"tt\">\n<a href=\"../core/CR.html\">CR</a> <a href=\"../core/Dotp.html\">.(</a> ONLY FORTH DEFINITIONS search order and compilation list) <a href=\"../core/CR.html\">CR</a> <br>\n        <span class=\"tt\">T{ <a href=\"../search/ONLY.html\">ONLY</a>&nbsp;<a href=\"../search/FORTH.html\">FORTH</a>&nbsp;<a href=\"../search/DEFINITIONS.html\">DEFINITIONS</a>&nbsp;<strong>ORDER</strong> -&gt;  }T</span>\n        <p>\n        <a href=\"../core/CR.html\">CR</a> <a href=\"../core/Dotp.html\">.(</a> Plus another unnamed wordlist at head of search order) <a href=\"../core/CR.html\">CR</a> <br>\n        <span class=\"tt\">T{ alsowid2&nbsp;<a href=\"../search/DEFINITIONS.html\">DEFINITIONS</a>&nbsp;<strong>ORDER</strong> -&gt;  }T</span>\n        \n        \n        </p></div>\n      "
                    }
                }
            },
            "PREVIOUS": {
                "id": "search:PREVIOUS",
                "number": "16.6.2.2037",
                "name": "PREVIOUS",
                "english": " ",
                "list": "SEARCH EXT",
                "basename": "PREVIOUS",
                "stackEffect": {
                    "html": {
                        " ": "( -- )"
                    },
                    "plain": {
                        " ": "( -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- )\n      <p>\n      Transform the search order consisting of <em>wid<sub>n</sub></em>, ...\n      <em>wid<sub>2</sub></em>, <em>wid<sub>1</sub></em> (where <em>wid<sub>1</sub></em> is searched\n      first) into <em>wid<sub>n</sub></em>, ... <em>wid<sub>2</sub></em>. An ambiguous\n      condition exists if the search order was empty before\n      <strong>PREVIOUS</strong> was executed.\n      </p><p>\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n\n      <a href=\"../core/Colon.html\">:</a> <strong>PREVIOUS</strong> <a href=\"../core/p.html\">(</a> -- )\n      <a href=\"../search/GET-ORDER.html\">GET-ORDER</a> <a href=\"../core/NIP.html\">NIP</a> <a href=\"../core/OneMinus.html\">1-</a> <a href=\"../search/SET-ORDER.html\">SET-ORDER</a>\n      <a href=\"../core/Semi.html\">;</a>\n      \n      \n      "
                    }
                }
            },
            "SEARCH-WORDLIST": {
                "id": "search:SEARCH-WORDLIST",
                "number": "16.6.1.2192",
                "name": "SEARCH-WORDLIST",
                "english": " ",
                "list": "SEARCH",
                "basename": "SEARCH-WORDLIST",
                "stackEffect": {
                    "html": {
                        " ": "( <em>c-addr u wid</em> -- <em>0  |  xt 1  |  xt -1</em> )"
                    },
                    "plain": {
                        " ": "( c-addr u wid -- 0  |  xt 1  |  xt -1 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>c-addr u wid</em> -- <em>0  |  xt 1  |  xt -1</em> )\n      <p>\n      Find the definition identified by the string <em>c-addr u</em> in\n      the word list identified by <em>wid</em>. If the definition is not\n      found, return zero. If the definition is found, return its\n      execution token <em>xt</em> and one (<em>1</em>) if the definition is\n      immediate, minus-one (<em>-1</em>) otherwise.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../rationale.html#rat:search:SEARCH-WORDLIST\">A.16.6.1.2192 SEARCH-WORDLIST</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.16.6.1.219  SEARCH-WORDLIST -->\n      When <strong>SEARCH-WORDLIST</strong> fails to find the word, it does\n      not return the string, unlike <a href=\"../search/FIND.html\">FIND</a>. This is in\n      accordance with the general principle that Forth words consume\n      their arguments.\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n      <div class=\"tt\">\n<a href=\"../search/ONLY.html\">ONLY</a> <a href=\"../search/FORTH.html\">FORTH</a> <a href=\"../search/DEFINITIONS.html\">DEFINITIONS</a> <br>\n        <a href=\"../core/VARIABLE.html\">VARIABLE</a> xt  <a href=\"../core/Tick.html\">'</a> <a href=\"../core/DUP.html\">DUP</a> xt  <a href=\"../core/Store.html\">!</a> <br>\n        <a href=\"../core/VARIABLE.html\">VARIABLE</a> xti <a href=\"../core/Tick.html\">'</a> <a href=\"../core/Dotp.html\">.(</a>  xti <a href=\"../core/Store.html\">!</a> <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Immediate word</span>\n        <p>\n        <span class=\"tt\">T{ <a href=\"../core/Sq.html\">S\"</a>&nbsp;DUP\"&nbsp;wid1&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<strong>SEARCH-WORDLIST</strong> -&gt; xt&nbsp;&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;-1 }T</span> <br>\n        <span class=\"tt\">T{ <a href=\"../core/Sq.html\">S\"</a>&nbsp;.(\"&nbsp;&nbsp;wid1&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<strong>SEARCH-WORDLIST</strong> -&gt; xti&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;&nbsp;1 }T</span> <br>\n        <span class=\"tt\">T{ <a href=\"../core/Sq.html\">S\"</a>&nbsp;DUP\"&nbsp;wid2&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<strong>SEARCH-WORDLIST</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0 }T</span>\n        \n        \n        </p></div>\n      "
                    }
                }
            },
            "SET-CURRENT": {
                "id": "search:SET-CURRENT",
                "number": "16.6.1.2195",
                "name": "SET-CURRENT",
                "english": " ",
                "list": "SEARCH",
                "basename": "SET-CURRENT",
                "stackEffect": {
                    "html": {
                        " ": "( <em>wid</em> -- )"
                    },
                    "plain": {
                        " ": "( wid -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>wid</em> -- )\n      <p>\n      Set the compilation word list to the word list identified by\n      <em>wid</em>.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      <span class=\"tt\">T{ <a href=\"../search/GET-CURRENT.html\">GET-CURRENT</a> -&gt; wid1&nbsp;<a href=\"../core/Fetch.html\">@</a> }T</span>\n      <p>\n      <span class=\"tt\">T{ <a href=\"../search/WORDLIST.html\">WORDLIST</a>&nbsp;wid2&nbsp;<a href=\"../core/Store.html\">!</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ wid2&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<strong>SET-CURRENT</strong> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ <a href=\"../search/GET-CURRENT.html\">GET-CURRENT</a> -&gt; wid2&nbsp;<a href=\"../core/Fetch.html\">@</a> }T</span>\n      </p><p>\n      <span class=\"tt\">T{ wid1&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;<strong>SET-CURRENT</strong> -&gt;  }T</span>\n      \n      \n      </p>"
                    }
                }
            },
            "SET-ORDER": {
                "id": "search:SET-ORDER",
                "number": "16.6.1.2197",
                "name": "SET-ORDER",
                "english": " ",
                "list": "SEARCH",
                "basename": "SET-ORDER",
                "stackEffect": {
                    "html": {
                        " ": "( <em>wid<sub>n</sub> ... wid<sub>1</sub> n</em> -- )"
                    },
                    "plain": {
                        " ": "( widn ... wid1 n -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>wid<sub>n</sub> ... wid<sub>1</sub> n</em> -- )\n      <p>\n      Set the search order to the word lists identified by\n      <em>wid<sub>n</sub></em> ... <em>wid<sub>1</sub></em>. Subsequently, word list\n      <em>wid<sub>1</sub></em> will be searched first, and word list <em>wid<sub>n</sub></em>\n      searched last. If <em>n</em> is zero, empty the search order. If\n      <em>n</em> is minus one, set the search order to the\n      implementation-defined minimum search order. The minimum search\n      order shall include the words <a href=\"../search/FORTH-WORDLIST.html\">FORTH-WORDLIST</a> and\n      <strong>SET-ORDER</strong>. A system shall allow <em>n</em> to be at least\n      eight.\n      </p><p>\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n\n      <span class=\"rm\">This is the complement of <a href=\"../implement.html#imp:search:GET-ORDER\">E.16.6.1.1647 GET-ORDER</a>.</span>\n      <p>\n      <a href=\"../core/Colon.html\">:</a> <strong>SET-ORDER</strong> <a href=\"../core/p.html\">(</a> wid1 ... widn n -0 ) <br>\n      &nbsp;&nbsp; <a href=\"../core/DUP.html\">DUP</a> -1 <a href=\"../core/Equal.html\">=</a> <a href=\"../core/IF.html\">IF</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/DROP.html\">DROP</a> &lt;<em><span class=\"rm\">push system default word lists and n</span></em>&gt; <br>\n      &nbsp;&nbsp; <a href=\"../core/THEN.html\">THEN</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/DUP.html\">DUP</a> #order <a href=\"../core/Store.html\">!</a> <br>\n      &nbsp;&nbsp; 0 <a href=\"../core/qDO.html\">?DO</a>   <a href=\"../core/I.html\">I</a> <a href=\"../core/CELLS.html\">CELLS</a> context <a href=\"../core/Plus.html\">+</a> <a href=\"../core/Store.html\">!</a>   <a href=\"../core/LOOP.html\">LOOP</a> <br>\n      <a href=\"../core/Semi.html\">;</a>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n      <div class=\"tt\">\n<span class=\"tt\">T{ <a href=\"../search/GET-ORDER.html\">GET-ORDER</a>&nbsp;<a href=\"../core/OVER.html\">OVER</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -&gt; <a href=\"../search/GET-ORDER.html\">GET-ORDER</a>&nbsp;wid1&nbsp;<a href=\"../core/Fetch.html\">@</a> }T</span> <br>\n        <span class=\"tt\">T{ <a href=\"../search/GET-ORDER.html\">GET-ORDER</a>&nbsp;<strong>SET-ORDER</strong> -&gt;  }T</span> <br>\n        <span class=\"tt\">T{ <a href=\"../search/GET-ORDER.html\">GET-ORDER</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -&gt; get-orderlist }T</span> <!-- \\tab \\word{bs} \\textdf{Check nothing changed} \\\\ -->\n        <span class=\"tt\">T{ get-orderlist&nbsp;<a href=\"../core/DROP.html\">DROP</a>&nbsp;get-orderList&nbsp;<a href=\"../core/TwoTimes.html\">2*</a>&nbsp;<strong>SET-ORDER</strong> -&gt;  }T</span> <br>\n        <span class=\"tt\">T{ <a href=\"../search/GET-ORDER.html\">GET-ORDER</a> -&gt; get-orderlist&nbsp;<a href=\"../core/DROP.html\">DROP</a>&nbsp;get-orderList&nbsp;<a href=\"../core/TwoTimes.html\">2*</a> }T</span> <br>\n        <span class=\"tt\">T{ get-orderlist&nbsp;<strong>SET-ORDER</strong>&nbsp;<a href=\"../search/GET-ORDER.html\">GET-ORDER</a> -&gt; get-orderlist }T</span>\n        <p>\n        <a href=\"../core/Colon.html\">:</a> so2a <a href=\"../search/GET-ORDER.html\">GET-ORDER</a> get-orderlist <strong>SET-ORDER</strong> <a href=\"../core/Semi.html\">;</a> <br>\n        <a href=\"../core/Colon.html\">:</a> so2 0 <strong>SET-ORDER</strong> so2a <a href=\"../core/Semi.html\">;</a>\n        </p><p>\n        <span class=\"tt\">T{ so2 -&gt; 0 }T</span>\t&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">0 SET-ORDER leaves an empty search order</span>\n        </p><p>\n        <a href=\"../core/Colon.html\">:</a> so3 -1 <strong>SET-ORDER</strong> so2a <a href=\"../core/Semi.html\">;</a> <br>\n        <a href=\"../core/Colon.html\">:</a> so4 <a href=\"../search/ONLY.html\">ONLY</a> so2a <a href=\"../core/Semi.html\">;</a>\n        </p><p>\n        <span class=\"tt\">T{ so3 -&gt; so4 }T</span>\t&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">-1 SET-ORDER is the same as ONLY</span>\n        \n        \n        </p></div>\n      "
                    }
                }
            },
            "WORDLIST": {
                "id": "search:WORDLIST",
                "number": "16.6.1.2460",
                "name": "WORDLIST",
                "english": " ",
                "list": "SEARCH",
                "basename": "WORDLIST",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>wid</em> )"
                    },
                    "plain": {
                        " ": "( -- wid )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>wid</em> )\n      <p>\n      Create a new empty word list, returning its word list identifier\n      <em>wid</em>. The new word list may be returned from a pool of\n      preallocated word lists or may be dynamically allocated in data\n      space. A system shall allow the creation of at least 8 new word\n      lists in addition to any provided as part of the system.\n      \n      </p>"
                    }
                }
            }
        }
    },
    "selected": {
        "name": "selected",
        "words": {
            "PARSE": {
                "id": "core:PARSE",
                "number": "6.2.2008",
                "name": "PARSE",
                "english": " ",
                "list": "CORE EXT",
                "basename": "PARSE",
                "stackEffect": {
                    "html": {
                        " ": "( <em>char \"ccc&lt;char&gt;\"</em> -- <em>c-addr u</em> )"
                    },
                    "plain": {
                        " ": "( char \"ccc<char>\" -- c-addr u )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>char \"ccc&lt;char&gt;\"</em> -- <em>c-addr u</em> )\n      <p>\n      Parse <em>ccc</em> delimited by the delimiter <em>char</em>.\n      </p><p>\n      <em>c-addr</em> is the address (within the input buffer) and\n      <em>u</em> is the length of the parsed string. If the parse area\n      was empty, the resulting string has a zero length.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:parsing\">3.4.1 Parsing</a></strong>,\n      <a href=\"../rationale.html#rat:core:PARSE\">A.6.2.2008 PARSE</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.2.2008 PARSE -->\n      Typical use: <em>char</em> <strong>PARSE</strong> <em>ccc</em>&lt;<em>char</em>&gt;\n      <p>\n      The traditional Forth word for parsing is <a href=\"../core/WORD.html\">WORD</a>.\n      <strong>PARSE</strong> solves the following problems with <a href=\"../core/WORD.html\">WORD</a>:\n      </p><p>\n      </p><ol style=\"list-style-type: decimal\">\n      <li> <a href=\"../core/WORD.html\">WORD</a> always skips leading delimiters. This\n      behavior is appropriate for use by the text interpreter,\n      which looks for sequences of non-blank characters, but is\n      inappropriate for use by words like <a href=\"../core/p.html\">(</a> , <a href=\"../core/Dotp.html\">.(</a>,\n      and <a href=\"../core/Dotq.html\">.\"</a>. Consider the following (flawed) definition\n      of <a href=\"../core/Dotp.html\">.(</a>:\n      <p>\n      &nbsp;&nbsp; <a href=\"../core/Colon.html\">:</a> <a href=\"../core/Dotp.html\">.(</a>  \n      <a href=\"../core/BracketCHAR.html\">[CHAR]</a> <code>)</code>  \n      <a href=\"../core/WORD.html\">WORD</a> <a href=\"../core/COUNT.html\">COUNT</a> <a href=\"../core/TYPE.html\">TYPE</a>\n      <a href=\"../core/Semi.html\">;</a>   <a href=\"../core/IMMEDIATE.html\">IMMEDIATE</a>\n      </p><p>\n      This works fine when used in a line like:\n      </p><p>\n      &nbsp;&nbsp; <a href=\"../core/Dotp.html\">.(</a> <code>HELLO)</code> &nbsp;&nbsp; <code>5</code> <a href=\"../core/d.html\">.</a>\n      </p><p>\n      but consider what happens if the user enters an empty\n      string:\n      </p><p>\n      &nbsp;&nbsp; <a href=\"../core/Dotp.html\">.(</a> <code>)</code> &nbsp;&nbsp; <code>5</code> <a href=\"../core/d.html\">.</a>\n      </p><p>\n      The definition of <a href=\"../core/Dotp.html\">.(</a> shown above would treat the\n      <code>)</code> as a leading delimiter, skip it, and continue\n      consuming characters until it located another <code>)</code>\n      that followed a non-<code>)</code> character, or until the\n      parse area was empty. In the example shown, the\n      <code>5</code> <a href=\"../core/d.html\">.</a>\n      would be treated as part of the string to be printed.\n      </p><p>\n      With <strong>PARSE</strong>, we could write a correct definition of\n      <a href=\"../core/Dotp.html\">.(</a>:\n      </p><p>\n      &nbsp;&nbsp; <a href=\"../core/Colon.html\">:</a> <a href=\"../core/Dotp.html\">.(</a>  \n      <a href=\"../core/BracketCHAR.html\">[CHAR]</a> <code>)</code>  \n      <strong>PARSE</strong> <a href=\"../core/TYPE.html\">TYPE</a>\n      <a href=\"../core/Semi.html\">;</a>   <a href=\"../core/IMMEDIATE.html\">IMMEDIATE</a>\n      </p><p>\n      This definition avoids the \"empty string\" anomaly.\n      </p><p>\n      </p></li>\n      <li> <a href=\"../core/WORD.html\">WORD</a> returns its result as a counted string.\n      This has four bad effects:\n      <p>\n      </p><ol style=\"list-style-type: lower-alpha\">\n      <li> The characters accepted by <a href=\"../core/WORD.html\">WORD</a> must be\n      copied from the input buffer into a transient buffer,\n      in order to make room for the count character that\n      must be at the beginning of the counted string. The\n      copy step is inefficient, compared to <strong>PARSE</strong>,\n      which leaves the string in the input buffer and doesn't\n      need to copy it anywhere.\n      <p>\n      </p></li>\n      <li> <a href=\"../core/WORD.html\">WORD</a> must be careful not to store too many\n      characters into the transient buffer, thus overwriting\n      something beyond the end of the buffer. This adds to\n      the overhead of the copy step. (<a href=\"../core/WORD.html\">WORD</a> may have\n      to scan a lot of characters before finding the trailing\n      delimiter.)\n      <p>\n      </p></li>\n      <li> The count character limits the length of the string\n      returned by <a href=\"../core/WORD.html\">WORD</a> to 255 characters (longer\n      strings can easily be stored in blocks!). This\n      limitation does not exist for <strong>PARSE</strong>.\n      <p>\n      </p></li>\n      <li> The transient buffer is typically overwritten by the\n      next use of <a href=\"../core/WORD.html\">WORD</a>.\n      </li>\n</ol>\n      <p>\n      The need for <a href=\"../core/WORD.html\">WORD</a> has largely been eliminated by\n      <strong>PARSE</strong> and <a href=\"../core/PARSE-NAME.html\">PARSE-NAME</a>. <a href=\"../core/WORD.html\">WORD</a> is\n      retained for backward compatibility.\n      </p></li>\n</ol>\n      \n      \n      "
                    }
                }
            },
            "Plus": {
                "id": "core:+",
                "number": "6.1.0120",
                "name": "+",
                "english": "plus",
                "list": "CORE",
                "basename": "Plus",
                "stackEffect": {
                    "html": {
                        " ": "( <em>n<sub>1</sub> | u<sub>1</sub> n<sub>2</sub> | u<sub>2</sub></em> -- <em>n<sub>3</sub> | u<sub>3</sub></em> )"
                    },
                    "plain": {
                        " ": "( n1 | u1 n2 | u2 -- n3 | u3 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>n<sub>1</sub> | u<sub>1</sub> n<sub>2</sub> | u<sub>2</sub></em> -- <em>n<sub>3</sub> | u<sub>3</sub></em> )\n      <p>\n      Add <em>n<sub>2</sub> | u<sub>2</sub></em> to <em>n<sub>1</sub> | u<sub>1</sub></em>, giving the sum\n      <em>n<sub>3</sub> | u<sub>3</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:aaddr\">3.3.3.1 Address alignment</a></strong>.\n      <p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n <!-- T.6.1.0120 + -->\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;5&nbsp;<strong>+</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;0&nbsp;<strong>+</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;-5&nbsp;<strong>+</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-5 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-5&nbsp;&nbsp;0&nbsp;<strong>+</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-5 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;2&nbsp;<strong>+</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;-2&nbsp;<strong>+</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;&nbsp;2&nbsp;<strong>+</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;-2&nbsp;<strong>+</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-3 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;&nbsp;1&nbsp;<strong>+</strong> -&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0 }T</span> <br>\n      <span class=\"tt\">T{ MID-UINT&nbsp;&nbsp;1&nbsp;<strong>+</strong> -&gt; MID-UINT+1 }T</span>\n      \n      \n      "
                    }
                }
            },
            "bs": {
                "id": "core:bs",
                "number": "6.2.2535",
                "name": "\\",
                "english": "backslash",
                "list": "CORE EXT",
                "basename": "bs",
                "stackEffect": {
                    "html": {
                        "Execution:": "( <em>\"ccc&lt;eol&gt;\"</em> -- )"
                    },
                    "plain": {
                        "Execution:": "( \"ccc<eol>\" -- )"
                    }
                },
                "sections": {
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      Perform the execution semantics given below.\n      <p>\n        \n      </p>"
                    },
                    "Execution:": {
                        "name": "Execution:",
                        "html": "\n\n\n      ( <em>\"ccc&lt;eol&gt;\"</em> -- )\n      <p>\n      Parse and discard the remainder of the parse area.\n      <strong>\\</strong> is an immediate word.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../block/bs.html\">7.6.2.2535 \\</a>,\n      <a href=\"../rationale.html#rat:core:bs\">A.6.2.2535 \\</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.6.2.2535 \\ -->\n      Typical use:\n            <div class=\"quote\">\n        <div class=\"tt\">\n5 <a href=\"../core/CONSTANT.html\">CONSTANT</a> THAT\n            <strong>\\</strong>   <span class=\"rm\">This is a comment about THAT</span>\n          \n          </div>\n        </div>\n      \n      \n      "
                    }
                }
            }
        }
    },
    "string": {
        "name": "string",
        "words": {
            "BLANK": {
                "id": "string:BLANK",
                "number": "17.6.1.0780",
                "name": "BLANK",
                "english": " ",
                "list": "STRING",
                "basename": "BLANK",
                "stackEffect": {
                    "html": {
                        " ": "( <em>c-addr u</em> -- )"
                    },
                    "plain": {
                        " ": "( c-addr u -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>c-addr u</em> -- )\n      <p>\n      If <em>u</em> is greater than zero, store the character value for\n      space in <em>u</em> consecutive character positions beginning at\n      <em>c-addr</em>.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n       <div class=\"tt\">\n<a href=\"../core/Colon.html\">:</a> s13 <a href=\"../core/Sq.html\">S\"</a> aaaaa      a\" <a href=\"../core/Semi.html\">;</a>\t\t\t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Six spaces</span>\n        <p>\n        <span class=\"tt\">T{ <a href=\"../core/PAD.html\">PAD</a>&nbsp;25&nbsp;<a href=\"../core/CHAR.html\">CHAR</a>&nbsp;a&nbsp;<a href=\"../core/FILL.html\">FILL</a> -&gt;  }T</span>\t\t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Fill PAD with 25 'a's</span> <br>\n        <span class=\"tt\">T{ <a href=\"../core/PAD.html\">PAD</a>&nbsp;5&nbsp;<a href=\"../core/CHARS.html\">CHARS</a>&nbsp;<a href=\"../core/Plus.html\">+</a>&nbsp;6&nbsp;<strong>BLANK</strong> -&gt;  }T</span>\t&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Put 6 spaced from character 5</span> <br>\n        <span class=\"tt\">T{ <a href=\"../core/PAD.html\">PAD</a>&nbsp;12&nbsp;s13&nbsp;<a href=\"../string/COMPARE.html\">COMPARE</a> -&gt; 0 }T</span>\t\t\t\t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">PAD Should now be same as s13</span>\n        \n        \n        </p></div>\n      "
                    }
                }
            },
            "CMOVE": {
                "id": "string:CMOVE",
                "number": "17.6.1.0910",
                "name": "CMOVE",
                "english": "c-move",
                "list": "STRING",
                "basename": "CMOVE",
                "stackEffect": {
                    "html": {
                        " ": "( <em>c-addr<sub>1</sub> c-addr<sub>2</sub> u</em> -- )"
                    },
                    "plain": {
                        " ": "( c-addr1 c-addr2 u -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>c-addr<sub>1</sub> c-addr<sub>2</sub> u</em> -- )\n      <p>\n      If <em>u</em> is greater than zero, copy <em>u</em> consecutive\n      characters from the data space starting at <em>c-addr<sub>1</sub></em> to\n      that starting at <em>c-addr<sub>2</sub></em>, proceeding character-by-character\n      from lower addresses to higher addresses.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../string/CMOVEtop.html\">17.6.1.0920 CMOVE&gt;</a>, <a href=\"../rationale.html#rat:string:CMOVE\">A.17.6.1.0910 CMOVE</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.17.6.1.0910 CMOVE -->\n      If <em>c-addr<sub>2</sub></em> lies within the source region (i.e., when\n      <em>c-addr<sub>2</sub></em> is not less than <em>c-addr<sub>1</sub></em> and\n      <em>c-addr<sub>2</sub></em> is less than the quantity <em>c-addr<sub>1</sub> u</em>\n      <a href=\"../core/CHARS.html\">CHARS</a> <a href=\"../core/Plus.html\">+</a>), memory propagation occurs.\n      <p>\n      Assume a character string at address\n      100: \"ABCD\". Then after\n      </p><p>\n            </p><div class=\"quote\">\n        <div class=\"tt\">\n100 <a href=\"../core/DUP.html\">DUP</a>   <a href=\"../core/CHARPlus.html\">CHAR+</a>   3 <strong>CMOVE</strong>\n          \n          </div>\n        </div>\n      <p>\n      the string at address 100 is \"AAAA\".\n      </p><p>\n      See <a href=\"../rationale.html#rat:core:MOVE\">A.6.1.1900 MOVE</a>.\n      \n      \n      </p>"
                    }
                }
            },
            "CMOVEtop": {
                "id": "string:CMOVEtop",
                "number": "17.6.1.0920",
                "name": "CMOVE>",
                "english": "c-move-up",
                "list": "STRING",
                "basename": "CMOVEtop",
                "stackEffect": {
                    "html": {
                        " ": "( <em>c-addr<sub>1</sub> c-addr<sub>2</sub> u</em> -- )"
                    },
                    "plain": {
                        " ": "( c-addr1 c-addr2 u -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>c-addr<sub>1</sub> c-addr<sub>2</sub> u</em> -- )\n      <p>\n      If <em>u</em> is greater than zero, copy <em>u</em> consecutive\n      characters from the data space starting at <em>c-addr<sub>1</sub></em> to\n      that starting at <em>c-addr<sub>2</sub></em>, proceeding character-by-character\n      from higher addresses to lower addresses.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../string/CMOVE.html\">17.6.1.0910 CMOVE</a>, <a href=\"../rationale.html#rat:string:CMOVEtop\">A.17.6.1.0920 CMOVE&gt;</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.17.6.1.0920 CMOVE> -->\n      If <em>c-addr<sub>1</sub></em> lies within the destination region (i.e.,\n      when <em>c-addr<sub>1</sub></em> is greater than or equal to\n      <em>c-addr<sub>2</sub></em> and <em>c-addr<sub>2</sub></em> is less than the\n      quantity <em>c-addr<sub>1</sub> u</em> <a href=\"../core/CHARS.html\">CHARS</a>\n      <a href=\"../core/Plus.html\">+</a>), memory propagation\toccurs.\n      <p>\n      Assume a character string at address\n      100: \"ABCD\". Then after\n      </p><p>\n            </p><div class=\"quote\">\n        <div class=\"tt\">\n100 <a href=\"../core/DUP.html\">DUP</a> <a href=\"../core/CHARPlus.html\">CHAR+</a> <a href=\"../core/SWAP.html\">SWAP</a>\n          3 <strong>CMOVE&gt;</strong>\n          \n          </div>\n        </div>\n      <p>\n      the string at address 100 is \"DDDD\".\n      </p><p>\n      See <a href=\"../rationale.html#rat:core:MOVE\">A.6.1.1900 MOVE</a>.\n      \n      \n      </p>"
                    }
                }
            },
            "COMPARE": {
                "id": "string:COMPARE",
                "number": "17.6.1.0935",
                "name": "COMPARE",
                "english": " ",
                "list": "STRING",
                "basename": "COMPARE",
                "stackEffect": {
                    "html": {
                        " ": "( <em>c-addr<sub>1</sub> u<sub>1</sub> c-addr<sub>2</sub> u<sub>2</sub></em> -- <em>n</em> )"
                    },
                    "plain": {
                        " ": "( c-addr1 u1 c-addr2 u2 -- n )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>c-addr<sub>1</sub> u<sub>1</sub> c-addr<sub>2</sub> u<sub>2</sub></em> -- <em>n</em> )\n      <p>\n      Compare the string specified by <em>c-addr<sub>1</sub> u<sub>1</sub></em> to the\n      string specified by <em>c-addr<sub>2</sub> u<sub>2</sub></em>. The strings are\n      compared, beginning at the given addresses, character by\n      character, up to the length of the shorter string or until a\n      difference is found. If the two strings are identical, <em>n</em>\n      is zero. If the two strings are identical up to the length of\n      the shorter string, <em>n</em> is minus-one (-1) if <em>u<sub>1</sub></em>\n      is less than <em>u<sub>2</sub></em> and one (1) otherwise. If the two\n      strings are not identical up to the length of the shorter string,\n      <em>n</em> is minus-one (-1) if the first non-matching character\n      in the string specified by <em>c-addr<sub>1</sub> u<sub>1</sub></em> has a lesser\n      numeric value than the corresponding character in the string\n      specified by <em>c-addr<sub>2</sub> u<sub>2</sub></em> and one (1) otherwise.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n      <div class=\"tt\">\n<span class=\"tt\">T{ s1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s1&nbsp;<strong>COMPARE</strong> -&gt; &nbsp;0&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ s1&nbsp;&nbsp;PAD&nbsp;SWAP&nbsp;<a href=\"../string/CMOVE.html\">CMOVE</a>&nbsp;&nbsp; -&gt; &nbsp;&nbsp;&nbsp; }T</span> &nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Copy s1 to PAD</span> <br>\n        <span class=\"tt\">T{ s1&nbsp;&nbsp;PAD&nbsp;OVER&nbsp;<strong>COMPARE</strong> -&gt; &nbsp;0&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ s1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PAD&nbsp;6&nbsp;<strong>COMPARE</strong> -&gt; &nbsp;1&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ PAD&nbsp;10&nbsp;&nbsp;&nbsp;&nbsp;s1&nbsp;<strong>COMPARE</strong> -&gt; -1&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ s1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PAD&nbsp;0&nbsp;<strong>COMPARE</strong> -&gt; &nbsp;1&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ PAD&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;s1&nbsp;<strong>COMPARE</strong> -&gt; -1&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ s1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s6&nbsp;<strong>COMPARE</strong> -&gt; &nbsp;1&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ s6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s1&nbsp;<strong>COMPARE</strong> -&gt; -1&nbsp; }T</span>\n        <p>\n        <a href=\"../core/Colon.html\">:</a> \"abdde\"  <a href=\"../core/Sq.html\">S\"</a> abdde\"  <a href=\"../core/Semi.html\">;</a> <br>\n        <a href=\"../core/Colon.html\">:</a> \"abbde\"  <a href=\"../core/Sq.html\">S\"</a> abbde\"  <a href=\"../core/Semi.html\">;</a> <br>\n        <a href=\"../core/Colon.html\">:</a> \"abcdf\"  <a href=\"../core/Sq.html\">S\"</a> abcdf\"  <a href=\"../core/Semi.html\">;</a> <br>\n        <a href=\"../core/Colon.html\">:</a> \"abcdee\" <a href=\"../core/Sq.html\">S\"</a> abcdee\" <a href=\"../core/Semi.html\">;</a>\n        </p><p>\n        <span class=\"tt\">T{ s1&nbsp;\"abdde\"&nbsp;&nbsp;<strong>COMPARE</strong> -&gt; -1 }T</span> <br>\n        <span class=\"tt\">T{ s1&nbsp;\"abbde\"&nbsp;&nbsp;<strong>COMPARE</strong> -&gt; &nbsp;1 }T</span> <br>\n        <span class=\"tt\">T{ s1&nbsp;\"abcdf\"&nbsp;&nbsp;<strong>COMPARE</strong> -&gt; -1 }T</span> <br>\n        <span class=\"tt\">T{ s1&nbsp;\"abcdee\"&nbsp;<strong>COMPARE</strong> -&gt; &nbsp;1 }T</span>\n        </p><p>\n        <a href=\"../core/Colon.html\">:</a> s11 <a href=\"../core/Sq.html\">S\"</a> 0abc\" <a href=\"../core/Semi.html\">;</a> <br>\n        <a href=\"../core/Colon.html\">:</a> s12 <a href=\"../core/Sq.html\">S\"</a> 0aBc\" <a href=\"../core/Semi.html\">;</a>\n        </p><p>\n        <span class=\"tt\">T{ s11&nbsp;s12&nbsp;<strong>COMPARE</strong> -&gt; &nbsp;1 }T</span> <br>\n        <span class=\"tt\">T{ s12&nbsp;s11&nbsp;<strong>COMPARE</strong> -&gt; -1 }T</span>\n        \n        \n        </p></div>\n      "
                    }
                }
            },
            "DivSTRING": {
                "id": "string:/STRING",
                "number": "17.6.1.0245",
                "name": "/STRING",
                "english": "slash-string",
                "list": "STRING",
                "basename": "DivSTRING",
                "stackEffect": {
                    "html": {
                        " ": "( <em>c-addr<sub>1</sub> u<sub>1</sub> n</em> -- <em>c-addr<sub>2</sub> u<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( c-addr1 u1 n -- c-addr2 u2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>c-addr<sub>1</sub> u<sub>1</sub> n</em> -- <em>c-addr<sub>2</sub> u<sub>2</sub></em> )\n      <p>\n      Adjust the character string at <em>c-addr<sub>1</sub></em> by <em>n</em>\n      characters. The resulting character string, specified by\n      <em>c-addr<sub>2</sub> u<sub>2</sub></em>, begins at <em>c-addr<sub>1</sub></em> plus <em>n</em>\n      characters and is <em>u<sub>1</sub></em> minus <em>n</em> characters long.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../rationale.html#rat:string:/STRING\">A.17.6.1.0245 /STRING</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.17.6.1.0245 /STRING -->\n      <strong>/STRING</strong> is used to remove or add characters relative\n      to the current position in the character string. Positive values\n      of <em>n</em> will exclude characters from the string while\n      negative values of <em>n</em> will include characters to the\n      left of the string.\n      <p>\n      <a href=\"../core/Sq.html\">S\"</a> ABC\" 2 <strong>/STRING</strong> <a href=\"../core/TwoDUP.html\">2DUP</a> <a href=\"../core/TYPE.html\">TYPE</a> <a href=\"../core/bs.html\">\\</a> outputs \"C\" <br>\n      -1 <strong>/STRING</strong> <a href=\"../core/TYPE.html\">TYPE</a> <a href=\"../core/bs.html\">\\</a> outputs \"BC\"\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      <span class=\"tt\">T{ s1&nbsp;&nbsp;5&nbsp;<strong>/STRING</strong> -&gt; s1&nbsp;<a href=\"../core/SWAP.html\">SWAP</a>&nbsp;5&nbsp;<a href=\"../core/Plus.html\">+</a>&nbsp;<a href=\"../core/SWAP.html\">SWAP</a>&nbsp;5&nbsp;<a href=\"../core/Minus.html\">-</a> }T</span> <br>\n      <span class=\"tt\">T{ s1&nbsp;10&nbsp;<strong>/STRING</strong>&nbsp;-4&nbsp;<strong>/STRING</strong> -&gt; s1&nbsp;6&nbsp;<strong>/STRING</strong> }T</span> <br>\n      <span class=\"tt\">T{ s1&nbsp;&nbsp;0&nbsp;<strong>/STRING</strong> -&gt; s1 }T</span>\n      \n      \n      "
                    }
                }
            },
            "MinusTRAILING": {
                "id": "string:-TRAILING",
                "number": "17.6.1.0170",
                "name": "-TRAILING",
                "english": "dash-trailing",
                "list": "STRING",
                "basename": "MinusTRAILING",
                "stackEffect": {
                    "html": {
                        " ": "( <em>c-addr u<sub>1</sub></em> -- <em>c-addr u<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( c-addr u1 -- c-addr u2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>c-addr u<sub>1</sub></em> -- <em>c-addr u<sub>2</sub></em> )\n      <p>\n      If <em>u<sub>1</sub></em> is greater than zero, <em>u<sub>2</sub></em> is equal to\n      <em>u<sub>1</sub></em> less the number of spaces at the end of the\n      character string specified by <em>c-addr u<sub>1</sub></em>. If <em>u<sub>1</sub></em>\n      is zero or the entire string consists of spaces, <em>u<sub>2</sub></em> is\n      zero.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;&nbsp;s8&nbsp;<a href=\"../core/Sq.html\">S\"</a>&nbsp;abc&nbsp;&nbsp;\"&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;&nbsp;s9&nbsp;<a href=\"../core/Sq.html\">S\"</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;s10&nbsp;<a href=\"../core/Sq.html\">S\"</a>&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;\"&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span>\n      <p>\n      <span class=\"tt\">T{ &nbsp;s1&nbsp;<strong>-TRAILING</strong> -&gt; s1 }T</span>\t\t&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> \"<code>abcdefghijklmnopqrstuvwxyz</code>\" <br>\n      <span class=\"tt\">T{ &nbsp;s8&nbsp;<strong>-TRAILING</strong> -&gt; s8&nbsp;2&nbsp;- }T</span> \t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> \"<code>abc  </code>\" <br>\n      <span class=\"tt\">T{ &nbsp;s7&nbsp;<strong>-TRAILING</strong> -&gt; s7 }T</span>\t\t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> \"<code> </code>\" <br>\n      <span class=\"tt\">T{ &nbsp;s9&nbsp;<strong>-TRAILING</strong> -&gt; s9&nbsp;<a href=\"../core/DROP.html\">DROP</a>&nbsp;0 }T</span>\t&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> \"<code>     </code>\" <br>\n      <span class=\"tt\">T{ s10&nbsp;<strong>-TRAILING</strong> -&gt; s10&nbsp;1- }T</span>\t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> \"<code>   a </code>\"\n      \n      \n      </p>"
                    }
                }
            },
            "REPLACES": {
                "id": "string:REPLACES",
                "number": "17.6.2.2141",
                "name": "REPLACES",
                "english": " ",
                "list": "STRING EXT",
                "basename": "REPLACES",
                "stackEffect": {
                    "html": {
                        " ": "( <em>c-addr<sub>1</sub> u<sub>1</sub> c-addr<sub>2</sub> u<sub>2</sub></em> -- )"
                    },
                    "plain": {
                        " ": "( c-addr1 u1 c-addr2 u2 -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>c-addr<sub>1</sub> u<sub>1</sub> c-addr<sub>2</sub> u<sub>2</sub></em> -- )\n      <p>\n      Set the string <em>c-addr<sub>1</sub> u<sub>1</sub></em> as the text to substitute for\n      the substitution named by <em>c-addr<sub>2</sub> u<sub>2</sub></em>.\n      If the substitution does not exist it is created.\n      The program may then reuse the buffer <em>c-addr<sub>1</sub> u<sub>1</sub></em> without\n      affecting the definition of the substitution.\n      </p><p>\n      Ambiguous conditions occur as follows:\n      </p><ul>\n      <li> The substitution cannot be created;\n      </li>\n      <li> The name of a substitution contains the `<code>%</code>' delimiter character.\n      </li>\n</ul>\n      <p>\n      <strong>REPLACES</strong> may allot data space and create a definition.  This breaks\n      the contiguity of the current region and is not allowed during compilation\n      of a colon definition\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:contiguous\">3.3.3.2 Contiguous regions</a></strong>,\n      <strong><a href=\"../usage.html#usage:compilation\">3.4.5 Compilation</a></strong>,\n      <a href=\"../string/SUBSTITUTE.html\">17.6.2.2255 SUBSTITUTE</a>.\n      <p>\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n\n      <a href=\"../core/DECIMAL.html\">DECIMAL</a>\n      <p>\n      <a href=\"../tools/BracketUNDEFINED.html\">[UNDEFINED]</a> place <a href=\"../tools/BracketIF.html\">[IF]</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/Colon.html\">:</a> place &nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a>  c-addr1 u c-addr2 -- <br>\n      &nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Copy the string described by <em>c-addr<em><sub>1</sub></em> u</em> as a counted</span> <br>\n      &nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">string at the memory address described by <em>c-addr<em><sub>2</sub></em></em>.</span> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/TwoDUP.html\">2DUP</a> <a href=\"../core/TwotoR.html\">2&gt;R</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; 1 <a href=\"../core/CHARS.html\">CHARS</a> <a href=\"../core/Plus.html\">+</a> <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../core/MOVE.html\">MOVE</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/TwoRfrom.html\">2R&gt;</a> <a href=\"../core/CStore.html\">C!</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/Semi.html\">;</a> <br>\n      <a href=\"../tools/BracketTHEN.html\">[THEN]</a>\n      </p><p>\n      <a href=\"../core/Colon.html\">:</a> \"/COUNTED-STRING\" <a href=\"../core/Sq.html\">S\"</a> /COUNTED-STRING\" <a href=\"../core/Semi.html\">;</a> <br>\n      \"/COUNTED-STRING\" <a href=\"../core/ENVIRONMENTq.html\">ENVIRONMENT?</a> <a href=\"../core/ZeroEqual.html\">0=</a> <a href=\"../tools/BracketIF.html\">[IF]</a> 256 <a href=\"../tools/BracketTHEN.html\">[THEN]</a> <br>\n      <a href=\"../core/CHARS.html\">CHARS</a> <a href=\"../core/CONSTANT.html\">CONSTANT</a> string-max\n      </p><p>\n      <a href=\"../search/WORDLIST.html\">WORDLIST</a> <a href=\"../core/CONSTANT.html\">CONSTANT</a> wid-subst <br>\n      <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Wordlist ID of the wordlist used to hold substitution names and replacement text.</span>\n      </p><p>\n      <a href=\"../tools/BracketDEFINED.html\">[DEFINED]</a> VFXforth <a href=\"../tools/BracketIF.html\">[IF]</a> <a href=\"../core/bs.html\">\\</a> <span class=\"rm\"><strong>VFX Forth</strong></span> <br>\n      &nbsp;&nbsp; <a href=\"../core/Colon.html\">:</a> makeSubst\t<a href=\"../core/bs.html\">\\</a> c-addr len -- c-addr <br>\n      &nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Given a name string create a substution and storage space.</span> <br>\n      &nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Return the address of the buffer for the substitution text.</span> <br>\n      &nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">This word requires system specific knowledge of the host Forth.</span> <br>\n      &nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Some systems may need to perform case conversion here.</span> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../search/GET-CURRENT.html\">GET-CURRENT</a> <a href=\"../core/toR.html\">&gt;R</a> wid-subst <a href=\"../search/SET-CURRENT.html\">SET-CURRENT</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; ($create) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">like <a href=\"../core/CREATE.html\">CREATE</a> but takes c-addr/len</span> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../search/SET-CURRENT.html\">SET-CURRENT</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/HERE.html\">HERE</a>  string-max <a href=\"../core/ALLOT.html\">ALLOT</a>  0 <a href=\"../core/OVER.html\">OVER</a> <a href=\"../core/CStore.html\">C!</a>\t<a href=\"../core/bs.html\">\\</a> <span class=\"rm\">create buffer space</span> <br>\n      &nbsp;&nbsp; <a href=\"../core/Semi.html\">;</a> <br>\n      <a href=\"../tools/BracketTHEN.html\">[THEN]</a>\n      </p><p>\n      <a href=\"../tools/BracketDEFINED.html\">[DEFINED]</a> (WID-CREATE) <a href=\"../tools/BracketIF.html\">[IF]</a> <a href=\"../core/bs.html\">\\</a> <span class=\"rm\"><strong>SwiftForth</strong></span> <br>\n      &nbsp;&nbsp; <a href=\"../core/Colon.html\">:</a> makeSubst <a href=\"../core/bs.html\">\\</a> c-addr len -- c-addr <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; wid-subst (WID-CREATE) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">like <a href=\"../core/CREATE.html\">CREATE</a> but takes c-addr/len/wid</span> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; LAST <a href=\"../core/Fetch.html\">@</a> &gt;CREATE <a href=\"../core/Store.html\">!</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/HERE.html\">HERE</a>  string-max <a href=\"../core/ALLOT.html\">ALLOT</a>  0 <a href=\"../core/OVER.html\">OVER</a> <a href=\"../core/CStore.html\">C!</a> <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">create buffer space</span> <br>\n      &nbsp;&nbsp; <a href=\"../core/Semi.html\">;</a> <br>\n      <a href=\"../tools/BracketTHEN.html\">[THEN]</a>\n      </p><p>\n      <a href=\"../core/Colon.html\">:</a> findSubst <a href=\"../core/bs.html\">\\</a> c-addr len -- xt flag | 0 <br>\n      <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Given a name string, find the substitution.</span> <br>\n      <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Return <em>xt</em> and <em>flag</em> if found, or just zero if not found.</span> <br>\n      <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Some systems may need to perform case conversion here.</span> <br>\n      &nbsp;&nbsp; wid-subst <a href=\"../search/SEARCH-WORDLIST.html\">SEARCH-WORDLIST</a> <br>\n      <a href=\"../core/Semi.html\">;</a>\n      </p><p>\n      <a href=\"../core/Colon.html\">:</a> <strong>REPLACES</strong> <a href=\"../core/bs.html\">\\</a> text tlen name nlen -- <br>\n      <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Define the string <em>text/tlen</em> as the text to substitute for the substitution named <em>name/nlen</em>.</span> <br>\n      <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">If the substitution does not exist it is created.</span> <br>\n      &nbsp;&nbsp; <a href=\"../core/TwoDUP.html\">2DUP</a> findSubst <a href=\"../core/IF.html\">IF</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/NIP.html\">NIP</a> <a href=\"../core/NIP.html\">NIP</a>  <a href=\"../core/EXECUTE.html\">EXECUTE</a> &nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">get buffer address</span> <br>\n      &nbsp;&nbsp; <a href=\"../core/ELSE.html\">ELSE</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; makeSubst <br>\n      &nbsp;&nbsp; <a href=\"../core/THEN.html\">THEN</a> <br>\n      &nbsp;&nbsp; place &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">copy as counted string</span> <br>\n      <a href=\"../core/Semi.html\">;</a>\n      \n      \n      </p>"
                    }
                }
            },
            "SEARCH": {
                "id": "string:SEARCH",
                "number": "17.6.1.2191",
                "name": "SEARCH",
                "english": " ",
                "list": "STRING",
                "basename": "SEARCH",
                "stackEffect": {
                    "html": {
                        " ": "( <em>c-addr<sub>1</sub> u<sub>1</sub> c-addr<sub>2</sub> u<sub>2</sub></em> -- <em>c-addr<sub>3</sub> u<sub>3</sub> flag</em> )"
                    },
                    "plain": {
                        " ": "( c-addr1 u1 c-addr2 u2 -- c-addr3 u3 flag )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>c-addr<sub>1</sub> u<sub>1</sub> c-addr<sub>2</sub> u<sub>2</sub></em> -- <em>c-addr<sub>3</sub> u<sub>3</sub> flag</em> )\n      <p>\n      Search the string specified by <em>c-addr<sub>1</sub> u<sub>1</sub></em> for the\n      string specified by <em>c-addr<sub>2</sub> u<sub>2</sub></em>. If <em>flag</em> is\n      true, a match was found at <em>c-addr<sub>3</sub></em> with <em>u<sub>3</sub></em>\n      characters remaining. If <em>flag</em> is false there was no\n      match and <em>c-addr<sub>3</sub></em> is <em>c-addr<sub>1</sub></em> and <em>u<sub>3</sub></em>\n      is <em>u<sub>1</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;s2&nbsp;<a href=\"../core/Sq.html\">S\"</a>&nbsp;abc\"&nbsp;&nbsp;&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;s3&nbsp;<a href=\"../core/Sq.html\">S\"</a>&nbsp;jklmn\"&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;s4&nbsp;<a href=\"../core/Sq.html\">S\"</a>&nbsp;z\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;s5&nbsp;<a href=\"../core/Sq.html\">S\"</a>&nbsp;mnoq\"&nbsp;&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;s6&nbsp;<a href=\"../core/Sq.html\">S\"</a>&nbsp;12345\"&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;s7&nbsp;<a href=\"../core/Sq.html\">S\"</a>&nbsp;\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span>\n      <p>\n      <span class=\"tt\">T{ s1&nbsp;s2&nbsp;<strong>SEARCH</strong> -&gt; s1&nbsp;&lt;TRUE&gt;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ s1&nbsp;s3&nbsp;<strong>SEARCH</strong> -&gt; s1&nbsp;&nbsp;9&nbsp;<a href=\"../string/DivSTRING.html\">/STRING</a>&nbsp;&lt;TRUE&gt;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ s1&nbsp;s4&nbsp;<strong>SEARCH</strong> -&gt; s1&nbsp;25&nbsp;<a href=\"../string/DivSTRING.html\">/STRING</a>&nbsp;&lt;TRUE&gt;&nbsp; }T</span> <br>\n      <span class=\"tt\">T{ s1&nbsp;s5&nbsp;<strong>SEARCH</strong> -&gt; s1&nbsp;&lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ s1&nbsp;s6&nbsp;<strong>SEARCH</strong> -&gt; s1&nbsp;&lt;FALSE&gt; }T</span> <br>\n      <span class=\"tt\">T{ s1&nbsp;s7&nbsp;<strong>SEARCH</strong> -&gt; s1&nbsp;&lt;TRUE&gt;&nbsp; }T</span> \n      \n      \n      </p>"
                    }
                }
            },
            "SLITERAL": {
                "id": "string:SLITERAL",
                "number": "17.6.1.2212",
                "name": "SLITERAL",
                "english": " ",
                "list": "STRING",
                "basename": "SLITERAL",
                "stackEffect": {
                    "html": {
                        "Compilation:": "( <em>c-addr<sub>1</sub> u</em> -- )",
                        "Run-time:": "( -- <em>c-addr<sub>2</sub> u</em> )"
                    },
                    "plain": {
                        "Compilation:": "( c-addr1 u -- )",
                        "Run-time:": "( -- c-addr2 u )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      ( <em>c-addr<sub>1</sub> u</em> -- )\n      <p>\n      Append the run-time semantics given below to the current\n      definition.\n      </p><p>\n        \n      </p>"
                    },
                    "Run-time:": {
                        "name": "Run-time:",
                        "html": "\n\n\n      ( -- <em>c-addr<sub>2</sub> u</em> )\n      <p>\n      Return <em>c-addr<sub>2</sub> u</em> describing a string consisting of\n      the characters specified by <em>c-addr<sub>1</sub> u</em> during\n      compilation. A program shall not alter the returned string.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../rationale.html#rat:string:SLITERAL\">A.17.6.1.2212 SLITERAL</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.17.6.1.2212 SLITERAL -->\n      The current functionality of <a href=\"../core/Sq.html\">6.1.2165 S\"</a> may be\n      provided by the following definition:\n      <p>\n      \n            </p><div class=\"quote\">\n        <div class=\"tt\">\n<a href=\"../core/Colon.html\">:</a> <a href=\"../core/Sq.html\">S\"</a> <a href=\"../core/p.html\">(</a> \"ccc&lt;quote&gt;\" -- ) <br>\n          &nbsp;&nbsp; <a href=\"../core/BracketCHAR.html\">[CHAR]</a> \" <a href=\"../core/PARSE.html\">PARSE</a>  \n          <a href=\"../core/POSTPONE.html\">POSTPONE</a> <a href=\"../string/SLITERAL.html\">SLITERAL</a> <br>\n          <a href=\"../core/Semi.html\">;</a> <a href=\"../core/IMMEDIATE.html\">IMMEDIATE</a>\n          \n          </div>\n        </div>\n      \n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;s14&nbsp;<a href=\"../core/Bracket.html\">[</a>&nbsp;s1&nbsp;<a href=\"../right-bracket.html\">]</a>&nbsp;<strong>SLITERAL</strong>&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ s1&nbsp;s14&nbsp;<a href=\"../string/COMPARE.html\">COMPARE</a> -&gt; 0 }T</span> <br>\n      <span class=\"tt\">T{ s1&nbsp;s14&nbsp;<a href=\"../core/ROT.html\">ROT</a>&nbsp;<a href=\"../core/Equal.html\">=</a>&nbsp;<a href=\"../core/ROT.html\">ROT</a>&nbsp;<a href=\"../core/ROT.html\">ROT</a>&nbsp;<a href=\"../core/Equal.html\">=</a> -&gt; &lt;TRUE&gt;&nbsp;&lt;FALSE&gt; }T</span>\n      \n      \n      "
                    }
                }
            },
            "SUBSTITUTE": {
                "id": "string:SUBSTITUTE",
                "number": "17.6.2.2255",
                "name": "SUBSTITUTE",
                "english": " ",
                "list": "STRING EXT",
                "basename": "SUBSTITUTE",
                "stackEffect": {
                    "html": {
                        " ": "( <em>c-addr<sub>1</sub> u<sub>1</sub> c-addr<sub>2</sub> u<sub>2</sub></em> -- <em>c-addr<sub>2</sub> u<sub>3</sub> n</em> )"
                    },
                    "plain": {
                        " ": "( c-addr1 u1 c-addr2 u2 -- c-addr2 u3 n )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>c-addr<sub>1</sub> u<sub>1</sub> c-addr<sub>2</sub> u<sub>2</sub></em> -- <em>c-addr<sub>2</sub> u<sub>3</sub> n</em> )\n      <p>\n      Perform substitution on the string <em>c-addr<sub>1</sub> u<sub>1</sub></em> placing\n      the result at string <em>c-addr<sub>2</sub> u<sub>3</sub></em>, where <em>u3</em> is\n      the length of the resulting string.\n      An error occurs if the resulting string will not fit into\n      <em>c-addr<sub>2</sub> u<sub>2</sub></em> or if <em>c-addr<sub>2</sub></em> is the same as <em>c-addr<sub>1</sub></em>.\n      The return value <em>n</em> is positive or 0 on success and indicates the\n      number of substitutions made.\n      A negative value for <em>n</em> indicates that an error occurred, leaving\n      <em>c-addr<sub>2</sub> u<sub>3</sub></em> undefined.\n      Negative values of <em>n</em> are implementation defined except for\n      values in table <strong><a href=\"../exception.html#table:throw\">9.1 </a><a href=\"exception/THROW.html\">THROW</a> code assignments</strong>.\n      </p><p>\n      Substitution occurs left to right from the start of <em>c-addr<sub>1</sub></em>\n      in one pass and is non-recursive.\n      </p><p>\n      When text of a potential substitution name, surrounded by `<code>%</code>' (ASCII $25) delimiters\n      is encountered by <strong>SUBSTITUTE</strong>, the following occurs:\n      </p><p>\n      </p><ol style=\"list-style-type: decimal\">\n      <li> If the name is null, a single delimiter character is passed\n      to the output, i.e., <code>%%</code> is replaced by <code>%</code>.\n      The current number of substitutions is not changed.\n      <p>\n      </p></li>\n      <li> If the text is a valid substitution name acceptable to\n      <a href=\"../string/REPLACES.html\">17.6.2.2141 REPLACES</a>, the leading and trailing delimiter\n      characters and the enclosed substitution name are replaced by\n      the substitution text.  The current number of substitutions\n      is incremented.\n      <p>\n      </p></li>\n      <li> If the text is not a valid substitution name, the name with\n      leading\tand trailing delimiters is passed unchanged to the\n      output.  The current number of substitutions is not changed.\n      <p>\n      </p></li>\n      <li> Parsing of the input string resumes after the trailing delimiter.\n      </li>\n</ol>\n      <p>\n      If after processing any pairs of delimiters, the residue of the input string contains\n      a single delimiter, the residue is passed unchanged to the output.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../string/REPLACES.html\">17.6.2.2141 REPLACES</a>, <a href=\"../string/UNESCAPE.html\">17.6.2.2375 UNESCAPE</a>, <a href=\"../rationale.html#rat:string:SUBSTITUTE\">A.17.6.2.2255 SUBSTITUTE</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n\n      Many applications need to be able to perform text substitution, for\n      example:\n      <p>\n      </p><div class=\"center\">\n\n        Your balance at &lt;<em>time</em>&gt; on &lt;<em>date</em>&gt; is &lt;<em>currencyvalue</em>&gt;.\n        \n        </div>\n      <p>\n      Translation of a sentence or message from one language to another may\n      result in changes to the displayed parameter order.  The example, the\n      Afrikaans translation of this sentence requires a different order:\n      </p><p>\n      </p><div class=\"center\">\n\n        Jou balans op &lt;<em>date</em>&gt; om &lt;<em>time</em>&gt; is &lt;<em>currencyvalue</em>&gt;.\n        \n        </div>\n      <p>\n      The words <strong>SUBSTITUTE</strong> and <a href=\"../string/REPLACES.html\">REPLACES</a> provide for this\n      requirements by defining a text substitution facility.  For example,\n      we can provide an initial string in the form:\n      </p><p>\n      </p><div class=\"center\">\n\n        <code>Your balance at %time% on %date% is %currencyvalue%.</code>\n        \n        </div>\n      <p>\n      The <code>%</code> is used as delimiters for the substitution name.  The\n      text \"<code>currencyvalue</code>\", \"<code>date</code>\" and \"<code>time</code>\"\n      are text substitutions, where the replacement text is defined by\n      <a href=\"../string/REPLACES.html\">REPLACES</a>:\n      </p><p>\n      \n      \n            </p><div class=\"quote\">\n        <div class=\"tt\">\n<div class=\"tabbing\">\n            <a href=\"../core/Colon.html\">:</a> date <a href=\"../core/Sq.html\">S\"</a> 10/Nov/2014\" <a href=\"../core/Semi.html\">;</a> <br>\n            <a href=\"../core/Colon.html\">:</a> time <a href=\"../core/Sq.html\">S\"</a> 02:52\" <a href=\"../core/Semi.html\">;</a> <br>\n            date  <a href=\"../core/Sq.html\">S\"</a> date\" <a href=\"../string/REPLACES.html\">REPLACES</a> <br>\n            time  <a href=\"../core/Sq.html\">S\"</a> time\" <a href=\"../string/REPLACES.html\">REPLACES</a>\n            <br>\n            \n            </div>\n          \n          </div>\n        </div>\n      <p>\n      The substitution name \"date\" is defined to be replaced with the string\n      \"10/Nov/2014\" and \"time\" to be replaced with \"02:52\".  Thus\n      <strong>SUBSTITUTE</strong> would produce the string:\n      </p><p>\n      </p><div class=\"center\">\n\n        <code>Your balance at 02:52 on 10/Nov/2014 is %currencyvalue%.</code>\n        \n        </div>\n      <p>\n      As the substitution name \"currencyvalue\" has not been defined, it is\n      left unchanged in the resulting string.\n      </p><p>\n      The return value <em>n</em> is nonnegative on success and indicates the\n      number of substitutions made.  In the above example, this would be two.\n      A negative value indicates that an error occurred.\n      As substitution is not recursive, the return value could be used to\n      provide a recursive substitution.\n      </p><p>\n      Implementation of <strong>SUBSTITUTE</strong> may be considered as being equivalent\n      to a wordlist which is searched.  If the substitution name is found, the\n      word is executed, returning a substitution string.\n      Such words can be deferred or multiple wordlists can be used.\n      The implementation techniques required are similar to those used by\n      <a href=\"../core/ENVIRONMENTq.html\">ENVIRONMENT?</a>.\n      There is no provision for changing the delimiter character, although a\n      system may provide system-specific extensions.\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n\n      <span class=\"rm\">Assuming <a href=\"../implement.html#imp:string:REPLACES\">E.17.6.2.2141 REPLACES</a> has been defined.</span>\n      <p>\n      <a href=\"../tools/BracketUNDEFINED.html\">[UNDEFINED]</a> bounds <a href=\"../tools/BracketIF.html\">[IF]</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/Colon.html\">:</a> bounds &nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> addr len -- addr+len addr <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/OVER.html\">OVER</a> <a href=\"../core/Plus.html\">+</a> <a href=\"../core/SWAP.html\">SWAP</a><br>\n      &nbsp;&nbsp; <a href=\"../core/Semi.html\">;</a> <br>\n      <a href=\"../tools/BracketTHEN.html\">[THEN]</a>\n      </p><p>\n      <a href=\"../tools/BracketUNDEFINED.html\">[UNDEFINED]</a> -rot <a href=\"../tools/BracketIF.html\">[IF]</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/Colon.html\">:</a> -rot &nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> a b c -- c a b <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/ROT.html\">ROT</a> <a href=\"../core/ROT.html\">ROT</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/Semi.html\">;</a> <br>\n      <a href=\"../tools/BracketTHEN.html\">[THEN]</a>\n      </p><p>\n      <a href=\"../core/CHAR.html\">CHAR</a> % <a href=\"../core/CONSTANT.html\">CONSTANT</a> delim \n      &nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Character used as the substitution name delimiter.</span> <br>\n      string-max <a href=\"../core/BUFFERColon.html\">BUFFER:</a> Name\t<!-- \\word{bs} -{}- addr \\\\ -->\n       <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Holds substitution name as a counted string.</span> <br>\n      <a href=\"../core/VARIABLE.html\">VARIABLE</a> DestLen <!-- \\word{bs} -{}- addr \\\\ -->\n      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Maximum length of the destination buffer.</span> <br>\n      <a href=\"../double/TwoVARIABLE.html\">2VARIABLE</a> Dest <!-- \\word{bs} -{}- addr \\\\ -->\n      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Holds destination string current length and address.</span> <br>\n      <a href=\"../core/VARIABLE.html\">VARIABLE</a> SubstErr <!-- \\word{bs} -{}- addr \\\\ -->\n      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Holds zero or an error code.</span>\n      </p><p>\n      <a href=\"../core/Colon.html\">:</a> addDest <a href=\"../core/bs.html\">\\</a> char -- <br>\n      <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Add the character to the destination string.</span> <br>\n      &nbsp;&nbsp; Dest <a href=\"../core/Fetch.html\">@</a> DestLen <a href=\"../core/Fetch.html\">@</a> <a href=\"../core/less.html\">&lt;</a> <a href=\"../core/IF.html\">IF</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; Dest <a href=\"../core/TwoFetch.html\">2@</a> <a href=\"../core/Plus.html\">+</a> <a href=\"../core/CStore.html\">C!</a>  1 <a href=\"../core/CHARS.html\">CHARS</a> Dest <a href=\"../core/PlusStore.html\">+!</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/ELSE.html\">ELSE</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/DROP.html\">DROP</a> -1 SubstErr <a href=\"../core/Store.html\">!</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/THEN.html\">THEN</a> <br>\n      <a href=\"../core/Semi.html\">;</a>\n      </p><p>\n      <a href=\"../core/Colon.html\">:</a> formName <a href=\"../core/bs.html\">\\</a> c-addr len -- c-addr' len' <br>\n      <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Given a source string pointing at a leading delimiter, place the name string in the name buffer.</span> <br>\n      &nbsp;&nbsp; 1 <a href=\"../string/DivSTRING.html\">/STRING</a> <a href=\"../core/TwoDUP.html\">2DUP</a> delim scan <a href=\"../core/toR.html\">&gt;R</a> <a href=\"../core/DROP.html\">DROP</a>\t\t\t\t  <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">find length of residue</span> <br>\n      &nbsp;&nbsp; <a href=\"../core/TwoDUP.html\">2DUP</a> <a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/Minus.html\">-</a> <a href=\"../core/DUP.html\">DUP</a> <a href=\"../core/toR.html\">&gt;R</a> Name place &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">save name in buffer</span> <br>\n      &nbsp;&nbsp; <a href=\"../core/Rfrom.html\">R&gt;</a> 1 <a href=\"../core/CHARS.html\">CHARS</a> <a href=\"../core/Plus.html\">+</a> <a href=\"../string/DivSTRING.html\">/STRING</a>\t\t\t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">step over name and trailing <code>%</code></span> <br>\n      <a href=\"../core/Semi.html\">;</a>\n      </p><p>\n      <a href=\"../core/Colon.html\">:</a> &gt;dest <a href=\"../core/bs.html\">\\</a> c-addr len -- <br>\n      <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Add a string to the output string.</span> <br>\n      &nbsp;&nbsp; bounds <a href=\"../core/qDO.html\">?DO</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/I.html\">I</a> <a href=\"../core/CFetch.html\">C@</a> addDest <br>\n      &nbsp;&nbsp; 1 <a href=\"../core/CHARS.html\">CHARS</a> <a href=\"../core/PlusLOOP.html\">+LOOP</a> <br>\n      <a href=\"../core/Semi.html\">;</a>\n      </p><p>\n      <a href=\"../core/Colon.html\">:</a> processName <a href=\"../core/bs.html\">\\</a> -- flag <br>\n      <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Process the last substitution name. Return true if found, 0 if not found.</span> <br>\n      &nbsp;&nbsp; Name <a href=\"../core/COUNT.html\">COUNT</a> findSubst <a href=\"../core/DUP.html\">DUP</a> <a href=\"../core/toR.html\">&gt;R</a> <a href=\"../core/IF.html\">IF</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/EXECUTE.html\">EXECUTE</a> <a href=\"../core/COUNT.html\">COUNT</a> &gt;dest <br>\n      &nbsp;&nbsp; <a href=\"../core/ELSE.html\">ELSE</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; delim addDest  Name <a href=\"../core/COUNT.html\">COUNT</a> &gt;dest  delim addDest <br>\n      &nbsp;&nbsp; <a href=\"../core/THEN.html\">THEN</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/Rfrom.html\">R&gt;</a> <br>\n      <a href=\"../core/Semi.html\">;</a>\n      </p><p>\n      <a href=\"../core/Colon.html\">:</a> <strong>SUBSTITUTE</strong> <a href=\"../core/bs.html\">\\</a> src slen dest dlen -- dest dlen' n <br>\n      <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Expand the source string using substitutions.</span> <br>\n      <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Note that this version is simplistic, performs no error checking,</span> <br>\n      <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">and requires a global buffer and global variables.</span> <br>\n      &nbsp;&nbsp; Destlen <a href=\"../core/Store.html\">!</a>  0 Dest <a href=\"../core/TwoStore.html\">2!</a>  0 -rot <a href=\"../core/bs.html\">\\</a> -- 0 src slen <br>\n      &nbsp;&nbsp; 0 SubstErr <a href=\"../core/Store.html\">!</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/BEGIN.html\">BEGIN</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/DUP.html\">DUP</a> 0 <a href=\"../core/more.html\">&gt;</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/WHILE.html\">WHILE</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/OVER.html\">OVER</a> <a href=\"../core/CFetch.html\">C@</a> delim <a href=\"../core/ne.html\">&lt;&gt;</a> <a href=\"../core/IF.html\">IF</a>\t\t\t\t\t\t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">character not <code>%</code></span> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t<a href=\"../core/OVER.html\">OVER</a> <a href=\"../core/CFetch.html\">C@</a> addDest  1 <a href=\"../string/DivSTRING.html\">/STRING</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/ELSE.html\">ELSE</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t<a href=\"../core/OVER.html\">OVER</a> 1 <a href=\"../core/CHARS.html\">CHARS</a> <a href=\"../core/Plus.html\">+</a> <a href=\"../core/CFetch.html\">C@</a> delim <a href=\"../core/Equal.html\">=</a> <a href=\"../core/IF.html\">IF</a>\t&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\"><code>%%</code> for one output <code>%</code></span> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t\tdelim addDest  2 <a href=\"../string/DivSTRING.html\">/STRING</a>\t\t\t\t\t\t\t\t\t\t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">add one <code>%</code> to output</span> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t<a href=\"../core/ELSE.html\">ELSE</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t\tformName processName <a href=\"../core/IF.html\">IF</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t\t\t<a href=\"../core/ROT.html\">ROT</a> <a href=\"../core/OnePlus.html\">1+</a> -rot\t\t\t\t\t\t\t\t\t\t\t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">count substitutions</span> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t\t<a href=\"../core/THEN.html\">THEN</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t<a href=\"../core/THEN.html\">THEN</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/THEN.html\">THEN</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/REPEAT.html\">REPEAT</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/TwoDROP.html\">2DROP</a> Dest <a href=\"../core/TwoFetch.html\">2@</a>  <a href=\"../core/ROT.html\">ROT</a> SubstErr <a href=\"../core/Fetch.html\">@</a> <a href=\"../core/IF.html\">IF</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp;\t<a href=\"../core/DROP.html\">DROP</a>  SubstErr <a href=\"../core/Fetch.html\">@</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/THEN.html\">THEN</a> <br>\n      <a href=\"../core/Semi.html\">;</a>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n            <div class=\"tt\">\n30 <a href=\"../core/CHARS.html\">CHARS</a> <a href=\"../core/BUFFERColon.html\">BUFFER:</a> subbuff <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Destination buffer</span>\n        <p>\n        <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Define a few string constants</span> <br>\n        <a href=\"../core/Colon.html\">:</a> \"hi\"    <a href=\"../core/Sq.html\">S\"</a> hi\"    <a href=\"../core/Semi.html\">;</a> <br>\n        <a href=\"../core/Colon.html\">:</a> \"wld\"   <a href=\"../core/Sq.html\">S\"</a> wld\"   <a href=\"../core/Semi.html\">;</a> <br>\n        <a href=\"../core/Colon.html\">:</a> \"hello\" <a href=\"../core/Sq.html\">S\"</a> hello\" <a href=\"../core/Semi.html\">;</a> <br>\n        <a href=\"../core/Colon.html\">:</a> \"world\" <a href=\"../core/Sq.html\">S\"</a> world\" <a href=\"../core/Semi.html\">;</a>\n        </p><p>\n        <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Define a few test strings</span> <br>\n        <a href=\"../core/Colon.html\">:</a> sub1 <a href=\"../core/Sq.html\">S\"</a> Start: %hi%,%wld%! :End\" ; &nbsp;&nbsp;&nbsp;<a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Original string</span> <br>\n        <a href=\"../core/Colon.html\">:</a> sub2 <a href=\"../core/Sq.html\">S\"</a> Start: hello,world! :End\" ;    &nbsp;&nbsp;<a href=\"../core/bs.html\">\\</a> <span class=\"rm\">First target string</span> <br>\n        <a href=\"../core/Colon.html\">:</a> sub3 <a href=\"../core/Sq.html\">S\"</a> Start: world,hello! :End\" ;    &nbsp;&nbsp;<a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Second target string</span>\n        </p><p>\n        <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Define the <code>hi</code> and <code>wld</code> substitutions</span> <br>\n        <span class=\"tt\">T{ \"hello\"&nbsp;\"hi\"&nbsp;&nbsp;<a href=\"../string/REPLACES.html\">REPLACES</a> -&gt;  }T</span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Replace \"<code>%hi%</code>\"  with \"<code>hello</code>\"</span> <br>\n        <span class=\"tt\">T{ \"world\"&nbsp;\"wld\"&nbsp;<a href=\"../string/REPLACES.html\">REPLACES</a> -&gt;  }T</span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Replace \"<code>%wld%</code>\" with \"<code>world</code>\"</span>\n        </p><p>\n        <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">\"<code>%hi%,%wld%</code>\" changed to \"<code>hello,world</code>\"</span> <br>\n        <span class=\"tt\">T{ sub1&nbsp;subbuff&nbsp;30&nbsp;<strong>SUBSTITUTE</strong>&nbsp;<a href=\"../core/ROT.html\">ROT</a>&nbsp;<a href=\"../core/ROT.html\">ROT</a>&nbsp;sub2&nbsp;<a href=\"../string/COMPARE.html\">COMPARE</a> -&gt; 2&nbsp;0 }T</span>\n        </p><p>\n        <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Change the <code>hi</code> and <code>wld</code> substitutions</span> <br>\n        <span class=\"tt\">T{ \"world\"&nbsp;\"hi\"&nbsp;&nbsp;<a href=\"../string/REPLACES.html\">REPLACES</a> -&gt;  }T</span> <br>\n        <span class=\"tt\">T{ \"hello\"&nbsp;\"wld\"&nbsp;<a href=\"../string/REPLACES.html\">REPLACES</a> -&gt;  }T</span>\n        </p><p>\n        <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Now \"<code>%hi%,%wld%</code>\" should be changed to \"<code>world,hello</code>\"</span> <br>\n        <span class=\"tt\">T{ sub1&nbsp;subbuff&nbsp;30&nbsp;<strong>SUBSTITUTE</strong>&nbsp;<a href=\"../core/ROT.html\">ROT</a>&nbsp;<a href=\"../core/ROT.html\">ROT</a>&nbsp;sub3&nbsp;<a href=\"../string/COMPARE.html\">COMPARE</a> -&gt; 2&nbsp;0 }T</span>\n        </p><p>\n        <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Where the subsitution name is not defined</span> <br>\n        <a href=\"../core/Colon.html\">:</a> sub4 <a href=\"../core/Sq.html\">S\"</a> aaa%bbb%ccc\" ; <br>\n        <span class=\"tt\">T{ sub4&nbsp;subbuff&nbsp;30&nbsp;<strong>SUBSTITUTE</strong>&nbsp;<a href=\"../core/ROT.html\">ROT</a>&nbsp;<a href=\"../core/ROT.html\">ROT</a>&nbsp;sub4&nbsp;<a href=\"../string/COMPARE.html\">COMPARE</a> -&gt; 0&nbsp;0 }T</span>\n        </p><p>\n        <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Finally the <code>%</code> character itself</span> <br>\n        <a href=\"../core/Colon.html\">:</a> sub5 <a href=\"../core/Sq.html\">S\"</a> aaa%%bbb\" <a href=\"../core/Semi.html\">;</a> <br>\n        <a href=\"../core/Colon.html\">:</a> sub6 <a href=\"../core/Sq.html\">S\"</a> aaa%bbb\" <a href=\"../core/Semi.html\">;</a> <br>\n        <span class=\"tt\">T{ sub5&nbsp;subbuff&nbsp;30&nbsp;<strong>SUBSTITUTE</strong>&nbsp;<a href=\"../core/ROT.html\">ROT</a>&nbsp;<a href=\"../core/ROT.html\">ROT</a>&nbsp;sub6&nbsp;<a href=\"../string/COMPARE.html\">COMPARE</a> -&gt; 0&nbsp;0 }T</span> <br>\n        \n        \n        </p></div>\n      "
                    }
                }
            },
            "UNESCAPE": {
                "id": "string:UNESCAPE",
                "number": "17.6.2.2375",
                "name": "UNESCAPE",
                "english": " ",
                "list": "STRING EXT",
                "basename": "UNESCAPE",
                "stackEffect": {
                    "html": {
                        " ": "( <em>c-addr<sub>1</sub> u<sub>1</sub> c-addr<sub>2</sub></em> -- <em>c-addr<sub>2</sub> u<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( c-addr1 u1 c-addr2 -- c-addr2 u2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>c-addr<sub>1</sub> u<sub>1</sub> c-addr<sub>2</sub></em> -- <em>c-addr<sub>2</sub> u<sub>2</sub></em> )\n      <p>\n      Replace each `<code>%</code>' character in the input string\n      <em>c-addr<sub>1</sub> u<sub>1</sub></em> by two `<code>%</code>' characters.  The output\n      is represented by <em>c-addr<sub>2</sub> u<sub>2</sub></em>.  The buffer at <em>c-addr<sub>2</sub></em>\n      shall be big enough to hold the unescaped string.  An ambiguous\n      condition occurs if the resulting string will not fit into the\n      destination buffer (<em>c-addr<sub>2</sub></em>).\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../string/SUBSTITUTE.html\">17.6.2.2255 SUBSTITUTE</a>.\n      <p>\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n\n      <a href=\"../core/Colon.html\">:</a> <strong>UNESCAPE</strong> <a href=\"../core/bs.html\">\\</a> c-addr1 len1 c-addr2 -- c-addr2 len2 <br>\n      <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Replace each '<code>%</code>' character in the input string <em>c-addr<em><sub>1</sub></em> len<em><sub>1</sub></em></em> with two '<code>%</code>' characters.</span> <br>\n      <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">The output is represented by <em>c-addr<em><sub>2</sub></em> len<em><sub>2</sub></em></em>.</span> <br>\n      <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">If you pass a string through <strong>UNESCAPE</strong> and then <a href=\"../string/SUBSTITUTE.html\">SUBSTITUTE</a>, you get the original string.</span> <br>\n      &nbsp;&nbsp; <a href=\"../core/DUP.html\">DUP</a> <a href=\"../core/TwoSWAP.html\">2SWAP</a>  <a href=\"../core/OVER.html\">OVER</a> <a href=\"../core/Plus.html\">+</a> <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../core/qDO.html\">?DO</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/I.html\">I</a> <a href=\"../core/CFetch.html\">C@</a> <a href=\"../core/BracketCHAR.html\">[CHAR]</a> % <a href=\"../core/Equal.html\">=</a> <a href=\"../core/IF.html\">IF</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/BracketCHAR.html\">[CHAR]</a> % <a href=\"../core/OVER.html\">OVER</a> <a href=\"../core/CStore.html\">C!</a> <a href=\"../core/OnePlus.html\">1+</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/THEN.html\">THEN</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/I.html\">I</a> <a href=\"../core/CFetch.html\">C@</a> <a href=\"../core/OVER.html\">OVER</a> <a href=\"../core/CStore.html\">C!</a> <a href=\"../core/OnePlus.html\">1+</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/LOOP.html\">LOOP</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/OVER.html\">OVER</a> <a href=\"../core/Minus.html\">-</a> <br>\n      <a href=\"../core/Semi.html\">;</a>\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      Using <code>subbuff</code>, <code>sub5</code> and <code>sub6</code> from <a href=\"../testsuite.html#test:string:SUBSTITUTE\">F.17.6.2.2255 SUBSTITUTE</a>.\n      <p>\n      <span class=\"tt\">T{ sub6&nbsp;subbuff&nbsp;<strong>UNESCAPE</strong>&nbsp;sub5&nbsp;<a href=\"../string/COMPARE.html\">COMPARE</a> -&gt; 0 }T</span>\n      \n      \n      </p>"
                    }
                }
            }
        }
    },
    "tools": {
        "name": "tools",
        "words": {
            "AHEAD": {
                "id": "tools:AHEAD",
                "number": "15.6.2.0702",
                "name": "AHEAD",
                "english": " ",
                "list": "TOOLS EXT",
                "basename": "AHEAD",
                "stackEffect": {
                    "html": {
                        "Compilation:": "( C: -- <em>orig</em> )",
                        "Run-time:": "( -- )"
                    },
                    "plain": {
                        "Compilation:": "( C: -- orig )",
                        "Run-time:": "( -- )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      ( C: -- <em>orig</em> )\n      <p>\n      Put the location of a new unresolved forward reference\n      <em>orig</em> onto the control flow stack. Append the run-time\n      semantics given below to the current definition. The semantics\n      are incomplete until <em>orig</em> is resolved (e.g., by\n      <a href=\"../core/THEN.html\">THEN</a>).\n      </p><p>\n        \n      </p>"
                    },
                    "Run-time:": {
                        "name": "Run-time:",
                        "html": "\n\n\n      ( -- )\n      <p>\n      Continue execution at the location specified by the resolution\n      of <em>orig</em>.\n      </p><p>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;pt1&nbsp;<strong>AHEAD</strong>&nbsp;1111&nbsp;2222&nbsp;<a href=\"../core/THEN.html\">THEN</a>&nbsp;3333&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span> <br>\n      <span class=\"tt\">T{ pt1 -&gt; 3333 }T</span>\n      \n      \n      "
                    }
                }
            },
            "ASSEMBLER": {
                "id": "tools:ASSEMBLER",
                "number": "15.6.2.0740",
                "name": "ASSEMBLER",
                "english": " ",
                "list": "TOOLS EXT",
                "basename": "ASSEMBLER",
                "stackEffect": {
                    "html": {
                        " ": "( -- )"
                    },
                    "plain": {
                        " ": "( -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- )\n      <p>\n      Replace the first word list in the search order with the\n      <strong>ASSEMBLER</strong> word list.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../search.html#wordlist:search\">16 The optional Search-Order word set</a></strong>.\n      \n      "
                    }
                }
            },
            "BYE": {
                "id": "tools:BYE",
                "number": "15.6.2.0830",
                "name": "BYE",
                "english": " ",
                "list": "TOOLS EXT",
                "basename": "BYE",
                "stackEffect": {
                    "html": {
                        " ": "( -- )"
                    },
                    "plain": {
                        " ": "( -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- )\n      <p>\n      Return control to the host operating system, if any.\n      \n      </p>"
                    }
                }
            },
            "BracketDEFINED": {
                "id": "tools:[DEFINED]",
                "number": "15.6.2.2530.30",
                "name": "[DEFINED]",
                "english": "bracket-defined",
                "list": "TOOLS EXT",
                "basename": "BracketDEFINED",
                "stackEffect": {
                    "html": {
                        "Execution:": "( <em>\"&lt;spaces&gt;name ...\"</em> -- <em>flag</em> )"
                    },
                    "plain": {
                        "Execution:": "( \"<spaces>name ...\" -- flag )"
                    }
                },
                "sections": {
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      Perform the execution semantics given below.\n      <p>\n        \n      </p>"
                    },
                    "Execution:": {
                        "name": "Execution:",
                        "html": "\n\n\n      ( <em>\"&lt;spaces&gt;name ...\"</em> -- <em>flag</em> )\n      <p>\n      Skip leading space delimiters.  Parse name delimited by a space.\n      Return a true flag if <em>name</em> is the name of a word that can\n      be found (according to the rules in the system's <a href=\"../core/FIND.html\">FIND</a>);\n      otherwise return a false flag.\n      <strong>[DEFINED]</strong> is an immediate word.\n      </p><p>\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n <!-- I.15.6.2.---- [DEFINED] -->\n      <a href=\"../core/Colon.html\">:</a> <strong>[DEFINED]</strong> <a href=\"../core/BL.html\">BL</a> <a href=\"../core/WORD.html\">WORD</a> <a href=\"../core/FIND.html\">FIND</a> <a href=\"../core/NIP.html\">NIP</a> <a href=\"../core/Zerone.html\">0&lt;&gt;</a> <a href=\"../core/Semi.html\">;</a> <a href=\"../core/IMMEDIATE.html\">IMMEDIATE</a>\n      \n      \n      "
                    }
                }
            },
            "BracketELSE": {
                "id": "tools:[ELSE]",
                "number": "15.6.2.2531",
                "name": "[ELSE]",
                "english": "bracket-else",
                "list": "TOOLS EXT",
                "basename": "BracketELSE",
                "stackEffect": {
                    "html": {
                        "Execution:": "( <em>\"&lt;spaces&gt;name ...\"</em> -- )"
                    },
                    "plain": {
                        "Execution:": "( \"<spaces>name ...\" -- )"
                    }
                },
                "sections": {
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      Perform the execution semantics given below.\n      <p>\n        \n      </p>"
                    },
                    "Execution:": {
                        "name": "Execution:",
                        "html": "\n\n\n      ( <em>\"&lt;spaces&gt;name ...\"</em> -- )\n      <p>\n      Skipping leading spaces, parse and discard space-delimited words\n      from the parse area, including nested occurrences of <a href=\"../tools/BracketIF.html\">[IF]</a>\n      ... <a href=\"../tools/BracketTHEN.html\">[THEN]</a> and <a href=\"../tools/BracketIF.html\">[IF]</a> ... <strong>[ELSE]</strong>\n      ...  <a href=\"../tools/BracketTHEN.html\">[THEN]</a>, until the word <a href=\"../tools/BracketTHEN.html\">[THEN]</a> has been\n      parsed and discarded. If the parse area becomes exhausted, it is\n      refilled as with <a href=\"../core/REFILL.html\">REFILL</a>. <strong>[ELSE]</strong> is an\n      immediate word.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:parsing\">3.4.1 Parsing</a></strong>,\n      <a href=\"../rationale.html#rat:tools:[ELSE]\">A.15.6.2.2531 [ELSE]</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.15.6.2.2531 [ELSE] -->\n      Typical use:\n      ... <em>flag</em>\n      <a href=\"../tools/BracketIF.html\">[IF]</a> ...\n      <strong>[ELSE]</strong> ...\n      <a href=\"../tools/BracketTHEN.html\">[THEN]</a> ...\n        \n      "
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n\n      <div class=\"tabbing\">\n        \n        <a href=\"../core/Colon.html\">:</a> <strong>[ELSE]</strong> <a href=\"../core/p.html\">(</a> -- ) <br>\n        &nbsp;&nbsp;&nbsp; 1 <a href=\"../core/BEGIN.html\">BEGIN</a>\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/bs.html\">\\</a> level <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/BEGIN.html\">BEGIN</a>   <a href=\"../core/BL.html\">BL</a> <a href=\"../core/WORD.html\">WORD</a> <a href=\"../core/COUNT.html\">COUNT</a>   <a href=\"../core/DUP.html\">DUP</a>   <a href=\"../core/WHILE.html\">WHILE</a>\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t<a href=\"../core/bs.html\">\\</a> level adr len <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/TwoDUP.html\">2DUP</a> <a href=\"../core/Sq.html\">S\"</a> [IF]\"  <a href=\"../string/COMPARE.html\">COMPARE</a> <a href=\"../core/ZeroEqual.html\">0=</a> <a href=\"../core/IF.html\">IF</a>\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t<a href=\"../core/bs.html\">\\</a> level adr len <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/TwoDROP.html\">2DROP</a> <a href=\"../core/OnePlus.html\">1+</a>\t\t\t\t\t\t\t\t\t\t\t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t\t<a href=\"../core/bs.html\">\\</a> level' <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/ELSE.html\">ELSE</a>\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t<a href=\"../core/bs.html\">\\</a> level adr len <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/TwoDUP.html\">2DUP</a> <a href=\"../core/Sq.html\">S\"</a> [ELSE]\" <a href=\"../string/COMPARE.html\">COMPARE</a> <a href=\"../core/ZeroEqual.html\">0=</a> <a href=\"../core/IF.html\">IF</a>\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t\t<a href=\"../core/bs.html\">\\</a> level adr len <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/TwoDROP.html\">2DROP</a> <a href=\"../core/OneMinus.html\">1-</a> <a href=\"../core/DUP.html\">DUP</a> <a href=\"../core/IF.html\">IF</a> <a href=\"../core/OnePlus.html\">1+</a> <a href=\"../core/THEN.html\">THEN</a>\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t\t<a href=\"../core/bs.html\">\\</a> level' <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/ELSE.html\">ELSE</a>\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t\t<a href=\"../core/bs.html\">\\</a> level adr len <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/Sq.html\">S\"</a> [THEN]\" <a href=\"../string/COMPARE.html\">COMPARE</a> <a href=\"../core/ZeroEqual.html\">0=</a> <a href=\"../core/IF.html\">IF</a>\t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t\t<a href=\"../core/bs.html\">\\</a> level <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/OneMinus.html\">1-</a>\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t\t\t<a href=\"../core/bs.html\">\\</a> level' <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/THEN.html\">THEN</a> <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/THEN.html\">THEN</a> <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/THEN.html\">THEN</a> <a href=\"../core/qDUP.html\">?DUP</a> <a href=\"../core/ZeroEqual.html\">0=</a>   <a href=\"../core/IF.html\">IF</a> <a href=\"../core/EXIT.html\">EXIT</a> <a href=\"../core/THEN.html\">THEN</a>\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t<a href=\"../core/bs.html\">\\</a> level' <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/REPEAT.html\">REPEAT</a> <a href=\"../core/TwoDROP.html\">2DROP</a>\t\t\t\t\t\t\t\t\t\t\t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t<a href=\"../core/bs.html\">\\</a> level <br>\n        &nbsp;&nbsp;&nbsp;<a href=\"../core/REFILL.html\">REFILL</a> <a href=\"../core/ZeroEqual.html\">0=</a> <a href=\"../core/UNTIL.html\">UNTIL</a>\t\t\t\t\t\t\t\t\t\t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/bs.html\">\\</a> level <br>\n        &nbsp;&nbsp;&nbsp; <a href=\"../core/DROP.html\">DROP</a> <br>\n        <a href=\"../core/Semi.html\">;</a> <a href=\"../core/IMMEDIATE.html\">IMMEDIATE</a>\n        <br>\n        \n        </div>\n      \n      \n      "
                    }
                }
            },
            "BracketIF": {
                "id": "tools:[IF]",
                "number": "15.6.2.2532",
                "name": "[IF]",
                "english": "bracket-if",
                "list": "TOOLS EXT",
                "basename": "BracketIF",
                "stackEffect": {
                    "html": {
                        "Execution:": "( <em>flag | flag \"&lt;spaces&gt;name ...\"</em> -- )"
                    },
                    "plain": {
                        "Execution:": "( flag | flag \"<spaces>name ...\" -- )"
                    }
                },
                "sections": {
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      Perform the execution semantics given below.\n      <p>\n        \n      </p>"
                    },
                    "Execution:": {
                        "name": "Execution:",
                        "html": "\n\n\n      ( <em>flag | flag \"&lt;spaces&gt;name ...\"</em> -- )\n      <p>\n      If <em>flag</em> is true, do nothing. Otherwise, skipping leading\n      spaces, parse and discard space-delimited words from the parse\n      area, including nested occurrences of <strong>[IF]</strong> ...\n      <a href=\"../tools/BracketTHEN.html\">[THEN]</a> and <strong>[IF]</strong> ... <a href=\"../tools/BracketELSE.html\">[ELSE]</a> ...\n      <a href=\"../tools/BracketTHEN.html\">[THEN]</a>, until either the word <a href=\"../tools/BracketELSE.html\">[ELSE]</a> or the word\n      <a href=\"../tools/BracketTHEN.html\">[THEN]</a> has been parsed and discarded. If the parse area\n      becomes exhausted, it is refilled as with <a href=\"../core/REFILL.html\">REFILL</a>.\n      <strong>[IF]</strong> is an immediate word.\n      </p><p>\n      An ambiguous condition exists if <strong>[IF]</strong> is\n      <a href=\"../core/POSTPONE.html\">POSTPONE</a>d, or if the end of the input buffer is\n      reached and cannot be refilled before the terminating\n      <a href=\"../tools/BracketELSE.html\">[ELSE]</a> or <a href=\"../tools/BracketTHEN.html\">[THEN]</a> is parsed.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:parsing\">3.4.1 Parsing</a></strong>,\n      <a href=\"../rationale.html#rat:tools:[IF]\">A.15.6.2.2532 [IF]</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.15.6.2.2532 [IF] -->\n      Typical use:\n      ... <em>flag</em>\n      <strong>[IF]</strong> ...\n      <a href=\"../tools/BracketELSE.html\">[ELSE]</a> ...\n      <a href=\"../tools/BracketTHEN.html\">[THEN]</a> ...\n        \n      "
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n\n      <a href=\"../core/Colon.html\">:</a> <strong>[IF]</strong> <a href=\"../core/p.html\">(</a> flag -- ) <br>\n      &nbsp;&nbsp; <a href=\"../core/ZeroEqual.html\">0=</a> <a href=\"../core/IF.html\">IF</a> <a href=\"../core/POSTPONE.html\">POSTPONE</a> <a href=\"../tools/BracketELSE.html\">[ELSE]</a> <a href=\"../core/THEN.html\">THEN</a> <br>\n      <a href=\"../core/Semi.html\">;</a> <a href=\"../core/IMMEDIATE.html\">IMMEDIATE</a>\n      \n      \n      "
                    }
                }
            },
            "BracketTHEN": {
                "id": "tools:[THEN]",
                "number": "15.6.2.2533",
                "name": "[THEN]",
                "english": "bracket-then",
                "list": "TOOLS EXT",
                "basename": "BracketTHEN",
                "stackEffect": {
                    "html": {
                        "Execution:": "( -- )"
                    },
                    "plain": {
                        "Execution:": "( -- )"
                    }
                },
                "sections": {
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      Perform the execution semantics given below.\n      <p>\n        \n      </p>"
                    },
                    "Execution:": {
                        "name": "Execution:",
                        "html": "\n\n\n      ( -- )\n      <p>\n      Does nothing. <strong>[THEN]</strong> is an immediate word.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../rationale.html#rat:tools:[THEN]\">A.15.6.2.2533 [THEN]</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.15.6.2.2533 [THEN] -->\n      Typical use:\n      ... <em>flag</em>\n      <a href=\"../tools/BracketIF.html\">[IF]</a> ...\n      <a href=\"../tools/BracketELSE.html\">[ELSE]</a> ...\n      <strong>[THEN]</strong> ...\n      <p>\n      Software that runs in several system environments often\n      contains some source code that is environmentally dependent.\n      Conditional compilation — the selective inclusion or\n      exclusion of portions of the source code at compile time —\n      is one technique that is often used to assist in the\n      maintenance of such source code.\n      </p><p>\n      Conditional compilation is sometimes done with \"smart\n      comments\" — definitions that either skip or do not skip\n      the remainder of the line based on some test. For example:\n      </p><p>\n      \n            </p><div class=\"quote\">\n        <div class=\"tt\">\n<a href=\"../core/bs.html\">\\</a> If 16-Bit? contains TRUE, lines preceded by 16BIT\\ <br>\n          <a href=\"../core/bs.html\">\\</a> will be skipped. Otherwise, they will not be skipped.\n          <p>\n          <a href=\"../core/VARIABLE.html\">VARIABLE</a> 16-BIT?\n          </p><p>\n          <a href=\"../core/Colon.html\">:</a> 16BIT\\  <a href=\"../core/p.html\">(</a> -- )  \n          16-BIT? <a href=\"../core/Fetch.html\">@</a>  \n          <a href=\"../core/IF.html\">IF</a>   <a href=\"../core/POSTPONE.html\">POSTPONE</a> <a href=\"../core/bs.html\">\\</a>   <a href=\"../core/THEN.html\">THEN</a> <br>\n          <a href=\"../core/Semi.html\">;</a> <a href=\"../core/IMMEDIATE.html\">IMMEDIATE</a>\n          \n          </p></div>\n        </div>\n      This technique works on a line by line basis, and is good for\n      short, isolated variant code sequences.\n      <p>\n      More complicated conditional compilation problems suggest a\n      nestable method that can encompass more than one source line\n      at a time. The words included in the optional Programming tools\n      extensions word set are useful for this purpose.\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n\n      <a href=\"../core/Colon.html\">:</a> <strong>[THEN]</strong> <a href=\"../core/p.html\">(</a> -- ) <a href=\"../core/Semi.html\">;</a> <a href=\"../core/IMMEDIATE.html\">IMMEDIATE</a>\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      <span class=\"tt\">T{ &lt;TRUE&gt;&nbsp;&nbsp;<a href=\"../tools/BracketIF.html\">[IF]</a>&nbsp;111&nbsp;<a href=\"../tools/BracketELSE.html\">[ELSE]</a>&nbsp;222&nbsp;<strong>[THEN]</strong> -&gt; 111 }T</span> <br>\n      <span class=\"tt\">T{ &lt;FALSE&gt;&nbsp;<a href=\"../tools/BracketIF.html\">[IF]</a>&nbsp;111&nbsp;<a href=\"../tools/BracketELSE.html\">[ELSE]</a>&nbsp;222&nbsp;<strong>[THEN]</strong> -&gt; 222 }T</span>\n      <p>\n      <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Check words are immediate</span> <br>\n      <a href=\"../core/Colon.html\">:</a> tfind <a href=\"../core/BL.html\">BL</a> <a href=\"../core/WORD.html\">WORD</a> <a href=\"../core/FIND.html\">FIND</a> <a href=\"../core/Semi.html\">;</a> <br>\n      <span class=\"tt\">T{ tfind&nbsp;<a href=\"../tools/BracketIF.html\">[IF]</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/NIP.html\">NIP</a> -&gt; 1 }T</span> <br>\n      <span class=\"tt\">T{ tfind&nbsp;<a href=\"../tools/BracketELSE.html\">[ELSE]</a>&nbsp;<a href=\"../core/NIP.html\">NIP</a> -&gt; 1 }T</span> <br>\n      <span class=\"tt\">T{ tfind&nbsp;<strong>[THEN]</strong>&nbsp;<a href=\"../core/NIP.html\">NIP</a> -&gt; 1 }T</span>\n      </p><p>\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;pt2&nbsp;<a href=\"../core/Bracket.html\">[</a>&nbsp;&nbsp;0&nbsp;<a href=\"../right-bracket.html\">]</a>&nbsp;<a href=\"../tools/BracketIF.html\">[IF]</a>&nbsp;1111&nbsp;<a href=\"../tools/BracketELSE.html\">[ELSE]</a>&nbsp;2222&nbsp;<strong>[THEN]</strong>&nbsp;<a href=\"../core/Semi.html\">;</a>&nbsp;pt2 -&gt; 2222 }T</span> <br>\n      <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;pt3&nbsp;<a href=\"../core/Bracket.html\">[</a>&nbsp;-1&nbsp;<a href=\"../right-bracket.html\">]</a>&nbsp;<a href=\"../tools/BracketIF.html\">[IF]</a>&nbsp;3333&nbsp;<a href=\"../tools/BracketELSE.html\">[ELSE]</a>&nbsp;4444&nbsp;<strong>[THEN]</strong>&nbsp;<a href=\"../core/Semi.html\">;</a>&nbsp;pt3 -&gt; 3333 }T</span>\n      </p><p>\n      <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Code spread over more than 1 line</span> <br>\n      <span class=\"tt\">T{ &lt;TRUE&gt;&nbsp;&nbsp;<a href=\"../tools/BracketIF.html\">[IF]</a>&nbsp;1&nbsp;<br>\n      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;<br>\n      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../tools/BracketELSE.html\">[ELSE]</a>&nbsp;<br>\n      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;<br>\n      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;<br>\n      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>[THEN]</strong> -&gt; 1&nbsp;2 }T</span><br>\n      <span class=\"tt\">T{ &lt;FALSE&gt;&nbsp;<a href=\"../tools/BracketIF.html\">[IF]</a>&nbsp;<br>\n      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;2&nbsp;<br>\n      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../tools/BracketELSE.html\">[ELSE]</a>&nbsp;<br>\n      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;4&nbsp;<br>\n      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>[THEN]</strong> -&gt; 3&nbsp;4 }T</span>\n      </p><p>\n      <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Nested</span> <br>\n      <a href=\"../core/Colon.html\">:</a> &lt;T&gt; &lt;TRUE&gt;  <a href=\"../core/Semi.html\">;</a> <br>\n      <a href=\"../core/Colon.html\">:</a> &lt;F&gt; &lt;FALSE&gt; <a href=\"../core/Colon.html\">:</a> <br>\n      <span class=\"tt\">T{ &lt;T&gt;&nbsp;<a href=\"../tools/BracketIF.html\">[IF]</a>&nbsp;1&nbsp;&lt;T&gt;&nbsp;<a href=\"../tools/BracketIF.html\">[IF]</a>&nbsp;2&nbsp;<a href=\"../tools/BracketELSE.html\">[ELSE]</a>&nbsp;3&nbsp;<strong>[THEN]</strong>&nbsp;<a href=\"../tools/BracketELSE.html\">[ELSE]</a>&nbsp;4&nbsp;<strong>[THEN]</strong> -&gt; 1&nbsp;2 }T</span> <br>\n      <span class=\"tt\">T{ &lt;F&gt;&nbsp;<a href=\"../tools/BracketIF.html\">[IF]</a>&nbsp;1&nbsp;&lt;T&gt;&nbsp;<a href=\"../tools/BracketIF.html\">[IF]</a>&nbsp;2&nbsp;<a href=\"../tools/BracketELSE.html\">[ELSE]</a>&nbsp;3&nbsp;<strong>[THEN]</strong>&nbsp;<a href=\"../tools/BracketELSE.html\">[ELSE]</a>&nbsp;4&nbsp;<strong>[THEN]</strong> -&gt; 4 }T</span> <br>\n      <span class=\"tt\">T{ &lt;T&gt;&nbsp;<a href=\"../tools/BracketIF.html\">[IF]</a>&nbsp;1&nbsp;&lt;F&gt;&nbsp;<a href=\"../tools/BracketIF.html\">[IF]</a>&nbsp;2&nbsp;<a href=\"../tools/BracketELSE.html\">[ELSE]</a>&nbsp;3&nbsp;<strong>[THEN]</strong>&nbsp;<a href=\"../tools/BracketELSE.html\">[ELSE]</a>&nbsp;4&nbsp;<strong>[THEN]</strong> -&gt; 1&nbsp;3 }T</span> <br>\n      <span class=\"tt\">T{ &lt;F&gt;&nbsp;<a href=\"../tools/BracketIF.html\">[IF]</a>&nbsp;1&nbsp;&lt;F&gt;&nbsp;<a href=\"../tools/BracketIF.html\">[IF]</a>&nbsp;2&nbsp;<a href=\"../tools/BracketELSE.html\">[ELSE]</a>&nbsp;3&nbsp;<strong>[THEN]</strong>&nbsp;<a href=\"../tools/BracketELSE.html\">[ELSE]</a>&nbsp;4&nbsp;<strong>[THEN]</strong> -&gt; 4 }T</span>\n      \n      \n      </p>"
                    }
                }
            },
            "BracketUNDEFINED": {
                "id": "tools:[UNDEFINED]",
                "number": "15.6.2.2534",
                "name": "[UNDEFINED]",
                "english": "bracket-undefined",
                "list": "TOOLS EXT",
                "basename": "BracketUNDEFINED",
                "stackEffect": {
                    "html": {
                        "Execution:": "( <em>\"&lt;spaces&gt;name ...\"</em> -- <em>flag</em> )"
                    },
                    "plain": {
                        "Execution:": "( \"<spaces>name ...\" -- flag )"
                    }
                },
                "sections": {
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      Perform the execution semantics given below.\n      <p>\n        \n      </p>"
                    },
                    "Execution:": {
                        "name": "Execution:",
                        "html": "\n\n\n      ( <em>\"&lt;spaces&gt;name ...\"</em> -- <em>flag</em> )\n      <p>\n      Skip leading space delimiters.  Parse name delimited by a space.\n      Return a false flag if <em>name</em> is the name of a word that\n      can be found (according to the rules in the system's <a href=\"../core/FIND.html\">FIND</a>);\n      otherwise return a true flag. <strong>[UNDEFINED]</strong> is an immediate\n      word.\n      </p><p>\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n <!-- I.15.6.2.---- [UNDEFINED] -->\n      <a href=\"../core/Colon.html\">:</a> <strong>[UNDEFINED]</strong> <a href=\"../core/BL.html\">BL</a> <a href=\"../core/WORD.html\">WORD</a> <a href=\"../core/FIND.html\">FIND</a> <a href=\"../core/NIP.html\">NIP</a> <a href=\"../core/ZeroEqual.html\">0=</a> <a href=\"../core/Semi.html\">;</a> <a href=\"../core/IMMEDIATE.html\">IMMEDIATE</a>\n      \n      \n      "
                    }
                }
            },
            "CODE": {
                "id": "tools:CODE",
                "number": "15.6.2.0930",
                "name": "CODE",
                "english": " ",
                "list": "TOOLS EXT",
                "basename": "CODE",
                "stackEffect": {
                    "html": {
                        " ": "( <em>\"&lt;spaces&gt;name\"</em> -- )",
                        "name Execution:": "( <em>i * x</em> -- <em>j * x</em> )"
                    },
                    "plain": {
                        " ": "( \"<spaces>name\" -- )",
                        "name Execution:": "( i * x -- j * x )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>\"&lt;spaces&gt;name\"</em> -- )\n      <p>\n      Skip leading space delimiters. Parse <em>name</em> delimited by a\n      space. Create a definition for <em>name</em>, called a \"code\n      definition\", with the execution semantics defined below.\n      </p><p>\n      Subsequent characters in the parse area typically represent\n      source code in a programming language, usually some form of\n      assembly language. Those characters are processed in an\n      implementation-defined manner, generating the corresponding\n      machine code. The process continues, refilling the input buffer\n      as needed, until an implementation-defined ending sequence is\n      processed.\n      </p><p>\n        \n      </p>"
                    },
                    "name Execution:": {
                        "name": "name Execution:",
                        "html": "\n\n\n      ( <em>i * x</em> -- <em>j * x</em> )\n      <p>\n      Execute the machine code sequence that was generated following\n      <strong>CODE</strong>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:parsing\">3.4.1 Parsing</a></strong>,\n      <a href=\"../rationale.html#rat:tools:CODE\">A.15.6.2.0930 CODE</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.15.6.2.0930 CODE -->\n      Some Forth systems implement the assembly function by adding\n      an <a href=\"../tools/ASSEMBLER.html\">ASSEMBLER</a> word list to the search order,\n      using the text interpreter to parse a postfix assembly\n      language with lexical characteristics similar to Forth source\n      code. Typically, in such systems, assembly ends when a word\n      <code>END-CODE</code> is interpreted.\n      \n      \n      "
                    }
                }
            },
            "CS-PICK": {
                "id": "tools:CS-PICK",
                "number": "15.6.2.1015",
                "name": "CS-PICK",
                "english": "c-s-pick",
                "list": "TOOLS EXT",
                "basename": "CS-PICK",
                "stackEffect": {
                    "html": {
                        "Execution:": "( C: <em>dest<sub>u</sub> ... orig<sub>0</sub> | dest<sub>0</sub></em> -- <em>dest<sub>u</sub> ... orig<sub>0</sub> | dest<sub>0</sub> dest<sub>u</sub></em> )\n      ( S: <em>u</em> -- )"
                    },
                    "plain": {
                        "Execution:": "( C: destu ... orig0 | dest0 -- destu ... orig0 | dest0 destu )\n( S: u -- )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Execution:": {
                        "name": "Execution:",
                        "html": "\n\n\n      ( C: <em>dest<sub>u</sub> ... orig<sub>0</sub> | dest<sub>0</sub></em> -- <em>dest<sub>u</sub> ... orig<sub>0</sub> | dest<sub>0</sub> dest<sub>u</sub></em> )\n      ( S: <em>u</em> -- )\n      <p>\n      Remove <em>u</em>. Copy <em>dest<sub>u</sub></em> to the top of the\n      control-flow stack. An ambiguous condition exists if there\n      are less than <em>u</em>+1 items, each of which shall be an\n      <em>orig</em> or <em>dest</em>, on the control-flow stack\n      before <strong>CS-PICK</strong> is executed.\n      </p><p>\n      If the control-flow stack is implemented using the data stack,\n      <em>u</em> shall be the topmost item on the data stack.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../rationale.html#rat:tools:CS-PICK\">A.15.6.2.1015 CS-PICK</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.15.6.2.1015 CS-PICK -->\n      The intent is to copy a <em>dest</em> on the control-flow\n      stack so that it can be resolved more than once. For example:\n      \n            <div class=\"quote\">\n        <div class=\"tt\">\n<a href=\"../core/bs.html\">\\</a> Conditionally transfer control to beginning of <br>\n          <a href=\"../core/bs.html\">\\</a> loop.  This is similar in spirit to C's \"continue\" <br>\n          <a href=\"../core/bs.html\">\\</a> statement.\n          <p>\n          <a href=\"../core/Colon.html\">:</a> ?REPEAT   <a href=\"../core/p.html\">(</a> dest -- dest ) <a href=\"../core/bs.html\">\\</a> Compilation <br>\n          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/p.html\">(</a> flag -- ) &nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> Execution <br>\n          &nbsp;&nbsp; 0 <a href=\"../tools/CS-PICK.html\">CS-PICK</a>   <a href=\"../core/POSTPONE.html\">POSTPONE</a> <a href=\"../core/UNTIL.html\">UNTIL</a> <br>\n          <a href=\"../core/Semi.html\">;</a> <a href=\"../core/IMMEDIATE.html\">IMMEDIATE</a>\n          </p><p>\n          <a href=\"../core/Colon.html\">:</a> XX <a href=\"../core/p.html\">(</a> -- ) <a href=\"../core/bs.html\">\\</a> Example use of ?REPEAT <br>\n          &nbsp;&nbsp; <a href=\"../core/BEGIN.html\">BEGIN</a> <br>\n          &nbsp;&nbsp;&nbsp;&nbsp; ... <br>\n          &nbsp;&nbsp; flag ?REPEAT <a href=\"../core/p.html\">(</a> Go back to BEGIN if flag is false ) <br>\n          &nbsp;&nbsp;&nbsp;&nbsp; ... <br>\n          &nbsp;&nbsp; flag ?REPEAT <a href=\"../core/p.html\">(</a> Go back to BEGIN if flag is false ) <br>\n          &nbsp;&nbsp;&nbsp;&nbsp; ... <br>\n          &nbsp;&nbsp; flag <a href=\"../core/UNTIL.html\">UNTIL</a>   <a href=\"../core/p.html\">(</a> Go back to BEGIN if flag is false ) <br>\n          <a href=\"../core/Semi.html\">;</a>\n          \n          </p></div>\n        </div>\n      \n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n      <div class=\"tt\">\n<a href=\"../core/Colon.html\">:</a> ?repeat <br>\n        &nbsp;&nbsp; 0 <strong>CS-PICK</strong> <a href=\"../core/POSTPONE.html\">POSTPONE</a> <a href=\"../core/UNTIL.html\">UNTIL</a> <br>\n        <a href=\"../core/Semi.html\">;</a> <a href=\"../core/IMMEDIATE.html\">IMMEDIATE</a>\n        <p>\n        <a href=\"../core/VARIABLE.html\">VARIABLE</a> pt4\n        </p><p>\n        <a href=\"../core/Colon.html\">:</a> &lt;= <a href=\"../core/more.html\">&gt;</a> <a href=\"../core/ZeroEqual.html\">0=</a> <a href=\"../core/Semi.html\">;</a>\n        </p><p>\n        <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;pt5&nbsp;&nbsp;<a href=\"../core/p.html\">(</a>&nbsp;n1&nbsp;--&nbsp;)&nbsp;<br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pt4&nbsp;<a href=\"../core/Store.html\">!</a>&nbsp;<br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/BEGIN.html\">BEGIN</a>&nbsp;<br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;pt4&nbsp;<a href=\"../core/PlusStore.html\">+!</a>&nbsp;<br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pt4&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;4&nbsp;&lt;=&nbsp;?repeat&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/bs.html\">\\</a>&nbsp;<span class=\"rm\">Back&nbsp;to&nbsp;<a href=\"../core/BEGIN.html\">BEGIN</a>&nbsp;if&nbsp;false</span>&nbsp;<br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;111&nbsp;<br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pt4&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;3&nbsp;&lt;=&nbsp;?repeat&nbsp;<br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;222&nbsp;<br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pt4&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;2&nbsp;&lt;=&nbsp;?repeat&nbsp;<br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;333&nbsp;<br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pt4&nbsp;<a href=\"../core/Fetch.html\">@</a>&nbsp;1&nbsp;<a href=\"../core/Equal.html\">=</a>&nbsp;<br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/UNTIL.html\">UNTIL</a>&nbsp;<br>\n        &nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span>\n        </p><p>\n        <span class=\"tt\">T{ 6&nbsp;pt5 -&gt; 111&nbsp;111&nbsp;222&nbsp;111&nbsp;222&nbsp;333&nbsp;111&nbsp;222&nbsp;333 }T</span>\n        \n        \n        </p></div>\n      "
                    }
                }
            },
            "CS-ROLL": {
                "id": "tools:CS-ROLL",
                "number": "15.6.2.1020",
                "name": "CS-ROLL",
                "english": "c-s-roll",
                "list": "TOOLS EXT",
                "basename": "CS-ROLL",
                "stackEffect": {
                    "html": {
                        "Execution:": "( C: <em>orig<sub>u</sub> | dest<sub>u</sub> orig<sub>u-1</sub> | dest<sub>u-1</sub> ... orig<sub>0</sub> | dest<sub>0</sub></em> -- <em>orig<sub>u-1</sub> | dest<sub>u-1</sub> ... orig<sub>0</sub> | dest<sub>0</sub> orig<sub>u</sub> | dest<sub>u</sub></em> )\n      ( S: <em>u</em> -- )"
                    },
                    "plain": {
                        "Execution:": "( C: origu | destu origu-1 | destu-1 ... orig0 | dest0 -- origu-1 | destu-1 ... orig0 | dest0 origu | destu )\n( S: u -- )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Execution:": {
                        "name": "Execution:",
                        "html": "\n\n\n      ( C: <em>orig<sub>u</sub> | dest<sub>u</sub> orig<sub>u-1</sub> | dest<sub>u-1</sub> ... orig<sub>0</sub> | dest<sub>0</sub></em> -- <em>orig<sub>u-1</sub> | dest<sub>u-1</sub> ... orig<sub>0</sub> | dest<sub>0</sub> orig<sub>u</sub> | dest<sub>u</sub></em> )\n      ( S: <em>u</em> -- )\n      <p>\n      Remove <em>u</em>. Rotate <em>u</em>+1 elements on top of the\n      control-flow stack so that <em>orig<sub>u</sub> | dest<sub>u</sub></em> is on top of\n      the control-flow stack. An ambiguous condition exists if there\n      are less than <em>u</em>+1 items, each of which shall be an\n      <em>orig</em> or <em>dest</em>, on the control-flow stack before\n      <strong>CS-ROLL</strong> is executed.\n      </p><p>\n      If the control-flow stack is implemented using the data stack,\n      <em>u</em> shall be the topmost item on the data stack.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../rationale.html#rat:tools:CS-ROLL\">A.15.6.2.1020 CS-ROLL</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.15.6.2.1020 CS-ROLL -->\n      The intent is to modify the order in which the <em>orig</em>s\n      and <em>dest</em>s on the control-flow stack are to be resolved\n      by subsequent control-flow words. For example, <a href=\"../core/WHILE.html\">WHILE</a>\n      could be implemented in terms of <a href=\"../core/IF.html\">IF</a> and\n      <strong>CS-ROLL</strong>, as follows:\n      <p>\n      \n            </p><div class=\"quote\">\n        <div class=\"tt\">\n<a href=\"../core/Colon.html\">:</a> <a href=\"../core/WHILE.html\">WHILE</a>   <a href=\"../core/p.html\">(</a> dest -- orig dest ) <br>\n          &nbsp;&nbsp; <a href=\"../core/POSTPONE.html\">POSTPONE</a> <a href=\"../core/IF.html\">IF</a>   1 <a href=\"../tools/CS-ROLL.html\">CS-ROLL</a> <br>\n          <a href=\"../core/Semi.html\">;</a> <a href=\"../core/IMMEDIATE.html\">IMMEDIATE</a>\n          \n          </div>\n        </div>\n      \n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n      <div class=\"tt\">\n<span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;?DONE&nbsp;<a href=\"../core/p.html\">(</a>&nbsp;dest&nbsp;--&nbsp;orig&nbsp;dest&nbsp;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/bs.html\">\\</a>&nbsp;<span class=\"rm\">Same&nbsp;as&nbsp;WHILE</span>&nbsp;<br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/POSTPONE.html\">POSTPONE</a>&nbsp;<a href=\"../core/IF.html\">IF</a>&nbsp;1&nbsp;<strong>CS-ROLL</strong>&nbsp;<br>\n        &nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/Semi.html\">;</a>&nbsp;<a href=\"../core/IMMEDIATE.html\">IMMEDIATE</a> -&gt;  }T</span> <br>\n        <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;pt6&nbsp;<br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/toR.html\">&gt;R</a>&nbsp;<br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/BEGIN.html\">BEGIN</a>&nbsp;<br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/RFetch.html\">R@</a>&nbsp;<br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;?DONE&nbsp;<br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/RFetch.html\">R@</a>&nbsp;<br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/Rfrom.html\">R&gt;</a>&nbsp;<a href=\"../core/OneMinus.html\">1-</a>&nbsp;<a href=\"../core/toR.html\">&gt;R</a>&nbsp;<br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/REPEAT.html\">REPEAT</a>&nbsp;<br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/Rfrom.html\">R&gt;</a>&nbsp;<a href=\"../core/DROP.html\">DROP</a>&nbsp;<br>\n        &nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span>\n        <p>\n        <span class=\"tt\">T{ 5&nbsp;pt6 -&gt; 5&nbsp;4&nbsp;3&nbsp;2&nbsp;1 }T</span>\n        </p><p>\n        <a href=\"../core/Colon.html\">:</a> mix_up 2 <strong>CS-ROLL</strong> <a href=\"../core/Semi.html\">;</a> <a href=\"../core/IMMEDIATE.html\">IMMEDIATE</a> &nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">cs-rot</span>\n        </p><p>\n        <a href=\"../core/Colon.html\">:</a> pt7 <a href=\"../core/p.html\">(</a> f3 f2 f1 -- ? ) <br>\n        &nbsp;&nbsp; <a href=\"../core/IF.html\">IF</a> 1111 <a href=\"../core/ROT.html\">ROT</a> <a href=\"../core/ROT.html\">ROT</a>\t&nbsp;&nbsp;\t\t( -- 1111 f3 f2 )\t\t&nbsp;&nbsp;&nbsp;&nbsp;\t( cs: -- o1 ) <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;\t<a href=\"../core/IF.html\">IF</a> 2222 <a href=\"../core/SWAP.html\">SWAP</a>\t\t\t&nbsp;&nbsp;\t( -- 1111 2222 f3 )\t&nbsp;&nbsp;\t( cs: -- o1 o2 ) <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t\t<a href=\"../core/IF.html\">IF</a>\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t( cs: -- o1 o2 o3 ) <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t\t\t3333 mix_up\t\t\t\t\t\t\t( -- 1111 2222 3333 )\t\t( cs: -- o2 o3 o1 ) <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t\t<a href=\"../core/THEN.html\">THEN</a>\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t( cs: -- o2 o3 ) <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t\t4444\t&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Hence failure of first IF comes here and falls through</span> <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;\t<a href=\"../core/THEN.html\">THEN</a>\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t( cs: -- o2 ) <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;\t5555 \t\t&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Failure of 3rd IF comes here</span> <br>\n        &nbsp;&nbsp; <a href=\"../core/THEN.html\">THEN</a>\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t( cs: -- ) <br>\n        &nbsp;&nbsp; 6666 \t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Failure of 2nd IF comes here</span> <br>\n        &nbsp;&nbsp; <a href=\"../core/Semi.html\">;</a>\n        </p><p>\n        <span class=\"tt\">T{ -1&nbsp;-1&nbsp;-1&nbsp;pt7 -&gt; 1111&nbsp;2222&nbsp;3333&nbsp;4444&nbsp;5555&nbsp;6666 }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;0&nbsp;-1&nbsp;-1&nbsp;pt7 -&gt; 1111&nbsp;2222&nbsp;5555&nbsp;6666&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;0&nbsp;&nbsp;0&nbsp;-1&nbsp;pt7 -&gt; 1111&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;6666&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;0&nbsp;&nbsp;0&nbsp;&nbsp;0&nbsp;pt7 -&gt; 0&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;4444&nbsp;5555&nbsp;6666&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }T</span>\n        </p><p>\n        <a href=\"../core/Colon.html\">:</a> [1cs-roll] 1 <strong>CS-ROLL</strong> <a href=\"../core/Semi.html\">;</a> <a href=\"../core/IMMEDIATE.html\">IMMEDIATE</a>\n        </p><p>\n        <span class=\"tt\">T{ <a href=\"../core/Colon.html\">:</a>&nbsp;pt8&nbsp;<br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/toR.html\">&gt;R</a>&nbsp;<br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../tools/AHEAD.html\">AHEAD</a>&nbsp;111&nbsp;<br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/BEGIN.html\">BEGIN</a>&nbsp;222&nbsp;<br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1cs-roll]&nbsp;<br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/THEN.html\">THEN</a>&nbsp;<br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;333&nbsp;<br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/Rfrom.html\">R&gt;</a>&nbsp;<a href=\"../core/OneMinus.html\">1-</a>&nbsp;<a href=\"../core/toR.html\">&gt;R</a>&nbsp;<br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/RFetch.html\">R@</a>&nbsp;<a href=\"../core/Zeroless.html\">0&lt;</a>&nbsp;<br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/UNTIL.html\">UNTIL</a>&nbsp;<br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/Rfrom.html\">R&gt;</a>&nbsp;<a href=\"../core/DROP.html\">DROP</a>&nbsp;<br>\n        &nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/Semi.html\">;</a> -&gt;  }T</span>\n        </p><p>\n        <span class=\"tt\">T{ 1&nbsp;pt8 -&gt; 333&nbsp;222&nbsp;333 }T</span>\n        \n        \n        </p></div>\n      "
                    }
                }
            },
            "DUMP": {
                "id": "tools:DUMP",
                "number": "15.6.1.1280",
                "name": "DUMP",
                "english": " ",
                "list": "TOOLS",
                "basename": "DUMP",
                "stackEffect": {
                    "html": {
                        " ": "( <em>addr u</em> -- )"
                    },
                    "plain": {
                        " ": "( addr u -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>addr u</em> -- )\n      <p>\n      Display the contents of <em>u</em> consecutive addresses starting\n      at <em>addr</em>. The format of the display is implementation\n      dependent.\n      </p><p>\n      <strong>DUMP</strong> may be implemented using pictured numeric output\n      words. Consequently, its use may corrupt the transient region\n      identified by <a href=\"../core/num-end.html\">#&gt;</a>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:transient\">3.3.3.6 Other transient regions</a></strong>.\n      \n      "
                    }
                }
            },
            "DotS": {
                "id": "tools:.S",
                "number": "15.6.1.0220",
                "name": ".S",
                "english": "dot-s",
                "list": "TOOLS",
                "basename": "DotS",
                "stackEffect": {
                    "html": {
                        " ": "( -- )"
                    },
                    "plain": {
                        " ": "( -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- )\n      <p>\n      Copy and display the values currently on the data stack. The\n      format of the display is implementation-dependent.\n      </p><p>\n      <strong>.S</strong> may be implemented using pictured numeric output words.\n      Consequently, its use may corrupt the transient region identified\n      by <a href=\"../core/num-end.html\">#&gt;</a>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:transient\">3.3.3.6 Other transient regions</a></strong>,\n      <a href=\"../rationale.html#rat:tools:.S\">A.15.6.1.0220 .S</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.15.6.1.0220 .S -->\n      <strong>.S</strong> is a debugging convenience found on almost\n      all Forth systems. It is universally mentioned in Forth texts.\n      \n      \n      "
                    }
                }
            },
            "EDITOR": {
                "id": "tools:EDITOR",
                "number": "15.6.2.1300",
                "name": "EDITOR",
                "english": " ",
                "list": "TOOLS EXT",
                "basename": "EDITOR",
                "stackEffect": {
                    "html": {
                        " ": "( -- )"
                    },
                    "plain": {
                        " ": "( -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- )\n      <p>\n      Replace the first word list in the search order with the\n      <strong>EDITOR</strong> word list.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../search.html#wordlist:search\">16 The optional Search-Order word set</a></strong>.\n      \n      "
                    }
                }
            },
            "FORGET": {
                "id": "tools:FORGET",
                "number": "15.6.2.1580",
                "name": "FORGET",
                "english": " ",
                "list": "TOOLS EXT",
                "basename": "FORGET",
                "stackEffect": {
                    "html": {
                        " ": "( <em>\"&lt;spaces&gt;name\"</em> -- )"
                    },
                    "plain": {
                        " ": "( \"<spaces>name\" -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>\"&lt;spaces&gt;name\"</em> -- )\n      <p>\n      Skip leading space delimiters. Parse <em>name</em> delimited by a\n      space. Find <em>name</em>, then delete <em>name</em> from the\n      dictionary along with all words added to the dictionary after\n      <em>name</em>. An ambiguous condition exists if <em>name</em> cannot\n      be found.\n      </p><p>\n      If the Search-Order word set is present, <strong>FORGET</strong> searches\n      the compilation word list. An ambiguous condition exists if the\n      compilation word list is deleted.\n      </p><p>\n      An ambiguous condition exists if <strong>FORGET</strong> removes a word\n      required for correct execution.\n      </p><p>\n        \n      </p>"
                    },
                    "Note:": {
                        "name": "Note:",
                        "html": "\n\n This word is obsolescent and is included as a concession to\n      existing implementations.\n      <p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:parsing\">3.4.1 Parsing</a></strong>,\n      <a href=\"../rationale.html#rat:tools:FORGET\">A.15.6.2.1580 FORGET</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.15.6.2.1580 FORGET -->\n      Typical use:\n      ... <strong>FORGET</strong> <em>name</em> ...\n      <p>\n      <strong>FORGET</strong> <em>name</em> tries to infer the previous dictionary\n      state from <em>name</em>; this is not always possible.  As a\n      consequence, <strong>FORGET</strong> <em>name</em> removes <em>name</em> and\n      all following words in the name space.\n      </p><p>\n      See <a href=\"../rationale.html#rat:core:MARKER\">A.6.2.1850 MARKER</a>.\n      \n      \n      </p>"
                    }
                }
            },
            "NAMEtoCOMPILE": {
                "id": "tools:NAMEtoCOMPILE",
                "number": "15.6.2.1909.10",
                "name": "NAME>COMPILE",
                "english": "name-to-compile",
                "list": "TOOLS EXT",
                "basename": "NAMEtoCOMPILE",
                "stackEffect": {
                    "html": {
                        " ": "( <em>nt</em> -- <em>x xt</em> )"
                    },
                    "plain": {
                        " ": "( nt -- x xt )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>nt</em> -- <em>x xt</em> )\n      <p>\n      <em>x xt</em> represents the compilation semantics of the word\n      <em>nt</em>.  The returned <em>xt</em> has the stack effect\n      ( <em>i * x x</em> -- <em>j * x</em> ).  Executing <em>xt</em> consumes\n      <em>x</em> and performs the compilation semantics of the word\n      represented by <em>nt</em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n\n      <a href=\"../rationale.html#rat:tools:NAMEtoCOMPILE\">A.15.6.2.1909.10 NAME&gt;COMPILE</a>,\n      <a href=\"../tools/TRAVERSE-WORDLIST.html\">15.6.2.2297 TRAVERSE-WORDLIST</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n\n      In a traditional <em>xt</em>+immediate-flag system, the\n      <em>x xt</em> returned by <strong>NAME&gt;COMPILE</strong> is\n      typically <em>xt1 xt2</em>, where <em>xt1</em> is the\n      <em>xt</em> of the word under consideration, and\n      <em>xt2</em> is the <em>xt</em> of <a href=\"../core/EXECUTE.html\">EXECUTE</a>\n      (for immediate words) or <a href=\"../core/COMPILEComma.html\">COMPILE,</a> (for words\n      with default compilation semantics).\n      <p>\n      If you want to <a href=\"../core/POSTPONE.html\">POSTPONE</a> <em>nt</em>, you can\n      do so with\n      </p><p>\n            </p><div class=\"quote\">\n        <div class=\"tt\">\n<strong>NAME&gt;COMPILE</strong> <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../core/POSTPONE.html\">POSTPONE</a>\n          <a href=\"../core/LITERAL.html\">LITERAL</a> <a href=\"../core/COMPILEComma.html\">COMPILE,</a>\n          \n          </div>\n        </div>\n       \n      \n      "
                    }
                }
            },
            "NAMEtoINTERPRET": {
                "id": "tools:NAMEtoINTERPRET",
                "number": "15.6.2.1909.20",
                "name": "NAME>INTERPRET",
                "english": "name-to-interpret",
                "list": "TOOLS EXT",
                "basename": "NAMEtoINTERPRET",
                "stackEffect": {
                    "html": {
                        " ": "( <em>nt</em> -- <em>xt | 0</em> )"
                    },
                    "plain": {
                        " ": "( nt -- xt | 0 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>nt</em> -- <em>xt | 0</em> )\n      <p>\n      <em>xt</em> represents the interpretation semantics of the word\n      <em>nt</em>.  If <em>nt</em> has no interpretation semantics,\n      <strong>NAME&gt;INTERPRET</strong> returns 0.\n      </p><p>\n        \n      </p>"
                    },
                    "Note:": {
                        "name": "Note:",
                        "html": "\n\n\n      This standard does not define the interpretation semantics of\n      some words, but systems are allowed to do so.\n        \n      "
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../tools/TRAVERSE-WORDLIST.html\">15.6.2.2297 TRAVERSE-WORDLIST</a></strong>.\n      \n      "
                    }
                }
            },
            "NAMEtoSTRING": {
                "id": "tools:NAMEtoSTRING",
                "number": "15.6.2.1909.40",
                "name": "NAME>STRING",
                "english": "name-to-string",
                "list": "TOOLS EXT",
                "basename": "NAMEtoSTRING",
                "stackEffect": {
                    "html": {
                        " ": "( <em>nt</em> -- <em>c-addr u</em> )"
                    },
                    "plain": {
                        " ": "( nt -- c-addr u )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>nt</em> -- <em>c-addr u</em> )\n      <p>\n      <strong>NAME&gt;STRING</strong> returns the name of the word <em>nt</em>\n      in the character string <em>c-addr u</em>.  The case of the characters\n      in the string is implementation-dependent.  The buffer containing\n      <em>c-addr u</em> may be transient and valid until the next invocation\n      of <strong>NAME&gt;STRING</strong>. A program shall not write into the buffer\n      containing the resulting string.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../tools/TRAVERSE-WORDLIST.html\">15.6.2.2297 TRAVERSE-WORDLIST</a>.\n      \n      "
                    }
                }
            },
            "NRfrom": {
                "id": "tools:NRfrom",
                "number": "15.6.2.1940",
                "name": "NR>",
                "english": "n-r-from",
                "list": "TOOLS EXT",
                "basename": "NRfrom",
                "stackEffect": {
                    "html": {
                        "Execution:": "( -- <em>i * x +n</em> ) ( R: <em>j * x +n</em> -- )"
                    },
                    "plain": {
                        "Execution:": "( -- i * x +n ) ( R: j * x +n -- )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Execution:": {
                        "name": "Execution:",
                        "html": "\n\n ( -- <em>i * x +n</em> ) ( R: <em>j * x +n</em> -- )\n      <p>\n      Retrieve the items previously stored by an invocation of <a href=\"../tools/NtoR.html\">N&gt;R</a>.\n      <em>n</em> is the number of items placed on the data stack. It is an\n      ambiguous condition if <strong>NR&gt;</strong> is used with data not stored by\n      <a href=\"../tools/NtoR.html\">N&gt;R</a>. \n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../tools/NtoR.html\">15.6.2.1908 N&gt;R</a>, <a href=\"../rationale.html#rat:tools:NtoR\">A.15.6.2.1908 N&gt;R</a>.\n      <p>\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n\n      <span class=\"rm\">This implementation depends on the return address being on\n      the return stack.</span>\n      <p>\n      </p><div class=\"tabbing\">\n        <a href=\"../core/Colon.html\">:</a> <strong>NR&gt;</strong> <a href=\"../core/bs.html\">\\</a> -- xn .. x1 N ; R: x1 .. xn N -- <br>\n        <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Pull N items and count off the return stack.</span>  <br>\n        &nbsp;&nbsp;&nbsp;<a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../core/toR.html\">&gt;R</a> <a href=\"../core/DUP.html\">DUP</a> <br>\n        &nbsp;&nbsp;&nbsp;<a href=\"../core/BEGIN.html\">BEGIN</a>  <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/DUP.html\">DUP</a>  <br>\n        &nbsp;&nbsp;&nbsp;<a href=\"../core/WHILE.html\">WHILE</a>  <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../core/toR.html\">&gt;R</a> -ROT <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/OneMinus.html\">1-</a>  <br>\n        &nbsp;&nbsp;&nbsp;<a href=\"../core/REPEAT.html\">REPEAT</a> <br>\n        &nbsp;&nbsp;&nbsp;<a href=\"../core/DROP.html\">DROP</a>  <br>\n        <a href=\"../core/Semi.html\">;</a>\n        <br>\n        \n        </div>\n      \n      \n      "
                    }
                }
            },
            "NtoR": {
                "id": "tools:NtoR",
                "number": "15.6.2.1908",
                "name": "N>R",
                "english": "n-to-r",
                "list": "TOOLS EXT",
                "basename": "NtoR",
                "stackEffect": {
                    "html": {
                        "Execution:": "( <em>i * n +n</em> -- ) ( R: -- <em>j * x +n</em> )"
                    },
                    "plain": {
                        "Execution:": "( i * n +n -- ) ( R: -- j * x +n )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Execution:": {
                        "name": "Execution:",
                        "html": "\n\n ( <em>i * n +n</em> -- ) ( R: -- <em>j * x +n</em> )\n      <p>\n      Remove <em>n</em>+1 items from the data stack and store them for later\n      retrieval by <a href=\"../tools/NRfrom.html\">NR&gt;</a>. The return stack may be used to store the\n      data. Until this data has been retrieved by <a href=\"../tools/NRfrom.html\">NR&gt;</a>:\n      </p><ul>\n      <li> this data will not be overwritten by a subsequent invocation of\n      <strong>N&gt;R</strong> and\n      </li>\n      <li> a program may not access data placed on the return stack before\n      the invocation of <strong>N&gt;R</strong>.\n      </li>\n</ul> \n      <p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/SAVE-INPUT.html\">6.2.2182 SAVE-INPUT</a>,\n      <a href=\"../core/RESTORE-INPUT.html\">6.2.2148 RESTORE-INPUT</a>,\n      <a href=\"../search/GET-ORDER.html\">16.6.1.1647 GET-ORDER</a>, \n      <a href=\"../search/SET-ORDER.html\">16.6.1.2197 SET-ORDER</a>.\n        \n      "
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n\n      An implementation may store the stack items in any manner.  It may\n      store them on the return stack, in any order.  A stack-constrained\n      system may prefer to use a buffer to store the items and place a\n      reference to the buffer on the return stack.\n      <p>\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n\n      <span class=\"rm\">This implementation depends on the return address being on\n      the return stack.</span>\n      <p>\n      </p><div class=\"tabbing\">\n        <a href=\"../core/Colon.html\">:</a> <strong>N&gt;R</strong>           <a href=\"../core/bs.html\">\\</a> xn .. x1 N -- ; R: -- x1 .. xn n <br>\n        <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Transfer N items and count to the return stack.</span>  <br>\n        &nbsp;&nbsp;&nbsp;<a href=\"../core/DUP.html\">DUP</a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> xn .. x1 N N -- <br>\n        &nbsp;&nbsp;&nbsp;<a href=\"../core/BEGIN.html\">BEGIN</a>  <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/DUP.html\">DUP</a>  <br>\n        &nbsp;&nbsp;&nbsp;<a href=\"../core/WHILE.html\">WHILE</a>  <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/ROT.html\">ROT</a> <a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../core/toR.html\">&gt;R</a> <a href=\"../core/toR.html\">&gt;R</a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/bs.html\">\\</a> xn .. N N -- ; R: .. x1 -- <br>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"../core/OneMinus.html\">1-</a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> xn .. N 'N -- ; R: .. x1 --  <br>\n        &nbsp;&nbsp;&nbsp;<a href=\"../core/REPEAT.html\">REPEAT</a> <br>\n        &nbsp;&nbsp;&nbsp;<a href=\"../core/DROP.html\">DROP</a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> N -- ; R: x1 .. xn -- <br>\n        &nbsp;&nbsp;&nbsp;<a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../core/toR.html\">&gt;R</a> <a href=\"../core/toR.html\">&gt;R</a>  <br>\n        <a href=\"../core/Semi.html\">;</a>\n        <br>\n        \n        </div>\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      <a href=\"../core/Colon.html\">:</a> TNR1 <strong>N&gt;R</strong> <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../tools/NRfrom.html\">NR&gt;</a> <a href=\"../core/Semi.html\">;</a> <br>\n      <span class=\"tt\">T{ 1&nbsp;2&nbsp;10&nbsp;20&nbsp;30&nbsp;3&nbsp;TNR1 -&gt; 2&nbsp;1&nbsp;10&nbsp;20&nbsp;30&nbsp;3 }T</span>\n      <p>\n      <a href=\"../core/Colon.html\">:</a> TNR2 <strong>N&gt;R</strong> <strong>N&gt;R</strong> <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../tools/NRfrom.html\">NR&gt;</a> <a href=\"../tools/NRfrom.html\">NR&gt;</a> <a href=\"../core/Semi.html\">;</a> <br>\n      <span class=\"tt\">T{ 1&nbsp;2&nbsp;10&nbsp;20&nbsp;30&nbsp;3&nbsp;40&nbsp;50&nbsp;2&nbsp;TNR2 -&gt; 2&nbsp;1&nbsp;10&nbsp;20&nbsp;30&nbsp;3&nbsp;40&nbsp;50&nbsp;2 }T</span>\n      \n      \n      </p>"
                    }
                }
            },
            "SEE": {
                "id": "tools:SEE",
                "number": "15.6.1.2194",
                "name": "SEE",
                "english": " ",
                "list": "TOOLS",
                "basename": "SEE",
                "stackEffect": {
                    "html": {
                        " ": "( <em>\"&lt;spaces&gt;name\"</em> -- )"
                    },
                    "plain": {
                        " ": "( \"<spaces>name\" -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>\"&lt;spaces&gt;name\"</em> -- )\n      <p>\n      Display a human-readable representation of the named word's\n      definition. The source of the representation (object-code\n      decompilation, source block, etc.) and the particular form of\n      the display is implementation defined.\n      </p><p>\n      <strong>SEE</strong> may be implemented using pictured numeric output\n      words. Consequently, its use may corrupt the transient region\n      identified by <a href=\"../core/num-end.html\">#&gt;</a>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:transient\">3.3.3.6 Other transient regions</a></strong>,\n      <a href=\"../rationale.html#rat:tools:SEE\">A.15.6.1.2194 SEE</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.15.6.1.2194 SEE -->\n      <strong>SEE</strong> acts as an on-line form of documentation of\n      words, allowing modification of words by decompiling and\n      regenerating with appropriate changes.\n      \n      \n      "
                    }
                }
            },
            "STATE": {
                "id": "tools:STATE",
                "number": "15.6.2.2250",
                "name": "STATE",
                "english": " ",
                "list": "TOOLS EXT",
                "basename": "STATE",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>a-addr</em> )"
                    },
                    "plain": {
                        " ": "( -- a-addr )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>a-addr</em> )\n      <p>\n      Extend the semantics of <a href=\"../core/STATE.html\">6.1.2250 STATE</a> to allow\n      <a href=\"../tools/SemiCODE.html\">;CODE</a> to change the value in <strong>STATE</strong>. A program\n      shall not directly alter the contents of <strong>STATE</strong>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:command\">3.4 The Forth text interpreter</a></strong>,\n      <a href=\"../core/Colon.html\">6.1.0450 :</a>,\n      <a href=\"../core/Semi.html\">6.1.0460 ;</a>,\n      <a href=\"../core/ABORT.html\">6.1.0670 ABORT</a>, <br>\n      <a href=\"../core/QUIT.html\">6.1.2050 QUIT</a>,\n      <a href=\"../core/STATE.html\">6.1.2250 STATE</a>,\n      <a href=\"../core/Bracket.html\">6.1.2500 [</a>,\n      <a href=\"../right-bracket.html\">6.1.2540 ]</a>,\n      <a href=\"../core/ColonNONAME.html\">6.2.0455 :NONAME</a>, <br>\n      <a href=\"../tools/SemiCODE.html\">15.6.2.0470 ;CODE</a>.\n      \n      "
                    }
                }
            },
            "SYNONYM": {
                "id": "tools:SYNONYM",
                "number": "15.6.2.2264",
                "name": "SYNONYM",
                "english": " ",
                "list": "TOOLS EXT",
                "basename": "SYNONYM",
                "stackEffect": {
                    "html": {
                        " ": "( <em>\"&lt;spaces&gt;newname\" \"&lt;spaces&gt;oldname\"</em> -- )",
                        "newname interpretation:": "( <em>i * x</em> -- <em>j * x</em> ) <br>\n      Perform the interpretation semantics of <em>oldname</em>.",
                        "newname compilation:": "( <em>i * x</em> -- <em>j * x</em> ) <br>\n      Perform the compilation semantics of <em>oldname</em>."
                    },
                    "plain": {
                        " ": "( \"<spaces>newname\" \"<spaces>oldname\" -- )",
                        "newname interpretation:": "( i * x -- j * x ) \nPerform the interpretation semantics of oldname.",
                        "newname compilation:": "( i * x -- j * x ) \nPerform the compilation semantics of oldname."
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>\"&lt;spaces&gt;newname\" \"&lt;spaces&gt;oldname\"</em> -- )\n      <p>\n      For both strings skip leading space delimiters.  Parse <em>newname</em>\n      and <em>oldname</em> delimited by a space.  Create a definition for\n      <em>newname</em> with the semantics defined below.\n      <em>Newname</em> may be the same as <em>oldname</em>;\n      when looking up <em>oldname</em>, <em>newname</em> shall not be found.\n      </p><p>\n      An ambiguous conditions exists if <em>oldname</em> can not be found or\n      <a href=\"../core/IMMEDIATE.html\">IMMEDIATE</a> is applied to <em>newname</em>.\n      </p><p>\n        \n      </p>"
                    },
                    "newname interpretation:": {
                        "name": "newname interpretation:",
                        "html": "\n\n\n      ( <em>i * x</em> -- <em>j * x</em> ) <br>\n      Perform the interpretation semantics of <em>oldname</em>.\n      <p>\n        \n      </p>"
                    },
                    "newname compilation:": {
                        "name": "newname compilation:",
                        "html": "\n\n\n      ( <em>i * x</em> -- <em>j * x</em> ) <br>\n      Perform the compilation semantics of <em>oldname</em>.\n      <p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/IMMEDIATE.html\">6.1.1710 IMMEDIATE</a>.\n      <p>\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n\n            <div class=\"rm\">\nThe implementation of <strong>SYNONYM</strong> requires detailed knowledge\n        of the host implementation, which is one reason why it should be\n        standardized.  The implementation below is imperfect and specific\n        to VFX Forth, in particular <code>HIDE</code>, <code>REVEAL</code> and\n        <code>IMMEDIATE?</code> are non-standard words.\n        <p>\n                </p><div class=\"quote\">\n          <div class=\"tt\">\n<a href=\"../core/Colon.html\">:</a> <strong>SYNONYM</strong> <a href=\"../core/bs.html\">\\</a> \"newname\" \"oldname\" -- <br>\n            <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">Create a new definition which redirects to an existing one.</span> <br>\n            &nbsp;&nbsp; <a href=\"../core/CREATE.html\">CREATE</a> <a href=\"../core/IMMEDIATE.html\">IMMEDIATE</a> <br>\n            &nbsp;&nbsp;&nbsp;&nbsp; HIDE <a href=\"../core/Tick.html\">'</a> <a href=\"../core/Comma.html\">,</a> REVEAL <br>\n            &nbsp;&nbsp; <a href=\"../core/DOES.html\">DOES&gt;</a> <br>\n            &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/Fetch.html\">@</a>  <a href=\"../tools/STATE.html\">STATE</a> <a href=\"../core/Fetch.html\">@</a> <a href=\"../core/ZeroEqual.html\">0=</a> <a href=\"../core/OVER.html\">OVER</a> IMMEDIATE? <a href=\"../core/OR.html\">OR</a> <br>\n            &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/IF.html\">IF</a> <a href=\"../core/EXECUTE.html\">EXECUTE</a> <a href=\"../core/ELSE.html\">ELSE</a> <a href=\"../core/COMPILEComma.html\">COMPILE,</a> <a href=\"../core/THEN.html\">THEN</a> <br>\n            <a href=\"../core/Semi.html\">;</a>\n            \n            </div>\n          </div>\n        \n        \n        </div>\n      "
                    }
                }
            },
            "SemiCODE": {
                "id": "tools:;CODE",
                "number": "15.6.2.0470",
                "name": ";CODE",
                "english": "semicolon-code",
                "list": "TOOLS EXT",
                "basename": "SemiCODE",
                "stackEffect": {
                    "html": {
                        "Compilation:": "( C: <em>colon-sys</em> -- )",
                        "Run-time:": "( -- )\n      ( R: <em>nest-sys</em> -- )",
                        "name Execution:": "( <em>i * x</em> -- <em>j * x</em> )"
                    },
                    "plain": {
                        "Compilation:": "( C: colon-sys -- )",
                        "Run-time:": "( -- )\n( R: nest-sys -- )",
                        "name Execution:": "( i * x -- j * x )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n\n      ( C: <em>colon-sys</em> -- )\n      <p>\n      Append the run-time semantics below to the current definition.\n      End the current definition, allow it to be found in the\n      dictionary, and enter interpretation state, consuming\n      <em>colon-sys</em>.\n      </p><p>\n      Subsequent characters in the parse area typically represent\n      source code in a programming language, usually some form of\n      assembly language. Those characters are processed in an\n      implementation-defined manner, generating the corresponding\n      machine code. The process continues, refilling the input buffer\n      as needed, until an implementation-defined ending sequence is\n      processed.\n      </p><p>\n        \n      </p>"
                    },
                    "Run-time:": {
                        "name": "Run-time:",
                        "html": "\n\n\n      ( -- )\n      ( R: <em>nest-sys</em> -- )\n      <p>\n      Replace the execution semantics of the most recent definition\n      with the <em>name</em> execution semantics given below. Return\n      control to the calling definition specified by <em>nest-sys</em>.\n      An ambiguous condition exists if the most recent definition was\n      not defined with <a href=\"../core/CREATE.html\">CREATE</a> or a user-defined word that\n      calls <a href=\"../core/CREATE.html\">CREATE</a>.\n      </p><p>\n        \n      </p>"
                    },
                    "name Execution:": {
                        "name": "name Execution:",
                        "html": "\n\n\n      ( <em>i * x</em> -- <em>j * x</em> )\n      <p>\n      Perform the machine code sequence that was generated following\n      <strong>;CODE</strong>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/DOES.html\">6.1.1250 DOES&gt;</a>,\n      <a href=\"../rationale.html#rat:tools:;CODE\">A.15.6.2.0470 ;CODE</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.15.6.2.0470 ;CODE -->\n      Typical use:\n      <a href=\"../core/Colon.html\">:</a> <code>namex</code>\n      ... &lt;<em>create</em>&gt; ...\n      <strong>;CODE</strong> ...\n      <p>\n      where <code>namex</code> is a defining word, and &lt;<em>create</em>&gt; is\n      <a href=\"../core/CREATE.html\">CREATE</a> or any user defined word that calls\n      <a href=\"../core/CREATE.html\">CREATE</a>.\n      \n      \n      </p>"
                    }
                }
            },
            "TRAVERSE-WORDLIST": {
                "id": "tools:TRAVERSE-WORDLIST",
                "number": "15.6.2.2297",
                "name": "TRAVERSE-WORDLIST",
                "english": " ",
                "list": "TOOLS EXT",
                "basename": "TRAVERSE-WORDLIST",
                "stackEffect": {
                    "html": {
                        " ": "( <em>i * x xt wid</em> -- <em>j * x</em> )"
                    },
                    "plain": {
                        " ": "( i * x xt wid -- j * x )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>i * x xt wid</em> -- <em>j * x</em> )\n      <p>\n      Remove <em>wid</em> and <em>xt</em> from the stack.  Execute\n      <em>xt</em> once for every word in the wordlist <em>wid</em>,\n      passing the name token <em>nt</em> of the word to <em>xt</em>,\n      until the wordlist is exhausted or until <em>xt</em> returns false.\n      </p><p>\n      The invoked <em>xt</em> has the stack effect\n      ( <em>k * x nt</em> -- <em>l * x flag</em> ).\n      </p><p>\n      If <em>flag</em> is true, <strong>TRAVERSE-WORDLIST</strong> will continue\n      with the next name, otherwise it will return.  <strong>TRAVERSE-WORDLIST</strong>\n      does not put any items other than <em>nt</em> on the stack when\n      calling <em>xt</em>, so that <em>xt</em> can access and modify the\n      rest of the stack.\n      </p><p>\n      <strong>TRAVERSE-WORDLIST</strong> may visit words in any order, with one\n      exception: words with the same name are called in the order\n      newest-to-oldest (possibly with other words in between).\n      </p><p>\n      An ambiguous condition exists if words are added to or deleted from\n      the wordlist <em>wid</em> during the execution of\n      <strong>TRAVERSE-WORDLIST</strong>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../rationale.html#rat:tools:TRAVERSE-WORDLIST\">A.15.6.2.2297 TRAVERSE-WORDLIST</a>,\n      <a href=\"../tools/NAMEtoSTRING.html\">15.6.2.1909.40 NAME&gt;STRING</a>, <br>\n      <a href=\"../tools/NAMEtoINTERPRET.html\">15.6.2.1909.20 NAME&gt;INTERPRET</a>,\n      <a href=\"../tools/NAMEtoCOMPILE.html\">15.6.2.1909.10 NAME&gt;COMPILE</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n\n      Typical use:\n      <p>\n            </p><div class=\"quote\">\n        <div class=\"tt\">\n<a href=\"../core/Colon.html\">:</a> WORDS-COUNT <a href=\"../core/p.html\">(</a> x nt -- x' f )\n          <a href=\"../core/DROP.html\">DROP</a> <a href=\"../core/OnePlus.html\">1+</a> <a href=\"../core/TRUE.html\">TRUE</a>\n          <a href=\"../core/Semi.html\">;</a>\n          <br>\n          0 <a href=\"../core/Tick.html\">'</a> WORDS-COUNT\n          <a href=\"../search/FORTH-WORDLIST.html\">FORTH-WORDLIST</a>\n          <strong>TRAVERSE-WORDLIST</strong> <a href=\"../core/d.html\">.</a>\n          \n          </div>\n        </div>\n      <p>\n      prints a count of the number of words in the <a href=\"../search/FORTH-WORDLIST.html\">FORTH-WORDLIST</a>.\n      </p><p>\n            </p><div class=\"quote\">\n        <div class=\"tt\">\n<a href=\"../core/Colon.html\">:</a> ALL-WORDS\n          <a href=\"../tools/NAMEtoSTRING.html\">NAME&gt;STRING</a> <a href=\"../core/CR.html\">CR</a> <a href=\"../core/TYPE.html\">TYPE</a> <a href=\"../core/TRUE.html\">TRUE</a>\n          <a href=\"../core/Semi.html\">;</a>\n          <br>\n          <a href=\"../core/Tick.html\">'</a> ALL-WORDS \n          <a href=\"../search/GET-CURRENT.html\">GET-CURRENT</a>\n          <strong>TRAVERSE-WORDLIST</strong>\n          \n          </div>\n        </div>\n      prints the names of words in the current compilation wordlist.\n      <p>\n            </p><div class=\"quote\">\n        <div class=\"tt\">\n<a href=\"../core/Colon.html\">:</a> CONTAINS-STRING <br>\n          &nbsp;&nbsp; \t\t\t<a href=\"../tools/NAMEtoSTRING.html\">NAME&gt;STRING</a> <a href=\"../core/TwoOVER.html\">2OVER</a>\n          <a href=\"../string/SEARCH.html\">SEARCH</a> <a href=\"../core/IF.html\">IF</a>\n          <a href=\"../core/CR.html\">CR</a> <a href=\"../core/TYPE.html\">TYPE</a>\n          <a href=\"../core/THEN.html\">THEN</a> <a href=\"../core/FALSE.html\">FALSE</a> <a href=\"../core/Semi.html\">;</a> <br>\n          <a href=\"../core/Sq.html\">S\"</a> COM\" <a href=\"../core/Tick.html\">'</a> CONTAINS-STRING\n          <a href=\"../search/GET-CURRENT.html\">GET-CURRENT</a> <strong>TRAVERSE-WORDLIST</strong>\n          \n          </div>\n        </div>\n      prints the name of a word containing the string\n      \"COM\", if it exists, and then terminates.\n      \n      \n      "
                    }
                }
            },
            "WORDS": {
                "id": "tools:WORDS",
                "number": "15.6.1.2465",
                "name": "WORDS",
                "english": " ",
                "list": "TOOLS",
                "basename": "WORDS",
                "stackEffect": {
                    "html": {
                        " ": "( -- )"
                    },
                    "plain": {
                        " ": "( -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- )\n      <p>\n      List the definition names in the first word list of the search\n      order. The format of the display is implementation-dependent.\n      </p><p>\n      <strong>WORDS</strong> may be implemented using pictured numeric output\n      words. Consequently, its use may corrupt the transient region\n      identified by <a href=\"../core/num-end.html\">#&gt;</a>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:transient\">3.3.3.6 Other transient regions</a></strong>,\n      <a href=\"../rationale.html#rat:tools:WORDS\">A.15.6.1.2465 WORDS</a>.\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n <!-- A.15.6.1.2465 WORDS -->\n      <strong>WORDS</strong> is a debugging convenience found on almost\n      all Forth systems. It is universally referred to in Forth texts.\n      \n      \n      "
                    }
                }
            },
            "q": {
                "id": "tools:q",
                "number": "15.6.1.0600",
                "name": "?",
                "english": "question",
                "list": "TOOLS",
                "basename": "q",
                "stackEffect": {
                    "html": {
                        " ": "( <em>a-addr</em> -- )"
                    },
                    "plain": {
                        " ": "( a-addr -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>a-addr</em> -- )\n      <p>\n      Display the value stored at <em>a-addr</em>.\n      </p><p>\n      <strong>?</strong> may be implemented using pictured numeric output words.\n      Consequently, its use may corrupt the transient region identified\n      by <a href=\"../core/num-end.html\">#&gt;</a>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:transient\">3.3.3.6 Other transient regions</a></strong>.\n      \n      "
                    }
                }
            }
        }
    },
    "xchar": {
        "name": "xchar",
        "words": {
            "BracketCHAR": {
                "id": "xchar:[CHAR]",
                "number": "18.6.2.2520",
                "name": "[CHAR]",
                "english": "bracket-char",
                "list": "XCHAR EXT",
                "basename": "BracketCHAR",
                "stackEffect": {
                    "html": {
                        "Compilation:": "( <em>\"&lt;spaces&gt;name\"</em> -- )",
                        "Run-time:": "( -- <em>xchar</em> )"
                    },
                    "plain": {
                        "Compilation:": "( \"<spaces>name\" -- )",
                        "Run-time:": "( -- xchar )"
                    }
                },
                "sections": {
                    "Interpretation:": {
                        "name": "Interpretation:",
                        "html": "\n\n\n      Interpretation semantics for this word are undefined.\n      <p>\n        \n      </p>"
                    },
                    "Compilation:": {
                        "name": "Compilation:",
                        "html": "\n\n ( <em>\"&lt;spaces&gt;name\"</em> -- )\n      <p>\n      Skip leading space delimiters.  Parse <em>name</em> delimited by a space.\n      Append the run-time semantics given below to the current definition.\n      </p><p>\n        \n      </p>"
                    },
                    "Run-time:": {
                        "name": "Run-time:",
                        "html": "\n\n ( -- <em>xchar</em> )\n      <p>\n      Place <em>xchar</em>, the value of the first xchar of <em>name</em>, on\n      the stack.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/BracketCHAR.html\">6.1.2520 [CHAR]</a>\n      <p>\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n\n      <a href=\"../core/Colon.html\">:</a> <strong>[CHAR]</strong> <a href=\"../core/p.html\">(</a> \"name\" -- rt:xchar ) <br>\n      &nbsp;&nbsp; <a href=\"../xchar/CHAR.html\">CHAR</a> <a href=\"../core/POSTPONE.html\">POSTPONE</a> <a href=\"../core/LITERAL.html\">LITERAL</a> <a href=\"../core/Semi.html\">;</a> <a href=\"../core/IMMEDIATE.html\">IMMEDIATE</a>\n      \n      \n      "
                    }
                }
            },
            "CHAR": {
                "id": "xchar:CHAR",
                "number": "18.6.2.0895",
                "name": "CHAR",
                "english": " ",
                "list": "XCHAR EXT",
                "basename": "CHAR",
                "stackEffect": {
                    "html": {
                        " ": "( <em>\"&lt;spaces&gt;name\"</em> -- <em>xchar</em> )"
                    },
                    "plain": {
                        " ": "( \"<spaces>name\" -- xchar )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>\"&lt;spaces&gt;name\"</em> -- <em>xchar</em> )\n      <p>\n      Skip leading space delimiters.  Parse <em>name</em> delimited by a space.\n      Put the value of its first <em>xchar</em> onto the stack.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/CHAR.html\">6.1.0895 CHAR</a>\n      <p>\n        \n      </p>"
                    },
                    "Rationale:": {
                        "name": "Rationale:",
                        "html": "\n\n\n      The behavior of the extended version of <strong>CHAR</strong> is fully backward\n      compatible with <a href=\"../core/CHAR.html\">6.1.0895 CHAR</a>.\n        \n      "
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n\n      <a href=\"../core/Colon.html\">:</a> <strong>CHAR</strong> <a href=\"../core/p.html\">(</a> \"name\" -- xchar )\n      <a href=\"../core/BL.html\">BL</a> <a href=\"../core/WORD.html\">WORD</a> <a href=\"../core/COUNT.html\">COUNT</a> <a href=\"../core/DROP.html\">DROP</a> <a href=\"../xchar/XCFetchPlus.html\">XC@+</a> <a href=\"../core/NIP.html\">NIP</a> <a href=\"../core/Semi.html\">;</a>\n      \n      \n      "
                    }
                }
            },
            "EKEYtoXCHAR": {
                "id": "xchar:EKEYtoXCHAR",
                "number": "18.6.2.1306.60",
                "name": "EKEY>XCHAR",
                "english": "e-key-to-x-char",
                "list": "XCHAR EXT",
                "basename": "EKEYtoXCHAR",
                "stackEffect": {
                    "html": {
                        " ": "( <em>x</em> -- <em>xchar true  |  x false</em> )"
                    },
                    "plain": {
                        " ": "( x -- xchar true  |  x false )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>x</em> -- <em>xchar true  |  x false</em> )\n      <p>\n      If the keyboard event <em>x</em> corresponds to an xchar, return the\n      <em>xchar</em> and <em>true</em>.  Otherwise, return <em>x</em> and\n      <em>false</em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../facility/EKEY.html\">10.6.2.1305 EKEY</a>,\n      <a href=\"../facility/EKEYtoCHAR.html\">10.6.2.1306 EKEY&gt;CHAR</a>,\n      <a href=\"../facility/EKEYtoFKEY.html\">10.6.2.1306.40 EKEY&gt;FKEY</a>.\n      \n      "
                    }
                }
            },
            "MinusTRAILING-GARBAGE": {
                "id": "xchar:-TRAILING-GARBAGE",
                "number": "18.6.2.0175",
                "name": "-TRAILING-GARBAGE",
                "english": "minus-trailing-garbage",
                "list": "XCHAR EXT",
                "basename": "MinusTRAILING-GARBAGE",
                "stackEffect": {
                    "html": {
                        " ": "( <em>xc-addr u<sub>1</sub></em> -- <em>xc-addr u<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( xc-addr u1 -- xc-addr u2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>xc-addr u<sub>1</sub></em> -- <em>xc-addr u<sub>2</sub></em> )\n      <p>\n      Examine the last xchar in the string <em>xc-addr u<sub>1</sub></em> — if the\n      encoding is correct and it represents a full xchar, <em>u<sub>2</sub></em> equals\n      <em>u<sub>1</sub></em>, otherwise, <em>u<sub>2</sub></em> represents the string without the\n      last (garbled) xchar.  <strong>-TRAILING-GARBAGE</strong> does not change this\n      garbled xchar.\n      </p><p>\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n\n      <a href=\"../core/Colon.html\">:</a> <strong>-TRAILING-GARBAGE</strong> <a href=\"../core/p.html\">(</a> xc-addr u1 -- xc-addr u2 ) <br>\n      &nbsp;&nbsp; <a href=\"../core/TwoDUP.html\">2DUP</a> <a href=\"../core/Plus.html\">+</a> <a href=\"../core/DUP.html\">DUP</a> <a href=\"../xchar/XCHARMinus.html\">XCHAR-</a> <a href=\"../core/p.html\">(</a> addr u1 end1 end2 ) <br>\n      &nbsp;&nbsp; <a href=\"../core/TwoDUP.html\">2DUP</a> <a href=\"../core/DUP.html\">DUP</a> <a href=\"../core/OVER.html\">OVER</a> <a href=\"../core/OVER.html\">OVER</a> <a href=\"../core/Minus.html\">-</a> <a href=\"../xchar/X-SIZE.html\">X-SIZE</a> <a href=\"../core/Plus.html\">+</a> <a href=\"../core/Equal.html\">=</a> <a href=\"../core/IF.html\">IF</a> <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">last xchar ok</span> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/TwoDROP.html\">2DROP</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/ELSE.html\">ELSE</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/NIP.html\">NIP</a> <a href=\"../core/NIP.html\">NIP</a> <a href=\"../core/OVER.html\">OVER</a> <a href=\"../core/Minus.html\">-</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/THEN.html\">THEN</a> <a href=\"../core/Semi.html\">;</a>\n      \n      \n      "
                    }
                }
            },
            "PARSE": {
                "id": "xchar:PARSE",
                "number": "18.6.2.2008",
                "name": "PARSE",
                "english": " ",
                "list": "XCHAR EXT",
                "basename": "PARSE",
                "stackEffect": {
                    "html": {
                        " ": "( <em>xchar \"ccc&lt;xchar&gt;\"</em> -- <em>c-addr u</em> )"
                    },
                    "plain": {
                        " ": "( xchar \"ccc<xchar>\" -- c-addr u )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>xchar \"ccc&lt;xchar&gt;\"</em> -- <em>c-addr u</em> )\n      <p>\n      Parse <em>ccc</em> in the input stream delimited by <em>xchar</em>.\n      </p><p>\n      <em>c-addr</em> is the address (within the input buffer) and <em>u</em>\n      is the length of the parsed string. If the parse area was empty, the\n      resulting string has a zero length.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <strong><a href=\"../usage.html#usage:parsing\">3.4.1 Parsing</a></strong>,\n      <a href=\"../core/PARSE.html\">6.2.2008 PARSE</a>,\n      <a href=\"../rationale.html#rat:core:PARSE\">A.6.2.2008 PARSE</a>.\n      \n      "
                    }
                }
            },
            "PlusXDivSTRING": {
                "id": "xchar:+X/STRING",
                "number": "18.6.2.0145",
                "name": "+X/STRING",
                "english": "plus-x-string",
                "list": "XCHAR EXT",
                "basename": "PlusXDivSTRING",
                "stackEffect": {
                    "html": {
                        " ": "( <em>xc-addr<sub>1</sub> u<sub>1</sub></em> -- <em>xc-addr<sub>2</sub> u<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( xc-addr1 u1 -- xc-addr2 u2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>xc-addr<sub>1</sub> u<sub>1</sub></em> -- <em>xc-addr<sub>2</sub> u<sub>2</sub></em> )\n      <p>\n      Step forward by one xchar in the buffer defined by <em>xc-addr<sub>1</sub> u<sub>1</sub></em>.\n      <em>xc-addr<sub>2</sub> u<sub>2</sub></em> is the remaining buffer after stepping over the\n      first xchar in the buffer.\n      </p><p>\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n\n      <a href=\"../core/Colon.html\">:</a> <strong>+X/STRING</strong> <a href=\"../core/p.html\">(</a> xc-addr1 u1 -- xc-addr2 u2 ) <br>\n      &nbsp;&nbsp; <a href=\"../core/OVER.html\">OVER</a> <a href=\"../core/DUP.html\">DUP</a> <a href=\"../xchar/XCHARPlus.html\">XCHAR+</a> <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../core/Minus.html\">-</a> <a href=\"../string/DivSTRING.html\">/STRING</a> <a href=\"../core/Semi.html\">;</a>\n      \n      \n      "
                    }
                }
            },
            "X-SIZE": {
                "id": "xchar:X-SIZE",
                "number": "18.6.1.2486.50",
                "name": "X-SIZE",
                "english": " ",
                "list": "XCHAR",
                "basename": "X-SIZE",
                "stackEffect": {
                    "html": {
                        " ": "( <em>xc-addr u<sub>1</sub></em> -- <em>u<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( xc-addr u1 -- u2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>xc-addr u<sub>1</sub></em> -- <em>u<sub>2</sub></em> )\n      <p>\n      <em>u<sub>2</sub></em> is the number of pchars used to encode the first xchar\n      stored in the string <em>xc-addr u1</em>.  To calculate the size of\n      the xchar, only the bytes inside the buffer may be accessed.  An\n      ambiguous condition exists if the xchar is incomplete or malformed.\n      </p><p>\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n\n      <a href=\"../core/Colon.html\">:</a> <strong>X-SIZE</strong> <a href=\"../core/p.html\">(</a> xc-addr u1 -- u2 ) <br>\n      &nbsp;&nbsp; <a href=\"../core/ZeroEqual.html\">0=</a>         <a href=\"../core/IF.html\">IF</a> <a href=\"../core/DROP.html\">DROP</a> 0 <a href=\"../core/EXIT.html\">EXIT</a> <a href=\"../core/THEN.html\">THEN</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">length of UTF-8 char starting at u8-addr (accesses only u8-addr)</span> <br>\n      &nbsp;&nbsp; <a href=\"../core/CFetch.html\">C@</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/DUP.html\">DUP</a> $80 <a href=\"../core/Uless.html\">U&lt;</a> <a href=\"../core/IF.html\">IF</a> <a href=\"../core/DROP.html\">DROP</a> 1 <a href=\"../core/EXIT.html\">EXIT</a> <a href=\"../core/THEN.html\">THEN</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/DUP.html\">DUP</a> $c0 <a href=\"../core/Uless.html\">U&lt;</a> <a href=\"../core/IF.html\">IF</a> -77 <a href=\"../exception/THROW.html\">THROW</a>   <a href=\"../core/THEN.html\">THEN</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/DUP.html\">DUP</a> $e0 <a href=\"../core/Uless.html\">U&lt;</a> <a href=\"../core/IF.html\">IF</a> <a href=\"../core/DROP.html\">DROP</a> 2 <a href=\"../core/EXIT.html\">EXIT</a> <a href=\"../core/THEN.html\">THEN</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/DUP.html\">DUP</a> $f0 <a href=\"../core/Uless.html\">U&lt;</a> <a href=\"../core/IF.html\">IF</a> <a href=\"../core/DROP.html\">DROP</a> 3 <a href=\"../core/EXIT.html\">EXIT</a> <a href=\"../core/THEN.html\">THEN</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/DUP.html\">DUP</a> $f8 <a href=\"../core/Uless.html\">U&lt;</a> <a href=\"../core/IF.html\">IF</a> <a href=\"../core/DROP.html\">DROP</a> 4 <a href=\"../core/EXIT.html\">EXIT</a> <a href=\"../core/THEN.html\">THEN</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/DUP.html\">DUP</a> $fc <a href=\"../core/Uless.html\">U&lt;</a> <a href=\"../core/IF.html\">IF</a> <a href=\"../core/DROP.html\">DROP</a> 5 <a href=\"../core/EXIT.html\">EXIT</a> <a href=\"../core/THEN.html\">THEN</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/DUP.html\">DUP</a> $fe <a href=\"../core/Uless.html\">U&lt;</a> <a href=\"../core/IF.html\">IF</a> <a href=\"../core/DROP.html\">DROP</a> 6 <a href=\"../core/EXIT.html\">EXIT</a> <a href=\"../core/THEN.html\">THEN</a> <br>\n      &nbsp;&nbsp; -77 <a href=\"../exception/THROW.html\">THROW</a> <a href=\"../core/Semi.html\">;</a>\n      \n      \n      "
                    }
                }
            },
            "X-WIDTH": {
                "id": "xchar:X-WIDTH",
                "number": "18.6.2.2486.70",
                "name": "X-WIDTH",
                "english": " ",
                "list": "XCHAR EXT",
                "basename": "X-WIDTH",
                "stackEffect": {
                    "html": {
                        " ": "( <em>xc-addr u</em> -- <em>n</em> )"
                    },
                    "plain": {
                        " ": "( xc-addr u -- n )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>xc-addr u</em> -- <em>n</em> )\n      <p>\n      <em>n</em> is the number of monospace ASCII characters that take the same\n      space to display as the xchar string <em>xc-addr u</em>; assuming a\n      monospaced display font, i.e., xchar width is always an integer multiple\n      of the width of an ASCII character.\n      </p><p>\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n\n      <a href=\"../core/Colon.html\">:</a> <strong>X-WIDTH</strong> <a href=\"../core/p.html\">(</a> xc-addr u -- n ) <br>\n      &nbsp;&nbsp; 0 <a href=\"../core/ROT.html\">ROT</a> <a href=\"../core/ROT.html\">ROT</a> <a href=\"../core/OVER.html\">OVER</a> <a href=\"../core/Plus.html\">+</a> <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../core/qDO.html\">?DO</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/I.html\">I</a> <a href=\"../xchar/XCFetchPlus.html\">XC@+</a> <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../core/toR.html\">&gt;R</a> <a href=\"../xchar/XC-WIDTH.html\">XC-WIDTH</a> <a href=\"../core/Plus.html\">+</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/I.html\">I</a> <a href=\"../core/Minus.html\">-</a> <a href=\"../core/PlusLOOP.html\">+LOOP</a> <a href=\"../core/Semi.html\">;</a>\n      \n      \n      "
                    }
                }
            },
            "XC-SIZE": {
                "id": "xchar:XC-SIZE",
                "number": "18.6.1.2487.25",
                "name": "XC-SIZE",
                "english": "x-c-size",
                "list": "XCHAR",
                "basename": "XC-SIZE",
                "stackEffect": {
                    "html": {
                        " ": "( <em>xchar</em> -- <em>u</em> )"
                    },
                    "plain": {
                        " ": "( xchar -- u )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>xchar</em> -- <em>u</em> )\n      <p>\n      <em>u</em> is the number of pchars used to encode <em>xchar</em> in memory.\n      </p><p>\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n\n      <a href=\"../core/Colon.html\">:</a> <strong>XC-SIZE</strong> <a href=\"../core/p.html\">(</a> xchar -- n ) <br>\n      &nbsp;&nbsp; <a href=\"../core/DUP.html\">DUP</a> $80 <a href=\"../core/Uless.html\">U&lt;</a> <a href=\"../core/IF.html\">IF</a> <a href=\"../core/DROP.html\">DROP</a> 1 <a href=\"../core/EXIT.html\">EXIT</a> <a href=\"../core/THEN.html\">THEN</a> <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">special case ASCII</span> <br>\n      &nbsp;&nbsp; $800  2 <a href=\"../core/toR.html\">&gt;R</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/BEGIN.html\">BEGIN</a> <a href=\"../core/TwoDUP.html\">2DUP</a> U&gt;= <a href=\"../core/WHILE.html\">WHILE</a>  5 <a href=\"../core/LSHIFT.html\">LSHIFT</a> <a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/OnePlus.html\">1+</a> <a href=\"../core/toR.html\">&gt;R</a> <a href=\"../core/DUP.html\">DUP</a> <a href=\"../core/ZeroEqual.html\">0=</a> <a href=\"../core/UNTIL.html\">UNTIL</a> <a href=\"../core/THEN.html\">THEN</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/TwoDROP.html\">2DROP</a> <a href=\"../core/Rfrom.html\">R&gt;</a> <br>\n      <a href=\"../core/Semi.html\">;</a>\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      This test assumes UTF-8 encoding is being used.\n      <p>\n            </p><div class=\"tt\">\n<a href=\"../core/HEX.html\">HEX</a> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;<strong>XC-SIZE</strong> -&gt; 1 }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;7f&nbsp;<strong>XC-SIZE</strong> -&gt; 1 }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;&nbsp;80&nbsp;<strong>XC-SIZE</strong> -&gt; 2 }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;7ff&nbsp;<strong>XC-SIZE</strong> -&gt; 2 }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;&nbsp;800&nbsp;<strong>XC-SIZE</strong> -&gt; 3 }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;&nbsp;ffff&nbsp;<strong>XC-SIZE</strong> -&gt; 3 }T</span> <br>\n        <span class=\"tt\">T{ &nbsp;10000&nbsp;<strong>XC-SIZE</strong> -&gt; 4 }T</span> <br>\n        <span class=\"tt\">T{ 1fffff&nbsp;<strong>XC-SIZE</strong> -&gt; 4 }T</span>\n        \n        \n        </div>\n      "
                    }
                }
            },
            "XC-WIDTH": {
                "id": "xchar:XC-WIDTH",
                "number": "18.6.2.2487.30",
                "name": "XC-WIDTH",
                "english": "x-c-width",
                "list": "XCHAR EXT",
                "basename": "XC-WIDTH",
                "stackEffect": {
                    "html": {
                        " ": "( <em>xchar</em> -- <em>n</em> )"
                    },
                    "plain": {
                        " ": "( xchar -- n )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>xchar</em> -- <em>n</em> )\n      <p>\n      <em>n</em> is the number of monospace ASCII characters that take the same\n      space to display as the <em>xchar</em>; i.e., <em>xchar</em> width is always\n      an integer multiple of the width of an ASCII char.\n      </p><p>\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n\n      <a href=\"../core/Colon.html\">:</a> wc, <a href=\"../core/p.html\">(</a> n low high -- )  <a href=\"../core/OnePlus.html\">1+</a> <a href=\"../core/Comma.html\">,</a> <a href=\"../core/Comma.html\">,</a> <a href=\"../core/Comma.html\">,</a> <a href=\"../core/Semi.html\">;</a>\n      <p>\n      <a href=\"../core/CREATE.html\">CREATE</a> wc-table <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">derived from wcwidth source code, for UCS32</span> <br>\n      0  0300  0357 wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  035D  036F wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  0483  0486 wc,<br>\n      0  0488  0489 wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  0591  05A1 wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  05A3  05B9 wc,<br>\n      0  05BB  05BD wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  05BF  05BF wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  05C1  05C2 wc,<br>\n      0  05C4  05C4 wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  0600  0603 wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  0610  0615 wc,<br>\n      0  064B  0658 wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  0670  0670 wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  06D6  06E4 wc,<br>\n      0  06E7  06E8 wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  06EA  06ED wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  070F  070F wc,<br>\n      0  0711  0711 wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  0730  074A wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  07A6  07B0 wc,<br>\n      0  0901  0902 wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  093C  093C wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  0941  0948 wc,<br>\n      0  094D  094D wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  0951  0954 wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  0962  0963 wc,<br>\n      0  0981  0981 wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  09BC  09BC wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  09C1  09C4 wc,<br>\n      0  09CD  09CD wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  09E2  09E3 wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  0A01  0A02 wc,<br>\n      0  0A3C  0A3C wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  0A41  0A42 wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  0A47  0A48 wc,<br>\n      0  0A4B  0A4D wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  0A70  0A71 wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  0A81  0A82 wc,<br>\n      0  0ABC  0ABC wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  0AC1  0AC5 wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  0AC7  0AC8 wc,<br>\n      0  0ACD  0ACD wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  0AE2  0AE3 wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  0B01  0B01 wc,<br>\n      0  0B3C  0B3C wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  0B3F  0B3F wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  0B41  0B43 wc,<br>\n      0  0B4D  0B4D wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  0B56  0B56 wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  0B82  0B82 wc,<br>\n      0  0BC0  0BC0 wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  0BCD  0BCD wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  0C3E  0C40 wc,<br>\n      0  0C46  0C48 wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  0C4A  0C4D wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  0C55  0C56 wc,<br>\n      0  0CBC  0CBC wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  0CBF  0CBF wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  0CC6  0CC6 wc,<br>\n      0  0CCC  0CCD wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  0D41  0D43 wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  0D4D  0D4D wc,<br>\n      0  0DCA  0DCA wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  0DD2  0DD4 wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  0DD6  0DD6 wc,<br>\n      0  0E31  0E31 wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  0E34  0E3A wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  0E47  0E4E wc,<br>\n      0  0EB1  0EB1 wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  0EB4  0EB9 wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  0EBB  0EBC wc,<br>\n      0  0EC8  0ECD wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  0F18  0F19 wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  0F35  0F35 wc,<br>\n      0  0F37  0F37 wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  0F39  0F39 wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  0F71  0F7E wc,<br>\n      0  0F80  0F84 wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  0F86  0F87 wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  0F90  0F97 wc,<br>\n      0  0F99  0FBC wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  0FC6  0FC6 wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  102D  1030 wc,<br>\n      0  1032  1032 wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  1036  1037 wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  1039  1039 wc,<br>\n      0  1058  1059 wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      1  0000  1100 wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      2  1100  115f wc,<br>\n      0  1160  11FF wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  1712  1714 wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  1732  1734 wc,<br>\n      0  1752  1753 wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  1772  1773 wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  17B4  17B5 wc,<br>\n      0  17B7  17BD wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  17C6  17C6 wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  17C9  17D3 wc,<br>\n      0  17DD  17DD wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  180B  180D wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  18A9  18A9 wc,<br>\n      0  1920  1922 wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  1927  1928 wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  1932  1932 wc,<br>\n      0  1939  193B wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  200B  200F wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  202A  202E wc,<br>\n      0  2060  2063 wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  206A  206F wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  20D0  20EA wc,<br>\n      2  2329  232A wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  302A  302F wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      2  2E80  303E wc,<br>\n      0  3099  309A wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      2  3040  A4CF wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      2  AC00  D7A3 wc,<br>\n      2  F900  FAFF wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  FB1E  FB1E wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  FE00  FE0F wc,<br>\n      0  FE20  FE23 wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      2  FE30  FE6F wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  FEFF  FEFF wc,<br>\n      2  FF00  FF60 wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      2  FFE0  FFE6 wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0  FFF9  FFFB wc,<br>\n      0 1D167 1D169 wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0 1D173 1D182 wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0 1D185 1D18B wc,<br>\n      0 1D1AA 1D1AD wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      2 20000 2FFFD wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      2 30000 3FFFD wc,<br>\n      0 E0001 E0001 wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0 E0020 E007F wc,&nbsp;&nbsp;&nbsp;&nbsp;\n      0 E0100 E01EF wc,<br>\n      <a href=\"../core/HERE.html\">HERE</a> wc-table <a href=\"../core/Minus.html\">-</a> <a href=\"../core/CONSTANT.html\">CONSTANT</a> #wc-table\n      </p><p>\n      <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">inefficient table walk:</span>\n      </p><p>\n      <a href=\"../core/Colon.html\">:</a> <strong>XC-WIDTH</strong> <a href=\"../core/p.html\">(</a> xchar -- n ) <br>\n      &nbsp;&nbsp; wc-table #wc-table <a href=\"../core/OVER.html\">OVER</a> <a href=\"../core/Plus.html\">+</a> <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../core/qDO.html\">?DO</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/DUP.html\">DUP</a> <a href=\"../core/I.html\">I</a> <a href=\"../core/TwoFetch.html\">2@</a> <a href=\"../core/WITHIN.html\">WITHIN</a> <a href=\"../core/IF.html\">IF</a>\n      <a href=\"../core/DROP.html\">DROP</a> <a href=\"../core/I.html\">I</a> 2 <a href=\"../core/CELLS.html\">CELLS</a> <a href=\"../core/Plus.html\">+</a> <a href=\"../core/Fetch.html\">@</a> <a href=\"../core/UNLOOP.html\">UNLOOP</a> <a href=\"../core/EXIT.html\">EXIT</a> <a href=\"../core/THEN.html\">THEN</a> <br>\n      &nbsp;&nbsp; 3 <a href=\"../core/CELLS.html\">CELLS</a> <a href=\"../core/PlusLOOP.html\">+LOOP</a> <a href=\"../core/DROP.html\">DROP</a> 1 <a href=\"../core/Semi.html\">;</a>\n        \n      </p>"
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      <span class=\"tt\">T{ $606D&nbsp;<strong>XC-WIDTH</strong> -&gt; 2 }T</span> <br>\n      <span class=\"tt\">T{ &nbsp;&nbsp;$41&nbsp;<strong>XC-WIDTH</strong> -&gt; 1 }T</span> <br>\n      <span class=\"tt\">T{ $2060&nbsp;<strong>XC-WIDTH</strong> -&gt; 0 }T</span>\n      \n      \n      "
                    }
                }
            },
            "XCComma": {
                "id": "xchar:XC,",
                "number": "18.6.1.2487.20",
                "name": "XC,",
                "english": "x-c-comma",
                "list": "XCHAR",
                "basename": "XCComma",
                "stackEffect": {
                    "html": {
                        " ": "( <em>xchar</em> -- )"
                    },
                    "plain": {
                        " ": "( xchar -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>xchar</em> -- )\n      <p>\n      Append the encoding of <em>xchar</em> to the dictionary.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/CComma.html\">6.1.0860 C,</a>.\n      <p>\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n\n      <a href=\"../core/Colon.html\">:</a> <strong>XC,</strong> <a href=\"../core/p.html\">(</a> xchar -- ) <a href=\"../core/HERE.html\">HERE</a> <a href=\"../xchar/XCStorePlus.html\">XC!+</a> DP <a href=\"../core/Store.html\">!</a> <a href=\"../core/Semi.html\">;</a>\n      \n      \n      "
                    }
                }
            },
            "XCFetchPlus": {
                "id": "xchar:XC@+",
                "number": "18.6.1.2487.35",
                "name": "XC@+",
                "english": "x-c-fetch-plus",
                "list": "XCHAR",
                "basename": "XCFetchPlus",
                "stackEffect": {
                    "html": {
                        " ": "( <em>xc-addr<sub>1</sub></em> -- <em>xc-addr<sub>2</sub> xchar</em> )"
                    },
                    "plain": {
                        " ": "( xc-addr1 -- xc-addr2 xchar )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>xc-addr<sub>1</sub></em> -- <em>xc-addr<sub>2</sub> xchar</em> )\n      <p>\n      Fetches the <em>xchar</em> at <em>xc-addr<sub>1</sub></em>.  <em>xc-addr<sub>2</sub></em>\n      points to the first memory location after the retrieved <em>xchar</em>.\n      </p><p>\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n\n      <a href=\"../core/Colon.html\">:</a> <strong>XC@+</strong> <a href=\"../core/p.html\">(</a> xc-addr -- xc-addr' u ) <br>\n      &nbsp;&nbsp; <a href=\"../core/COUNT.html\">COUNT</a> <a href=\"../core/DUP.html\">DUP</a> $80 <a href=\"../core/Uless.html\">U&lt;</a> <a href=\"../core/IF.html\">IF</a> <a href=\"../core/EXIT.html\">EXIT</a> <a href=\"../core/THEN.html\">THEN</a>  <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">special case ASCII</span> <br>\n      &nbsp;&nbsp; $7F <a href=\"../core/AND.html\">AND</a> $40 <a href=\"../core/toR.html\">&gt;R</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/BEGIN.html\">BEGIN</a> <a href=\"../core/DUP.html\">DUP</a> <a href=\"../core/RFetch.html\">R@</a> <a href=\"../core/AND.html\">AND</a> <a href=\"../core/WHILE.html\">WHILE</a> <a href=\"../core/RFetch.html\">R@</a> <a href=\"../core/XOR.html\">XOR</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; 6 <a href=\"../core/LSHIFT.html\">LSHIFT</a> <a href=\"../core/Rfrom.html\">R&gt;</a> 5 <a href=\"../core/LSHIFT.html\">LSHIFT</a> <a href=\"../core/toR.html\">&gt;R</a> <a href=\"../core/toR.html\">&gt;R</a> <a href=\"../core/COUNT.html\">COUNT</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; $3F <a href=\"../core/AND.html\">AND</a> <a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/OR.html\">OR</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/REPEAT.html\">REPEAT</a> <a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/DROP.html\">DROP</a> <br>\n      <a href=\"../core/Semi.html\">;</a>\n      \n      "
                    }
                }
            },
            "XCHARMinus": {
                "id": "xchar:XCHAR-",
                "number": "18.6.2.2487.45",
                "name": "XCHAR-",
                "english": "x-char-minus",
                "list": "XCHAR EXT",
                "basename": "XCHARMinus",
                "stackEffect": {
                    "html": {
                        " ": "( <em>xc-addr<sub>1</sub></em> -- <em>xc-addr<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( xc-addr1 -- xc-addr2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>xc-addr<sub>1</sub></em> -- <em>xc-addr<sub>2</sub></em> )\n      <p>\n      Goes backward from <em>xc-addr<sub>1</sub></em> until it finds an xchar so that the\n      size of this xchar added to <em>xc-addr<sub>2</sub></em> gives <em>xc-addr1</em>.\n      There is an ambiguous condition when the encoding doesn't permit reliable\n      backward stepping through the text.\n      </p><p>\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n\n      <a href=\"../core/Colon.html\">:</a> <strong>XCHAR-</strong> <a href=\"../core/p.html\">(</a> xc-addr -- xc-addr' ) <br>\n      &nbsp;&nbsp; <a href=\"../core/BEGIN.html\">BEGIN</a>  1 <a href=\"../core/CHARS.html\">CHARS</a> <a href=\"../core/Minus.html\">-</a> <a href=\"../core/DUP.html\">DUP</a> <a href=\"../core/CFetch.html\">C@</a> $C0 <a href=\"../core/AND.html\">AND</a> $80 <a href=\"../core/ne.html\">&lt;&gt;</a> <a href=\"../core/UNTIL.html\">UNTIL</a> <a href=\"../core/Semi.html\">;</a>\n      \n      \n      "
                    }
                }
            },
            "XCHARPlus": {
                "id": "xchar:XCHAR+",
                "number": "18.6.1.2487.40",
                "name": "XCHAR+",
                "english": "x-char-plus",
                "list": "XCHAR",
                "basename": "XCHARPlus",
                "stackEffect": {
                    "html": {
                        " ": "( <em>xc-addr<sub>1</sub></em> -- <em>xc-addr<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( xc-addr1 -- xc-addr2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>xc-addr<sub>1</sub></em> -- <em>xc-addr<sub>2</sub></em> )\n      <p>\n      Adds the size of the xchar stored at <em>xc-addr<sub>1</sub></em> to this address,\n      giving <em>xc-addr<sub>2</sub></em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/CHARPlus.html\">6.1.0897 CHAR+</a>.\n      <p>\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n\n      <a href=\"../core/Colon.html\">:</a> <strong>XCHAR+</strong> <a href=\"../core/p.html\">(</a> xc-addr -- xc-addr' )  <a href=\"../xchar/XCFetchPlus.html\">XC@+</a> <a href=\"../core/DROP.html\">DROP</a> <a href=\"../core/Semi.html\">;</a>\n      \n      \n      "
                    }
                }
            },
            "XCStorePlus": {
                "id": "xchar:XC!+",
                "number": "18.6.1.2487.10",
                "name": "XC!+",
                "english": "x-c-store-plus",
                "list": "XCHAR",
                "basename": "XCStorePlus",
                "stackEffect": {
                    "html": {
                        " ": "( <em>xchar xc-addr<sub>1</sub></em> -- <em>xc-addr<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( xchar xc-addr1 -- xc-addr2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>xchar xc-addr<sub>1</sub></em> -- <em>xc-addr<sub>2</sub></em> )\n      <p>\n      Stores the <em>xchar</em> at <em>xc-addr<sub>1</sub></em>.  <em>xc-addr<sub>2</sub></em>\n      points to the first memory location after the stored <em>xchar</em>.\n      </p><p>\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n\n      <a href=\"../core/Colon.html\">:</a> <strong>XC!+</strong> <a href=\"../core/p.html\">(</a> xchar xc-addr -- xc-addr' ) <br>\n      &nbsp;&nbsp; <a href=\"../core/OVER.html\">OVER</a> $80 <a href=\"../core/Uless.html\">U&lt;</a> <a href=\"../core/IF.html\">IF</a> <a href=\"../core/TUCK.html\">TUCK</a> <a href=\"../core/CStore.html\">C!</a> <a href=\"../core/CHARPlus.html\">CHAR+</a> <a href=\"../core/EXIT.html\">EXIT</a> <a href=\"../core/THEN.html\">THEN</a> <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">special case ASCII</span> <br>\n      &nbsp;&nbsp; <a href=\"../core/toR.html\">&gt;R</a> 0 <a href=\"../core/SWAP.html\">SWAP</a> $3F <br>\n      &nbsp;&nbsp; <a href=\"../core/BEGIN.html\">BEGIN</a> <a href=\"../core/TwoDUP.html\">2DUP</a> <a href=\"../core/Umore.html\">U&gt;</a> <a href=\"../core/WHILE.html\">WHILE</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/TwoDiv.html\">2/</a> <a href=\"../core/toR.html\">&gt;R</a> <a href=\"../core/DUP.html\">DUP</a> $3F <a href=\"../core/AND.html\">AND</a> $80 <a href=\"../core/OR.html\">OR</a> <a href=\"../core/SWAP.html\">SWAP</a> 6 <a href=\"../core/RSHIFT.html\">RSHIFT</a> <a href=\"../core/Rfrom.html\">R&gt;</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/REPEAT.html\">REPEAT</a> $7F <a href=\"../core/XOR.html\">XOR</a> <a href=\"../core/TwoTimes.html\">2*</a> <a href=\"../core/OR.html\">OR</a> <a href=\"../core/Rfrom.html\">R&gt;</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/BEGIN.html\">BEGIN</a> <a href=\"../core/OVER.html\">OVER</a> $80 <a href=\"../core/Uless.html\">U&lt;</a> <a href=\"../core/ZeroEqual.html\">0=</a> <a href=\"../core/WHILE.html\">WHILE</a> <a href=\"../core/TUCK.html\">TUCK</a> <a href=\"../core/CStore.html\">C!</a> <a href=\"../core/CHARPlus.html\">CHAR+</a> <a href=\"../core/REPEAT.html\">REPEAT</a> <a href=\"../core/NIP.html\">NIP</a> <br>\n      <a href=\"../core/Semi.html\">;</a>\n      \n      \n      "
                    }
                }
            },
            "XCStorePlusq": {
                "id": "xchar:XC!+q",
                "number": "18.6.1.2487.15",
                "name": "XC!+?",
                "english": "x-c-store-plus-query",
                "list": "XCHAR",
                "basename": "XCStorePlusq",
                "stackEffect": {
                    "html": {
                        " ": "( <em>xchar xc-addr<sub>1</sub> u<sub>1</sub></em> -- <em>xc-addr<sub>2</sub> u<sub>2</sub> flag</em> )"
                    },
                    "plain": {
                        " ": "( xchar xc-addr1 u1 -- xc-addr2 u2 flag )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>xchar xc-addr<sub>1</sub> u<sub>1</sub></em> -- <em>xc-addr<sub>2</sub> u<sub>2</sub> flag</em> )\n      <p>\n      Stores the <em>xchar</em> into the string buffer specified by\n      <em>xc-addr<sub>1</sub> u<sub>1</sub></em>.  <em>xc-addr<sub>2</sub> u<sub>2</sub></em> is the remaining string\n      buffer.  If the <em>xchar</em> did fit into the buffer, <em>flag</em>\n      is true, otherwise <em>flag</em> is false, and <em>xc-addr<sub>2</sub> u<sub>2</sub></em>\n      equal <em>xc-addr<sub>1</sub> u<sub>1</sub></em>.  <strong>XC!+?</strong> is safe for buffer overflows.\n      </p><p>\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n\n      <a href=\"../core/Colon.html\">:</a> <strong>XC!+?</strong> <a href=\"../core/p.html\">(</a> xchar xc-addr u -- xc-addr' u' flag ) <br>\n      &nbsp;&nbsp; <a href=\"../core/toR.html\">&gt;R</a> <a href=\"../core/OVER.html\">OVER</a> <a href=\"../xchar/XC-SIZE.html\">XC-SIZE</a> <a href=\"../core/RFetch.html\">R@</a> <a href=\"../core/OVER.html\">OVER</a> <a href=\"../core/Uless.html\">U&lt;</a> <a href=\"../core/IF.html\">IF</a> <a href=\"../core/p.html\">(</a> xchar xc-addr1 len r: u1 ) <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">not enough space</span> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/DROP.html\">DROP</a> <a href=\"../core/NIP.html\">NIP</a> <a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/FALSE.html\">FALSE</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/ELSE.html\">ELSE</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/toR.html\">&gt;R</a> <a href=\"../xchar/XCStorePlus.html\">XC!+</a> <a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/SWAP.html\">SWAP</a> <a href=\"../core/Minus.html\">-</a> <a href=\"../core/TRUE.html\">TRUE</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/THEN.html\">THEN</a> <a href=\"../core/Semi.html\">;</a>\n        \n      "
                    },
                    "Testing:": {
                        "name": "Testing:",
                        "html": "\n\n\n      <span class=\"tt\">T{ $ffff&nbsp;<a href=\"../core/PAD.html\">PAD</a>&nbsp;4&nbsp;<strong>XC!+?</strong> -&gt; <a href=\"../core/PAD.html\">PAD</a>&nbsp;3&nbsp;<a href=\"../core/Plus.html\">+</a>&nbsp;1&nbsp;&lt;TRUE&gt; }T</span>\n      \n      \n      "
                    }
                }
            },
            "XEMIT": {
                "id": "xchar:XEMIT",
                "number": "18.6.1.2488.10",
                "name": "XEMIT",
                "english": "x-emit",
                "list": "XCHAR",
                "basename": "XEMIT",
                "stackEffect": {
                    "html": {
                        " ": "( <em>xchar</em> -- )"
                    },
                    "plain": {
                        " ": "( xchar -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>xchar</em> -- )\n      <p>\n      Prints an <em>xchar</em> on the terminal.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/EMIT.html\">6.1.1320 EMIT</a>\n      <p>\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n\n      <a href=\"../core/Colon.html\">:</a> <strong>XEMIT</strong> <a href=\"../core/p.html\">(</a> xchar -- ) <br>\n      &nbsp;&nbsp; <a href=\"../core/DUP.html\">DUP</a> $80 <a href=\"../core/Uless.html\">U&lt;</a> <a href=\"../core/IF.html\">IF</a> <a href=\"../core/EMIT.html\">EMIT</a> <a href=\"../core/EXIT.html\">EXIT</a> <a href=\"../core/THEN.html\">THEN</a> <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">special case ASCII</span> <br>\n      &nbsp;&nbsp; 0 <a href=\"../core/SWAP.html\">SWAP</a> $3F <br>\n      &nbsp;&nbsp; <a href=\"../core/BEGIN.html\">BEGIN</a> <a href=\"../core/TwoDUP.html\">2DUP</a> <a href=\"../core/Umore.html\">U&gt;</a> <a href=\"../core/WHILE.html\">WHILE</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; <a href=\"../core/TwoDiv.html\">2/</a> <a href=\"../core/toR.html\">&gt;R</a> <a href=\"../core/DUP.html\">DUP</a> $3F <a href=\"../core/AND.html\">AND</a> $80 <a href=\"../core/OR.html\">OR</a> <a href=\"../core/SWAP.html\">SWAP</a> 6 <a href=\"../core/RSHIFT.html\">RSHIFT</a> <a href=\"../core/Rfrom.html\">R&gt;</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/REPEAT.html\">REPEAT</a> $7F <a href=\"../core/XOR.html\">XOR</a> <a href=\"../core/TwoTimes.html\">2*</a> <a href=\"../core/OR.html\">OR</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/BEGIN.html\">BEGIN</a> <a href=\"../core/DUP.html\">DUP</a> $80 <a href=\"../core/Uless.html\">U&lt;</a> <a href=\"../core/ZeroEqual.html\">0=</a> <a href=\"../core/WHILE.html\">WHILE</a> <a href=\"../core/EMIT.html\">EMIT</a> <a href=\"../core/REPEAT.html\">REPEAT</a> <a href=\"../core/DROP.html\">DROP</a><br>\n      <a href=\"../core/Semi.html\">;</a>\n      \n      \n      "
                    }
                }
            },
            "XHOLD": {
                "id": "xchar:XHOLD",
                "number": "18.6.2.2488.20",
                "name": "XHOLD",
                "english": "x-hold",
                "list": "XCHAR EXT",
                "basename": "XHOLD",
                "stackEffect": {
                    "html": {
                        " ": "( <em>xchar</em> -- )"
                    },
                    "plain": {
                        " ": "( xchar -- )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>xchar</em> -- )\n      <p>\n      Adds <em>xchar</em> to the picture numeric output string.  An ambiguous\n      condition exists if <strong>XHOLD</strong> executes outside of a <a href=\"../core/num-start.html\">&lt;#</a>\n      <a href=\"../core/num-end.html\">#&gt;</a> delimited number conversion.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/HOLD.html\">6.1.1670 HOLD</a>.\n      <p>\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n\n      <a href=\"../core/CREATE.html\">CREATE</a> xholdbuf 8 <a href=\"../core/ALLOT.html\">ALLOT</a>\n      <p>\n      <a href=\"../core/Colon.html\">:</a> <strong>XHOLD</strong> <a href=\"../core/p.html\">(</a> xchar -- )\n      xholdbuf <a href=\"../core/TUCK.html\">TUCK</a> <a href=\"../xchar/XCStorePlus.html\">XC!+</a> <a href=\"../core/OVER.html\">OVER</a> <a href=\"../core/Minus.html\">-</a> <a href=\"../core/HOLDS.html\">HOLDS</a> <a href=\"../core/Semi.html\">;</a>\n      \n      \n      </p>"
                    }
                }
            },
            "XKEY": {
                "id": "xchar:XKEY",
                "number": "18.6.1.2488.30",
                "name": "XKEY",
                "english": "x-key",
                "list": "XCHAR",
                "basename": "XKEY",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>xchar</em> )"
                    },
                    "plain": {
                        " ": "( -- xchar )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>xchar</em> )\n      <p>\n      Reads an <em>xchar</em> from the terminal.  This will discard all input\n      events up to the completion of the <em>xchar</em>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../core/KEY.html\">6.1.1750 KEY</a>.\n      <p>\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n\n      <a href=\"../core/Colon.html\">:</a> <strong>XKEY</strong> <a href=\"../core/p.html\">(</a> -- xchar ) <br>\n      &nbsp;&nbsp; <a href=\"../core/KEY.html\">KEY</a> <a href=\"../core/DUP.html\">DUP</a> $80 <a href=\"../core/Uless.html\">U&lt;</a> <a href=\"../core/IF.html\">IF</a> <a href=\"../core/EXIT.html\">EXIT</a> <a href=\"../core/THEN.html\">THEN</a> <a href=\"../core/bs.html\">\\</a> <span class=\"rm\">special case ASCII</span> <br>\n      &nbsp;&nbsp; $7F <a href=\"../core/AND.html\">AND</a> $40 <a href=\"../core/toR.html\">&gt;R</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/BEGIN.html\">BEGIN</a> <a href=\"../core/DUP.html\">DUP</a> <a href=\"../core/RFetch.html\">R@</a> <a href=\"../core/AND.html\">AND</a> <a href=\"../core/WHILE.html\">WHILE</a> <a href=\"../core/RFetch.html\">R@</a> <a href=\"../core/XOR.html\">XOR</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; 6 <a href=\"../core/LSHIFT.html\">LSHIFT</a> <a href=\"../core/Rfrom.html\">R&gt;</a> 5 <a href=\"../core/LSHIFT.html\">LSHIFT</a> <a href=\"../core/toR.html\">&gt;R</a> <a href=\"../core/toR.html\">&gt;R</a> <a href=\"../core/KEY.html\">KEY</a> <br>\n      &nbsp;&nbsp;&nbsp;&nbsp; $3F <a href=\"../core/AND.html\">AND</a> <a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/OR.html\">OR</a> <br>\n      &nbsp;&nbsp; <a href=\"../core/REPEAT.html\">REPEAT</a> <a href=\"../core/Rfrom.html\">R&gt;</a> <a href=\"../core/DROP.html\">DROP</a> <a href=\"../core/Semi.html\">;</a>\n      \n      \n      "
                    }
                }
            },
            "XKEYq": {
                "id": "xchar:XKEYq",
                "number": "18.6.1.2488.35",
                "name": "XKEY?",
                "english": "x-key-query",
                "list": "XCHAR",
                "basename": "XKEYq",
                "stackEffect": {
                    "html": {
                        " ": "( -- <em>flag</em> )"
                    },
                    "plain": {
                        " ": "( -- flag )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( -- <em>flag</em> )\n      <p>\n      <em>Flag</em> is true when it's possible to do <a href=\"../xchar/XKEY.html\">XKEY</a> without\n      blocking.  Subsequent <a href=\"../facility/KEYq.html\">KEY?</a>, <a href=\"../core/KEY.html\">KEY</a>,\n      <a href=\"../facility/EKEYq.html\">EKEY?</a>, and <a href=\"../facility/EKEY.html\">EKEY</a> may be affected\n      by <strong>XKEY?</strong>.\n      </p><p>\n        \n      </p>"
                    },
                    "See:": {
                        "name": "See:",
                        "html": "\n\n <a href=\"../facility/KEYq.html\">10.6.1.1755 KEY?</a>.\n      \n      "
                    }
                }
            },
            "XSTRINGMinus": {
                "id": "xchar:XSTRING-",
                "number": "18.6.2.2495",
                "name": "X\\STRING-",
                "english": "x-string-minus",
                "list": "XCHAR EXT",
                "basename": "XSTRINGMinus",
                "stackEffect": {
                    "html": {
                        " ": "( <em>xc-addr u<sub>1</sub></em> -- <em>xc-addr u<sub>2</sub></em> )"
                    },
                    "plain": {
                        " ": "( xc-addr u1 -- xc-addr u2 )"
                    }
                },
                "sections": {
                    " ": {
                        "name": " ",
                        "html": "\n\n ( <em>xc-addr u<sub>1</sub></em> -- <em>xc-addr u<sub>2</sub></em> )\n      <p>\n      Search for the penultimate xchar in the string <em>xc-addr u<sub>1</sub></em>.\n      The string <em>xc-addr u<sub>2</sub></em> contains all xchars of\n      <em>xc-addr u<sub>1</sub></em>, but the last.  Unlike <a href=\"../xchar/XCHARMinus.html\">XCHAR-</a>,\n      <strong>X\\STRING-</strong> can be implemented in encodings where xchar\n      boundaries can only reliably detected when scanning in forward\n      direction.\n      </p><p>\n        \n      </p>"
                    },
                    "Implementation:": {
                        "name": "Implementation:",
                        "html": "\n\n\n      <a href=\"../core/Colon.html\">:</a> <strong>X\\STRING-</strong> <a href=\"../core/p.html\">(</a> xc-addr u -- xc-addr u' ) <br>\n      &nbsp;&nbsp; <a href=\"../core/OVER.html\">OVER</a> <a href=\"../core/Plus.html\">+</a> <a href=\"../xchar/XCHARMinus.html\">XCHAR-</a> <a href=\"../core/OVER.html\">OVER</a> <a href=\"../core/Minus.html\">-</a> <a href=\"../core/Semi.html\">;</a>\n      \n      \n      "
                    }
                }
            }
        }
    }
}